// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List organizations
    ///
    /// Lists all organizations, in the order that they were created.
    ///
    /// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
    ///
    /// - Remark: HTTP `GET /organizations`.
    /// - Remark: Generated from `#/paths//organizations/get(orgs/list)`.
    func orgs_sol_list(_ input: Operations.orgs_sol_list.Input) async throws -> Operations.orgs_sol_list.Output
    /// Get an organization
    ///
    /// Gets information about an organization.
    ///
    /// When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// To see the full details about an organization, the authenticated user must be an organization owner.
    ///
    /// The values returned by this endpoint are set by the "Update an organization" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the "Update an organization" endpoint have been overwritten by that configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on security configurations, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
    ///
    /// To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    func orgs_sol_get(_ input: Operations.orgs_sol_get.Input) async throws -> Operations.orgs_sol_get.Output
    /// Update an organization
    ///
    /// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
    ///
    /// Updates the organization's profile and member privileges.
    ///
    /// With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on setting a default security configuration, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)`.
    func orgs_sol_update(_ input: Operations.orgs_sol_update.Input) async throws -> Operations.orgs_sol_update.Output
    /// Delete an organization
    ///
    /// Deletes an organization and all its repositories.
    ///
    /// The organization login will be unavailable for 90 days after deletion.
    ///
    /// Please review the Terms of Service regarding account deletion before using this endpoint:
    ///
    /// https://docs.github.com/site-policy/github-terms/github-terms-of-service
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)`.
    func orgs_sol_delete(_ input: Operations.orgs_sol_delete.Input) async throws -> Operations.orgs_sol_delete.Output
    /// List users blocked by an organization
    ///
    /// List the users blocked by an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/get(orgs/list-blocked-users)`.
    func orgs_sol_list_hyphen_blocked_hyphen_users(_ input: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input) async throws -> Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output
    /// Check if a user is blocked by an organization
    ///
    /// Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/get(orgs/check-blocked-user)`.
    func orgs_sol_check_hyphen_blocked_hyphen_user(_ input: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input) async throws -> Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output
    /// Block a user from an organization
    ///
    /// Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/put(orgs/block-user)`.
    func orgs_sol_block_hyphen_user(_ input: Operations.orgs_sol_block_hyphen_user.Input) async throws -> Operations.orgs_sol_block_hyphen_user.Output
    /// Unblock a user from an organization
    ///
    /// Unblocks the given user on behalf of the specified organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/delete(orgs/unblock-user)`.
    func orgs_sol_unblock_hyphen_user(_ input: Operations.orgs_sol_unblock_hyphen_user.Input) async throws -> Operations.orgs_sol_unblock_hyphen_user.Output
    /// List failed organization invitations
    ///
    /// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/failed_invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/failed_invitations/get(orgs/list-failed-invitations)`.
    func orgs_sol_list_hyphen_failed_hyphen_invitations(_ input: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input) async throws -> Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output
    /// List organization webhooks
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/get(orgs/list-webhooks)`.
    func orgs_sol_list_hyphen_webhooks(_ input: Operations.orgs_sol_list_hyphen_webhooks.Input) async throws -> Operations.orgs_sol_list_hyphen_webhooks.Output
    /// Create an organization webhook
    ///
    /// Create a hook that posts payloads in JSON format.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
    /// edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)`.
    func orgs_sol_create_hyphen_webhook(_ input: Operations.orgs_sol_create_hyphen_webhook.Input) async throws -> Operations.orgs_sol_create_hyphen_webhook.Output
    /// Get an organization webhook
    ///
    /// Returns a webhook configured in an organization. To get only the webhook
    /// `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/get(orgs/get-webhook)`.
    func orgs_sol_get_hyphen_webhook(_ input: Operations.orgs_sol_get_hyphen_webhook.Input) async throws -> Operations.orgs_sol_get_hyphen_webhook.Output
    /// Update an organization webhook
    ///
    /// Updates a webhook configured in an organization. When you update a webhook,
    /// the `secret` will be overwritten. If you previously had a `secret` set, you must
    /// provide the same `secret` or set a new `secret` or the secret will be removed. If
    /// you are only updating individual webhook `config` properties, use "[Update a webhook
    /// configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)`.
    func orgs_sol_update_hyphen_webhook(_ input: Operations.orgs_sol_update_hyphen_webhook.Input) async throws -> Operations.orgs_sol_update_hyphen_webhook.Output
    /// Delete an organization webhook
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/delete(orgs/delete-webhook)`.
    func orgs_sol_delete_hyphen_webhook(_ input: Operations.orgs_sol_delete_hyphen_webhook.Input) async throws -> Operations.orgs_sol_delete_hyphen_webhook.Output
    /// Get a webhook configuration for an organization
    ///
    /// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/get(orgs/get-webhook-config-for-org)`.
    func orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(_ input: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input) async throws -> Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output
    /// Update a webhook configuration for an organization
    ///
    /// Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/patch(orgs/update-webhook-config-for-org)`.
    func orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(_ input: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input) async throws -> Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output
    /// List deliveries for an organization webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)`.
    func orgs_sol_list_hyphen_webhook_hyphen_deliveries(_ input: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input) async throws -> Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output
    /// Get a webhook delivery for an organization webhook
    ///
    /// Returns a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)`.
    func orgs_sol_get_hyphen_webhook_hyphen_delivery(_ input: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output
    /// Redeliver a delivery for an organization webhook
    ///
    /// Redeliver a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)`.
    func orgs_sol_redeliver_hyphen_webhook_hyphen_delivery(_ input: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Output
    /// Ping an organization webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
    /// to be sent to the hook.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/pings/post(orgs/ping-webhook)`.
    func orgs_sol_ping_hyphen_webhook(_ input: Operations.orgs_sol_ping_hyphen_webhook.Input) async throws -> Operations.orgs_sol_ping_hyphen_webhook.Output
    /// List app installations for an organization
    ///
    /// Lists all GitHub Apps in an organization. The installation count includes
    /// all GitHub Apps installed on repositories in the organization.
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installations/get(orgs/list-app-installations)`.
    func orgs_sol_list_hyphen_app_hyphen_installations(_ input: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input) async throws -> Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output
    /// List pending organization invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/get(orgs/list-pending-invitations)`.
    func orgs_sol_list_hyphen_pending_hyphen_invitations(_ input: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input) async throws -> Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output
    /// Create an organization invitation
    ///
    /// Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)`.
    func orgs_sol_create_hyphen_invitation(_ input: Operations.orgs_sol_create_hyphen_invitation.Input) async throws -> Operations.orgs_sol_create_hyphen_invitation.Output
    /// Cancel an organization invitation
    ///
    /// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)`.
    func orgs_sol_cancel_hyphen_invitation(_ input: Operations.orgs_sol_cancel_hyphen_invitation.Input) async throws -> Operations.orgs_sol_cancel_hyphen_invitation.Output
    /// List organization invitation teams
    ///
    /// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations/{invitation_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/teams/get(orgs/list-invitation-teams)`.
    func orgs_sol_list_hyphen_invitation_hyphen_teams(_ input: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input) async throws -> Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output
    /// List organization members
    ///
    /// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/get(orgs/list-members)`.
    func orgs_sol_list_hyphen_members(_ input: Operations.orgs_sol_list_hyphen_members.Input) async throws -> Operations.orgs_sol_list_hyphen_members.Output
    /// Check organization membership for a user
    ///
    /// Check if a user is, publicly or privately, a member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)`.
    func orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output
    /// Remove an organization member
    ///
    /// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/delete(orgs/remove-member)`.
    func orgs_sol_remove_hyphen_member(_ input: Operations.orgs_sol_remove_hyphen_member.Input) async throws -> Operations.orgs_sol_remove_hyphen_member.Output
    /// Get organization membership for a user
    ///
    /// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)`.
    func orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output
    /// Set organization membership for a user
    ///
    /// Only authenticated organization owners can add a member to the organization or update the member's role.
    ///
    /// *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    ///     
    /// *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
    ///
    /// **Rate limits**
    ///
    /// To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)`.
    func orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output
    /// Remove organization membership for a user
    ///
    /// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
    ///
    /// If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)`.
    func orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Output
    /// List organization fine-grained permissions for an organization
    ///
    /// Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-fine-grained-permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)`.
    func orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions(_ input: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input) async throws -> Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output
    /// Get all organization roles for an organization
    ///
    /// Lists the organization roles available in this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)`.
    func orgs_sol_list_hyphen_org_hyphen_roles(_ input: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output
    /// Create a custom organization role
    ///
    /// Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)`.
    func orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role(_ input: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input) async throws -> Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output
    /// Remove all organization roles for a team
    ///
    /// Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/delete(orgs/revoke-all-org-roles-team)`.
    func orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team(_ input: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Input) async throws -> Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Output
    /// Assign an organization role to a team
    ///
    /// Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)`.
    func orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role(_ input: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Input) async throws -> Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output
    /// Remove an organization role from a team
    ///
    /// Removes an organization role from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/delete(orgs/revoke-org-role-team)`.
    func orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team(_ input: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Input) async throws -> Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Output
    /// Remove all organization roles for a user
    ///
    /// Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/delete(orgs/revoke-all-org-roles-user)`.
    func orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user(_ input: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Input) async throws -> Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Output
    /// Assign an organization role to a user
    ///
    /// Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)`.
    func orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role(_ input: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Input) async throws -> Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output
    /// Remove an organization role from a user
    ///
    /// Remove an organization role from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/delete(orgs/revoke-org-role-user)`.
    func orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user(_ input: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Input) async throws -> Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Output
    /// Get an organization role
    ///
    /// Gets an organization role that is available to this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)`.
    func orgs_sol_get_hyphen_org_hyphen_role(_ input: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input) async throws -> Operations.orgs_sol_get_hyphen_org_hyphen_role.Output
    /// Update a custom organization role
    ///
    /// Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)`.
    func orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role(_ input: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input) async throws -> Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output
    /// Delete a custom organization role.
    ///
    /// Deletes a custom organization role. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/delete(orgs/delete-custom-organization-role)`.
    func orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role(_ input: Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Input) async throws -> Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Output
    /// List teams that are assigned to an organization role
    ///
    /// Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)`.
    func orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams(_ input: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output
    /// List users that are assigned to an organization role
    ///
    /// Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)`.
    func orgs_sol_list_hyphen_org_hyphen_role_hyphen_users(_ input: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output
    /// List outside collaborators for an organization
    ///
    /// List all users who are outside collaborators of an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/outside_collaborators`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/get(orgs/list-outside-collaborators)`.
    func orgs_sol_list_hyphen_outside_hyphen_collaborators(_ input: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input) async throws -> Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output
    /// Convert an organization member to outside collaborator
    ///
    /// When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)`.
    func orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator(_ input: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input) async throws -> Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output
    /// Remove outside collaborator from an organization
    ///
    /// Removing a user from this list will remove them from all the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/delete(orgs/remove-outside-collaborator)`.
    func orgs_sol_remove_hyphen_outside_hyphen_collaborator(_ input: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input) async throws -> Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output
    /// List requests to access organization resources with fine-grained personal access tokens
    ///
    /// Lists requests from organization members to access organization resources with a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)`.
    func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests(_ input: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output
    /// Review requests to access organization resources with fine-grained personal access tokens
    ///
    /// Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)`.
    func orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk(_ input: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input) async throws -> Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Output
    /// Review a request to access organization resources with a fine-grained personal access token
    ///
    /// Approves or denies a pending request to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests/{pat_request_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)`.
    func orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request(_ input: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input) async throws -> Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Output
    /// List repositories requested to be accessed by a fine-grained personal access token
    ///
    /// Lists the repositories a fine-grained personal access token request is requesting access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)`.
    func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories(_ input: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output
    /// List fine-grained personal access tokens with access to organization resources
    ///
    /// Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)`.
    func orgs_sol_list_hyphen_pat_hyphen_grants(_ input: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output
    /// Update the access to organization resources via fine-grained personal access tokens
    ///
    /// Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)`.
    func orgs_sol_update_hyphen_pat_hyphen_accesses(_ input: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input) async throws -> Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Output
    /// Update the access a fine-grained personal access token has to organization resources
    ///
    /// Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens/{pat_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)`.
    func orgs_sol_update_hyphen_pat_hyphen_access(_ input: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input) async throws -> Operations.orgs_sol_update_hyphen_pat_hyphen_access.Output
    /// List repositories a fine-grained personal access token has access to
    ///
    /// Lists the repositories a fine-grained personal access token has access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)`.
    func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories(_ input: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output
    /// Get all custom properties for an organization
    ///
    /// Gets all custom properties defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)`.
    func orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties(_ input: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input) async throws -> Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output
    /// Create or update custom properties for an organization
    ///
    /// Creates new or updates existing custom properties defined for an organization in a batch.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)`.
    func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties(_ input: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output
    /// Get a custom property for an organization
    ///
    /// Gets a custom property that is defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)`.
    func orgs_sol_get_hyphen_custom_hyphen_property(_ input: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input) async throws -> Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output
    /// Create or update a custom property for an organization
    ///
    /// Creates a new or updates an existing custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)`.
    func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property(_ input: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output
    /// Remove a custom property for an organization
    ///
    /// Removes a custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)`.
    func orgs_sol_remove_hyphen_custom_hyphen_property(_ input: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input) async throws -> Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Output
    /// List custom property values for organization repositories
    ///
    /// Lists organization repositories with all of their custom property values.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)`.
    func orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(_ input: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input) async throws -> Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output
    /// Create or update custom property values for organization repositories
    ///
    /// Create new or update existing custom property values for repositories in a batch that belong to an organization.
    /// Each target repository will have its custom property values updated to match the values provided in the request.
    ///
    /// A maximum of 30 repositories can be updated in a single request.
    ///
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)`.
    func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(_ input: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output
    /// List public organization members
    ///
    /// Members of an organization can choose to have their membership publicized or not.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/get(orgs/list-public-members)`.
    func orgs_sol_list_hyphen_public_hyphen_members(_ input: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input) async throws -> Operations.orgs_sol_list_hyphen_public_hyphen_members.Output
    /// Check public organization membership for a user
    ///
    /// Check if the provided user is a public member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/get(orgs/check-public-membership-for-user)`.
    func orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output
    /// Set public organization membership for the authenticated user
    ///
    /// The user can publicize their own membership. (A user cannot publicize the membership for another user.)
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/put(orgs/set-public-membership-for-authenticated-user)`.
    func orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Remove public organization membership for the authenticated user
    ///
    /// Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/delete(orgs/remove-public-membership-for-authenticated-user)`.
    func orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List security manager teams
    ///
    /// Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-managers`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/get(orgs/list-security-manager-teams)`.
    func orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams(_ input: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input) async throws -> Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output
    /// Add a security manager team
    ///
    /// Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/put(orgs/add-security-manager-team)`.
    func orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team(_ input: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Input) async throws -> Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output
    /// Remove a security manager team
    ///
    /// Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/delete(orgs/remove-security-manager-team)`.
    func orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team(_ input: Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Input) async throws -> Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Output
    /// Enable or disable a security feature for an organization
    ///
    /// Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/{security_product}/{enablement}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/{security_product}/{enablement}/post(orgs/enable-or-disable-security-product-on-all-org-repos)`.
    func orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos(_ input: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input) async throws -> Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output
    /// List organization memberships for the authenticated user
    ///
    /// Lists all of the authenticated user's organization memberships.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)`.
    func orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Get an organization membership for the authenticated user
    ///
    /// If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)`.
    func orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Update an organization membership for the authenticated user
    ///
    /// Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
    ///
    /// - Remark: HTTP `PATCH /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)`.
    func orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List organizations for the authenticated user
    ///
    /// List organizations for the authenticated user.
    ///
    /// For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
    ///
    /// - Remark: HTTP `GET /user/orgs`.
    /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)`.
    func orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List organizations for a user
    ///
    /// List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
    ///
    /// This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
    ///
    /// - Remark: HTTP `GET /users/{username}/orgs`.
    /// - Remark: Generated from `#/paths//users/{username}/orgs/get(orgs/list-for-user)`.
    func orgs_sol_list_hyphen_for_hyphen_user(_ input: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input) async throws -> Operations.orgs_sol_list_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List organizations
    ///
    /// Lists all organizations, in the order that they were created.
    ///
    /// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
    ///
    /// - Remark: HTTP `GET /organizations`.
    /// - Remark: Generated from `#/paths//organizations/get(orgs/list)`.
    public func orgs_sol_list(
        query: Operations.orgs_sol_list.Input.Query = .init(),
        headers: Operations.orgs_sol_list.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list.Output {
        try await orgs_sol_list(Operations.orgs_sol_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get an organization
    ///
    /// Gets information about an organization.
    ///
    /// When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// To see the full details about an organization, the authenticated user must be an organization owner.
    ///
    /// The values returned by this endpoint are set by the "Update an organization" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the "Update an organization" endpoint have been overwritten by that configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on security configurations, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
    ///
    /// To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    public func orgs_sol_get(
        path: Operations.orgs_sol_get.Input.Path,
        headers: Operations.orgs_sol_get.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get.Output {
        try await orgs_sol_get(Operations.orgs_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an organization
    ///
    /// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
    ///
    /// Updates the organization's profile and member privileges.
    ///
    /// With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on setting a default security configuration, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)`.
    public func orgs_sol_update(
        path: Operations.orgs_sol_update.Input.Path,
        headers: Operations.orgs_sol_update.Input.Headers = .init(),
        body: Operations.orgs_sol_update.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_update.Output {
        try await orgs_sol_update(Operations.orgs_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization
    ///
    /// Deletes an organization and all its repositories.
    ///
    /// The organization login will be unavailable for 90 days after deletion.
    ///
    /// Please review the Terms of Service regarding account deletion before using this endpoint:
    ///
    /// https://docs.github.com/site-policy/github-terms/github-terms-of-service
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)`.
    public func orgs_sol_delete(
        path: Operations.orgs_sol_delete.Input.Path,
        headers: Operations.orgs_sol_delete.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_delete.Output {
        try await orgs_sol_delete(Operations.orgs_sol_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List users blocked by an organization
    ///
    /// List the users blocked by an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/get(orgs/list-blocked-users)`.
    public func orgs_sol_list_hyphen_blocked_hyphen_users(
        path: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Path,
        query: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output {
        try await orgs_sol_list_hyphen_blocked_hyphen_users(Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if a user is blocked by an organization
    ///
    /// Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/get(orgs/check-blocked-user)`.
    public func orgs_sol_check_hyphen_blocked_hyphen_user(
        path: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output {
        try await orgs_sol_check_hyphen_blocked_hyphen_user(Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Block a user from an organization
    ///
    /// Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/put(orgs/block-user)`.
    public func orgs_sol_block_hyphen_user(
        path: Operations.orgs_sol_block_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_block_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_block_hyphen_user.Output {
        try await orgs_sol_block_hyphen_user(Operations.orgs_sol_block_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unblock a user from an organization
    ///
    /// Unblocks the given user on behalf of the specified organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/delete(orgs/unblock-user)`.
    public func orgs_sol_unblock_hyphen_user(path: Operations.orgs_sol_unblock_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_unblock_hyphen_user.Output {
        try await orgs_sol_unblock_hyphen_user(Operations.orgs_sol_unblock_hyphen_user.Input(path: path))
    }
    /// List failed organization invitations
    ///
    /// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/failed_invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/failed_invitations/get(orgs/list-failed-invitations)`.
    public func orgs_sol_list_hyphen_failed_hyphen_invitations(
        path: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Path,
        query: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output {
        try await orgs_sol_list_hyphen_failed_hyphen_invitations(Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List organization webhooks
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/get(orgs/list-webhooks)`.
    public func orgs_sol_list_hyphen_webhooks(
        path: Operations.orgs_sol_list_hyphen_webhooks.Input.Path,
        query: Operations.orgs_sol_list_hyphen_webhooks.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_webhooks.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_webhooks.Output {
        try await orgs_sol_list_hyphen_webhooks(Operations.orgs_sol_list_hyphen_webhooks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an organization webhook
    ///
    /// Create a hook that posts payloads in JSON format.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
    /// edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)`.
    public func orgs_sol_create_hyphen_webhook(
        path: Operations.orgs_sol_create_hyphen_webhook.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_webhook.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_webhook.Input.Body
    ) async throws -> Operations.orgs_sol_create_hyphen_webhook.Output {
        try await orgs_sol_create_hyphen_webhook(Operations.orgs_sol_create_hyphen_webhook.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an organization webhook
    ///
    /// Returns a webhook configured in an organization. To get only the webhook
    /// `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/get(orgs/get-webhook)`.
    public func orgs_sol_get_hyphen_webhook(
        path: Operations.orgs_sol_get_hyphen_webhook.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_webhook.Output {
        try await orgs_sol_get_hyphen_webhook(Operations.orgs_sol_get_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an organization webhook
    ///
    /// Updates a webhook configured in an organization. When you update a webhook,
    /// the `secret` will be overwritten. If you previously had a `secret` set, you must
    /// provide the same `secret` or set a new `secret` or the secret will be removed. If
    /// you are only updating individual webhook `config` properties, use "[Update a webhook
    /// configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)`.
    public func orgs_sol_update_hyphen_webhook(
        path: Operations.orgs_sol_update_hyphen_webhook.Input.Path,
        headers: Operations.orgs_sol_update_hyphen_webhook.Input.Headers = .init(),
        body: Operations.orgs_sol_update_hyphen_webhook.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_update_hyphen_webhook.Output {
        try await orgs_sol_update_hyphen_webhook(Operations.orgs_sol_update_hyphen_webhook.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization webhook
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/delete(orgs/delete-webhook)`.
    public func orgs_sol_delete_hyphen_webhook(
        path: Operations.orgs_sol_delete_hyphen_webhook.Input.Path,
        headers: Operations.orgs_sol_delete_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_delete_hyphen_webhook.Output {
        try await orgs_sol_delete_hyphen_webhook(Operations.orgs_sol_delete_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a webhook configuration for an organization
    ///
    /// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/get(orgs/get-webhook-config-for-org)`.
    public func orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(
        path: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output {
        try await orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a webhook configuration for an organization
    ///
    /// Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/patch(orgs/update-webhook-config-for-org)`.
    public func orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(
        path: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path,
        headers: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers = .init(),
        body: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output {
        try await orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org(Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List deliveries for an organization webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)`.
    public func orgs_sol_list_hyphen_webhook_hyphen_deliveries(
        path: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path,
        query: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output {
        try await orgs_sol_list_hyphen_webhook_hyphen_deliveries(Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a webhook delivery for an organization webhook
    ///
    /// Returns a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)`.
    public func orgs_sol_get_hyphen_webhook_hyphen_delivery(
        path: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output {
        try await orgs_sol_get_hyphen_webhook_hyphen_delivery(Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// Redeliver a delivery for an organization webhook
    ///
    /// Redeliver a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)`.
    public func orgs_sol_redeliver_hyphen_webhook_hyphen_delivery(
        path: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Output {
        try await orgs_sol_redeliver_hyphen_webhook_hyphen_delivery(Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// Ping an organization webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
    /// to be sent to the hook.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/pings/post(orgs/ping-webhook)`.
    public func orgs_sol_ping_hyphen_webhook(
        path: Operations.orgs_sol_ping_hyphen_webhook.Input.Path,
        headers: Operations.orgs_sol_ping_hyphen_webhook.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_ping_hyphen_webhook.Output {
        try await orgs_sol_ping_hyphen_webhook(Operations.orgs_sol_ping_hyphen_webhook.Input(
            path: path,
            headers: headers
        ))
    }
    /// List app installations for an organization
    ///
    /// Lists all GitHub Apps in an organization. The installation count includes
    /// all GitHub Apps installed on repositories in the organization.
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installations/get(orgs/list-app-installations)`.
    public func orgs_sol_list_hyphen_app_hyphen_installations(
        path: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Path,
        query: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output {
        try await orgs_sol_list_hyphen_app_hyphen_installations(Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pending organization invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/get(orgs/list-pending-invitations)`.
    public func orgs_sol_list_hyphen_pending_hyphen_invitations(
        path: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Path,
        query: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output {
        try await orgs_sol_list_hyphen_pending_hyphen_invitations(Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an organization invitation
    ///
    /// Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)`.
    public func orgs_sol_create_hyphen_invitation(
        path: Operations.orgs_sol_create_hyphen_invitation.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_invitation.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_invitation.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_create_hyphen_invitation.Output {
        try await orgs_sol_create_hyphen_invitation(Operations.orgs_sol_create_hyphen_invitation.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Cancel an organization invitation
    ///
    /// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)`.
    public func orgs_sol_cancel_hyphen_invitation(
        path: Operations.orgs_sol_cancel_hyphen_invitation.Input.Path,
        headers: Operations.orgs_sol_cancel_hyphen_invitation.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_cancel_hyphen_invitation.Output {
        try await orgs_sol_cancel_hyphen_invitation(Operations.orgs_sol_cancel_hyphen_invitation.Input(
            path: path,
            headers: headers
        ))
    }
    /// List organization invitation teams
    ///
    /// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations/{invitation_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/teams/get(orgs/list-invitation-teams)`.
    public func orgs_sol_list_hyphen_invitation_hyphen_teams(
        path: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Path,
        query: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output {
        try await orgs_sol_list_hyphen_invitation_hyphen_teams(Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List organization members
    ///
    /// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/get(orgs/list-members)`.
    public func orgs_sol_list_hyphen_members(
        path: Operations.orgs_sol_list_hyphen_members.Input.Path,
        query: Operations.orgs_sol_list_hyphen_members.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_members.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_members.Output {
        try await orgs_sol_list_hyphen_members(Operations.orgs_sol_list_hyphen_members.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check organization membership for a user
    ///
    /// Check if a user is, publicly or privately, a member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)`.
    public func orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user(path: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output {
        try await orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user(Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Input(path: path))
    }
    /// Remove an organization member
    ///
    /// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/delete(orgs/remove-member)`.
    public func orgs_sol_remove_hyphen_member(
        path: Operations.orgs_sol_remove_hyphen_member.Input.Path,
        headers: Operations.orgs_sol_remove_hyphen_member.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_remove_hyphen_member.Output {
        try await orgs_sol_remove_hyphen_member(Operations.orgs_sol_remove_hyphen_member.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get organization membership for a user
    ///
    /// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)`.
    public func orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user(
        path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output {
        try await orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user(Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Set organization membership for a user
    ///
    /// Only authenticated organization owners can add a member to the organization or update the member's role.
    ///
    /// *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    ///     
    /// *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
    ///
    /// **Rate limits**
    ///
    /// To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)`.
    public func orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user(
        path: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init(),
        body: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output {
        try await orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user(Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove organization membership for a user
    ///
    /// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
    ///
    /// If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)`.
    public func orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user(
        path: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Output {
        try await orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user(Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List organization fine-grained permissions for an organization
    ///
    /// Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-fine-grained-permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)`.
    public func orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions(
        path: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Path,
        headers: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output {
        try await orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions(Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get all organization roles for an organization
    ///
    /// Lists the organization roles available in this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)`.
    public func orgs_sol_list_hyphen_org_hyphen_roles(
        path: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Path,
        headers: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output {
        try await orgs_sol_list_hyphen_org_hyphen_roles(Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a custom organization role
    ///
    /// Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)`.
    public func orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role(
        path: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
    ) async throws -> Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output {
        try await orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role(Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove all organization roles for a team
    ///
    /// Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/delete(orgs/revoke-all-org-roles-team)`.
    public func orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team(path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Input.Path) async throws -> Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Output {
        try await orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team(Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Input(path: path))
    }
    /// Assign an organization role to a team
    ///
    /// Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)`.
    public func orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role(path: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Input.Path) async throws -> Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output {
        try await orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role(Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Input(path: path))
    }
    /// Remove an organization role from a team
    ///
    /// Removes an organization role from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/delete(orgs/revoke-org-role-team)`.
    public func orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team(path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Input.Path) async throws -> Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Output {
        try await orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team(Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Input(path: path))
    }
    /// Remove all organization roles for a user
    ///
    /// Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/delete(orgs/revoke-all-org-roles-user)`.
    public func orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user(path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Output {
        try await orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user(Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Input(path: path))
    }
    /// Assign an organization role to a user
    ///
    /// Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)`.
    public func orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role(path: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Input.Path) async throws -> Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output {
        try await orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role(Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Input(path: path))
    }
    /// Remove an organization role from a user
    ///
    /// Remove an organization role from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/delete(orgs/revoke-org-role-user)`.
    public func orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user(path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Output {
        try await orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user(Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Input(path: path))
    }
    /// Get an organization role
    ///
    /// Gets an organization role that is available to this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)`.
    public func orgs_sol_get_hyphen_org_hyphen_role(
        path: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_org_hyphen_role.Output {
        try await orgs_sol_get_hyphen_org_hyphen_role(Operations.orgs_sol_get_hyphen_org_hyphen_role.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a custom organization role
    ///
    /// Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)`.
    public func orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role(
        path: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Path,
        headers: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers = .init(),
        body: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
    ) async throws -> Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output {
        try await orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role(Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a custom organization role.
    ///
    /// Deletes a custom organization role. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/delete(orgs/delete-custom-organization-role)`.
    public func orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role(path: Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Input.Path) async throws -> Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Output {
        try await orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role(Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Input(path: path))
    }
    /// List teams that are assigned to an organization role
    ///
    /// Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)`.
    public func orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams(
        path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Path,
        query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output {
        try await orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List users that are assigned to an organization role
    ///
    /// Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)`.
    public func orgs_sol_list_hyphen_org_hyphen_role_hyphen_users(
        path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Path,
        query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output {
        try await orgs_sol_list_hyphen_org_hyphen_role_hyphen_users(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List outside collaborators for an organization
    ///
    /// List all users who are outside collaborators of an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/outside_collaborators`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/get(orgs/list-outside-collaborators)`.
    public func orgs_sol_list_hyphen_outside_hyphen_collaborators(
        path: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Path,
        query: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output {
        try await orgs_sol_list_hyphen_outside_hyphen_collaborators(Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Convert an organization member to outside collaborator
    ///
    /// When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)`.
    public func orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator(
        path: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Path,
        headers: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Headers = .init(),
        body: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output {
        try await orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove outside collaborator from an organization
    ///
    /// Removing a user from this list will remove them from all the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/delete(orgs/remove-outside-collaborator)`.
    public func orgs_sol_remove_hyphen_outside_hyphen_collaborator(
        path: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Path,
        headers: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output {
        try await orgs_sol_remove_hyphen_outside_hyphen_collaborator(Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input(
            path: path,
            headers: headers
        ))
    }
    /// List requests to access organization resources with fine-grained personal access tokens
    ///
    /// Lists requests from organization members to access organization resources with a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)`.
    public func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests(
        path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Path,
        query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output {
        try await orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Review requests to access organization resources with fine-grained personal access tokens
    ///
    /// Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)`.
    public func orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk(
        path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Path,
        headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Headers = .init(),
        body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body
    ) async throws -> Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Output {
        try await orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk(Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Review a request to access organization resources with a fine-grained personal access token
    ///
    /// Approves or denies a pending request to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests/{pat_request_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)`.
    public func orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request(
        path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Path,
        headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Headers = .init(),
        body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body
    ) async throws -> Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Output {
        try await orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request(Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repositories requested to be accessed by a fine-grained personal access token
    ///
    /// Lists the repositories a fine-grained personal access token request is requesting access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)`.
    public func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories(
        path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Path,
        query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output {
        try await orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List fine-grained personal access tokens with access to organization resources
    ///
    /// Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)`.
    public func orgs_sol_list_hyphen_pat_hyphen_grants(
        path: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Path,
        query: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output {
        try await orgs_sol_list_hyphen_pat_hyphen_grants(Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Update the access to organization resources via fine-grained personal access tokens
    ///
    /// Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)`.
    public func orgs_sol_update_hyphen_pat_hyphen_accesses(
        path: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Path,
        headers: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Headers = .init(),
        body: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body
    ) async throws -> Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Output {
        try await orgs_sol_update_hyphen_pat_hyphen_accesses(Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update the access a fine-grained personal access token has to organization resources
    ///
    /// Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens/{pat_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)`.
    public func orgs_sol_update_hyphen_pat_hyphen_access(
        path: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Path,
        headers: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Headers = .init(),
        body: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body
    ) async throws -> Operations.orgs_sol_update_hyphen_pat_hyphen_access.Output {
        try await orgs_sol_update_hyphen_pat_hyphen_access(Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repositories a fine-grained personal access token has access to
    ///
    /// Lists the repositories a fine-grained personal access token has access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)`.
    public func orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories(
        path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Path,
        query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output {
        try await orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all custom properties for an organization
    ///
    /// Gets all custom properties defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)`.
    public func orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties(
        path: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output {
        try await orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties(Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update custom properties for an organization
    ///
    /// Creates new or updates existing custom properties defined for an organization in a batch.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)`.
    public func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties(
        path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Body
    ) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output {
        try await orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a custom property for an organization
    ///
    /// Gets a custom property that is defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)`.
    public func orgs_sol_get_hyphen_custom_hyphen_property(
        path: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output {
        try await orgs_sol_get_hyphen_custom_hyphen_property(Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update a custom property for an organization
    ///
    /// Creates a new or updates an existing custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)`.
    public func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property(
        path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body
    ) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output {
        try await orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a custom property for an organization
    ///
    /// Removes a custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)`.
    public func orgs_sol_remove_hyphen_custom_hyphen_property(
        path: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Path,
        headers: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Output {
        try await orgs_sol_remove_hyphen_custom_hyphen_property(Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input(
            path: path,
            headers: headers
        ))
    }
    /// List custom property values for organization repositories
    ///
    /// Lists organization repositories with all of their custom property values.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)`.
    public func orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(
        path: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path,
        query: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output {
        try await orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create or update custom property values for organization repositories
    ///
    /// Create new or update existing custom property values for repositories in a batch that belong to an organization.
    /// Each target repository will have its custom property values updated to match the values provided in the request.
    ///
    /// A maximum of 30 repositories can be updated in a single request.
    ///
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)`.
    public func orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(
        path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path,
        headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers = .init(),
        body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Body
    ) async throws -> Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output {
        try await orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List public organization members
    ///
    /// Members of an organization can choose to have their membership publicized or not.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/get(orgs/list-public-members)`.
    public func orgs_sol_list_hyphen_public_hyphen_members(
        path: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Path,
        query: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_public_hyphen_members.Output {
        try await orgs_sol_list_hyphen_public_hyphen_members(Operations.orgs_sol_list_hyphen_public_hyphen_members.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check public organization membership for a user
    ///
    /// Check if the provided user is a public member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/get(orgs/check-public-membership-for-user)`.
    public func orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user(path: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output {
        try await orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user(Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Input(path: path))
    }
    /// Set public organization membership for the authenticated user
    ///
    /// The user can publicize their own membership. (A user cannot publicize the membership for another user.)
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/put(orgs/set-public-membership-for-authenticated-user)`.
    public func orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove public organization membership for the authenticated user
    ///
    /// Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/delete(orgs/remove-public-membership-for-authenticated-user)`.
    public func orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(path: Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path) async throws -> Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input(path: path))
    }
    /// List security manager teams
    ///
    /// Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-managers`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/get(orgs/list-security-manager-teams)`.
    public func orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams(
        path: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Path,
        headers: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output {
        try await orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams(Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add a security manager team
    ///
    /// Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/put(orgs/add-security-manager-team)`.
    public func orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team(path: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Input.Path) async throws -> Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output {
        try await orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team(Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Input(path: path))
    }
    /// Remove a security manager team
    ///
    /// Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/delete(orgs/remove-security-manager-team)`.
    public func orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team(path: Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Input.Path) async throws -> Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Output {
        try await orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team(Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Input(path: path))
    }
    /// Enable or disable a security feature for an organization
    ///
    /// Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/{security_product}/{enablement}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/{security_product}/{enablement}/post(orgs/enable-or-disable-security-product-on-all-org-repos)`.
    public func orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos(
        path: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Path,
        body: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body? = nil
    ) async throws -> Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output {
        try await orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos(Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input(
            path: path,
            body: body
        ))
    }
    /// List organization memberships for the authenticated user
    ///
    /// Lists all of the authenticated user's organization memberships.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)`.
    public func orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get an organization membership for the authenticated user
    ///
    /// If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)`.
    public func orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an organization membership for the authenticated user
    ///
    /// Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
    ///
    /// - Remark: HTTP `PATCH /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)`.
    public func orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
        body: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
    ) async throws -> Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List organizations for the authenticated user
    ///
    /// List organizations for the authenticated user.
    ///
    /// For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
    ///
    /// - Remark: HTTP `GET /user/orgs`.
    /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)`.
    public func orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List organizations for a user
    ///
    /// List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
    ///
    /// This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
    ///
    /// - Remark: HTTP `GET /users/{username}/orgs`.
    /// - Remark: Generated from `#/paths//users/{username}/orgs/get(orgs/list-for-user)`.
    public func orgs_sol_list_hyphen_for_hyphen_user(
        path: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Path,
        query: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.orgs_sol_list_hyphen_for_hyphen_user.Output {
        try await orgs_sol_list_hyphen_for_hyphen_user(Operations.orgs_sol_list_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// The URL to which the payloads will be delivered.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-url`.
        public typealias webhook_hyphen_config_hyphen_url = Swift.String
        /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-content-type`.
        public typealias webhook_hyphen_config_hyphen_content_hyphen_type = Swift.String
        /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-secret`.
        public typealias webhook_hyphen_config_hyphen_secret = Swift.String
        /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl`.
        @frozen public enum webhook_hyphen_config_hyphen_insecure_hyphen_ssl: Codable, Hashable, Sendable {
            /// Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case2`.
            case case2(Swift.Double)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Configuration object of the webhook
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config`.
        public struct webhook_hyphen_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-config/url`.
            public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
            /// - Remark: Generated from `#/components/schemas/webhook-config/content_type`.
            public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
            /// - Remark: Generated from `#/components/schemas/webhook-config/secret`.
            public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
            /// - Remark: Generated from `#/components/schemas/webhook-config/insecure_ssl`.
            public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
            /// Creates a new `webhook_hyphen_config`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - content_type:
            ///   - secret:
            ///   - insecure_ssl:
            public init(
                url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
            ) {
                self.url = url
                self.content_type = content_type
                self.secret = secret
                self.insecure_ssl = insecure_ssl
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case content_type
                case secret
                case insecure_ssl
            }
        }
        /// Delivery made by a webhook, without request and response information.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery-item`.
        public struct hook_hyphen_delivery_hyphen_item: Codable, Hashable, Sendable {
            /// Unique identifier of the webhook delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/guid`.
            public var guid: Swift.String
            /// Time when the webhook delivery occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the webhook delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/duration`.
            public var duration: Swift.Double
            /// Describes the response returned after attempting the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/repository_id`.
            public var repository_id: Swift.Int?
            /// Creates a new `hook_hyphen_delivery_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the webhook delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the webhook delivery occurred.
            ///   - redelivery: Whether the webhook delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Describes the response returned after attempting the delivery.
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        public struct hook_hyphen_delivery: Codable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            public var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            public var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            public var repository_id: Swift.Int?
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public struct requestPayload: Codable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload?
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public struct payloadPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `payloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public var payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload?
                /// Creates a new `requestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload? = nil,
                    payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public var request: Components.Schemas.hook_hyphen_delivery.requestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public struct responsePayload: Codable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload?
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                public var payload: Swift.String?
                /// Creates a new `responsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public var response: Components.Schemas.hook_hyphen_delivery.responsePayload
            /// Creates a new `hook_hyphen_delivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                url: Swift.String? = nil,
                request: Components.Schemas.hook_hyphen_delivery.requestPayload,
                response: Components.Schemas.hook_hyphen_delivery.responsePayload
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.url = url
                self.request = request
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case url
                case request
                case response
            }
        }
        /// An enterprise on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var html_url: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var website_url: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var node_id: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatar_url: Swift.String
            /// Creates a new `enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - html_url:
            ///   - website_url: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - node_id:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - created_at:
            ///   - updated_at:
            ///   - avatar_url:
            public init(
                description: Swift.String? = nil,
                html_url: Swift.String,
                website_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                avatar_url: Swift.String
            ) {
                self.description = description
                self.html_url = html_url
                self.website_url = website_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.created_at = created_at
                self.updated_at = updated_at
                self.avatar_url = avatar_url
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case html_url
                case website_url
                case id
                case node_id
                case name
                case slug
                case created_at
                case updated_at
                case avatar_url
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        public struct app_hyphen_permissions: Codable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen public enum actionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            public var actions: Components.Schemas.app_hyphen_permissions.actionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen public enum administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            public var administration: Components.Schemas.app_hyphen_permissions.administrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen public enum checksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            public var checks: Components.Schemas.app_hyphen_permissions.checksPayload?
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            @frozen public enum codespacesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            public var codespaces: Components.Schemas.app_hyphen_permissions.codespacesPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen public enum contentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            public var contents: Components.Schemas.app_hyphen_permissions.contentsPayload?
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            @frozen public enum dependabot_secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            public var dependabot_secrets: Components.Schemas.app_hyphen_permissions.dependabot_secretsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen public enum deploymentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            public var deployments: Components.Schemas.app_hyphen_permissions.deploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen public enum environmentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            public var environments: Components.Schemas.app_hyphen_permissions.environmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen public enum issuesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            public var issues: Components.Schemas.app_hyphen_permissions.issuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen public enum metadataPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            public var metadata: Components.Schemas.app_hyphen_permissions.metadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen public enum packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            public var packages: Components.Schemas.app_hyphen_permissions.packagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen public enum pagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            public var pages: Components.Schemas.app_hyphen_permissions.pagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen public enum pull_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            public var pull_requests: Components.Schemas.app_hyphen_permissions.pull_requestsPayload?
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            @frozen public enum repository_custom_propertiesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            public var repository_custom_properties: Components.Schemas.app_hyphen_permissions.repository_custom_propertiesPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen public enum repository_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            public var repository_hooks: Components.Schemas.app_hyphen_permissions.repository_hooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen public enum repository_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            public var repository_projects: Components.Schemas.app_hyphen_permissions.repository_projectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen public enum secret_scanning_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            public var secret_scanning_alerts: Components.Schemas.app_hyphen_permissions.secret_scanning_alertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen public enum secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            public var secrets: Components.Schemas.app_hyphen_permissions.secretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen public enum security_eventsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            public var security_events: Components.Schemas.app_hyphen_permissions.security_eventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen public enum single_filePayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            public var single_file: Components.Schemas.app_hyphen_permissions.single_filePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen public enum statusesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            public var statuses: Components.Schemas.app_hyphen_permissions.statusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen public enum vulnerability_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            public var vulnerability_alerts: Components.Schemas.app_hyphen_permissions.vulnerability_alertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen public enum workflowsPayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            public var workflows: Components.Schemas.app_hyphen_permissions.workflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen public enum membersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            public var members: Components.Schemas.app_hyphen_permissions.membersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen public enum organization_administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            public var organization_administration: Components.Schemas.app_hyphen_permissions.organization_administrationPayload?
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen public enum organization_custom_rolesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            public var organization_custom_roles: Components.Schemas.app_hyphen_permissions.organization_custom_rolesPayload?
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            @frozen public enum organization_custom_org_rolesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            public var organization_custom_org_roles: Components.Schemas.app_hyphen_permissions.organization_custom_org_rolesPayload?
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            @frozen public enum organization_custom_propertiesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            public var organization_custom_properties: Components.Schemas.app_hyphen_permissions.organization_custom_propertiesPayload?
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            @frozen public enum organization_copilot_seat_managementPayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            public var organization_copilot_seat_management: Components.Schemas.app_hyphen_permissions.organization_copilot_seat_managementPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen public enum organization_announcement_bannersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            public var organization_announcement_banners: Components.Schemas.app_hyphen_permissions.organization_announcement_bannersPayload?
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            @frozen public enum organization_eventsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
            }
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            public var organization_events: Components.Schemas.app_hyphen_permissions.organization_eventsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen public enum organization_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            public var organization_hooks: Components.Schemas.app_hyphen_permissions.organization_hooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen public enum organization_personal_access_tokensPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            public var organization_personal_access_tokens: Components.Schemas.app_hyphen_permissions.organization_personal_access_tokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen public enum organization_personal_access_token_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            public var organization_personal_access_token_requests: Components.Schemas.app_hyphen_permissions.organization_personal_access_token_requestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen public enum organization_planPayload: String, Codable, Hashable, Sendable {
                case read = "read"
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            public var organization_plan: Components.Schemas.app_hyphen_permissions.organization_planPayload?
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen public enum organization_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            public var organization_projects: Components.Schemas.app_hyphen_permissions.organization_projectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen public enum organization_packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            public var organization_packages: Components.Schemas.app_hyphen_permissions.organization_packagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen public enum organization_secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            public var organization_secrets: Components.Schemas.app_hyphen_permissions.organization_secretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen public enum organization_self_hosted_runnersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            public var organization_self_hosted_runners: Components.Schemas.app_hyphen_permissions.organization_self_hosted_runnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen public enum organization_user_blockingPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            public var organization_user_blocking: Components.Schemas.app_hyphen_permissions.organization_user_blockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen public enum team_discussionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            public var team_discussions: Components.Schemas.app_hyphen_permissions.team_discussionsPayload?
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            @frozen public enum email_addressesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            public var email_addresses: Components.Schemas.app_hyphen_permissions.email_addressesPayload?
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            @frozen public enum followersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            public var followers: Components.Schemas.app_hyphen_permissions.followersPayload?
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            @frozen public enum git_ssh_keysPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            public var git_ssh_keys: Components.Schemas.app_hyphen_permissions.git_ssh_keysPayload?
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            @frozen public enum gpg_keysPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            public var gpg_keys: Components.Schemas.app_hyphen_permissions.gpg_keysPayload?
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            @frozen public enum interaction_limitsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            public var interaction_limits: Components.Schemas.app_hyphen_permissions.interaction_limitsPayload?
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            @frozen public enum profilePayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            public var profile: Components.Schemas.app_hyphen_permissions.profilePayload?
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            @frozen public enum starringPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            public var starring: Components.Schemas.app_hyphen_permissions.starringPayload?
            /// Creates a new `app_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - codespaces: The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - dependabot_secrets: The leve of permission to grant the access token to manage Dependabot secrets.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pull_requests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repository_custom_properties: The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///   - repository_hooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repository_projects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secret_scanning_alerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - security_events: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - single_file: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerability_alerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organization_administration: The level of permission to grant the access token to manage access to an organization.
            ///   - organization_custom_roles: The level of permission to grant the access token for custom repository roles management.
            ///   - organization_custom_org_roles: The level of permission to grant the access token for custom organization roles management.
            ///   - organization_custom_properties: The level of permission to grant the access token for custom property management.
            ///   - organization_copilot_seat_management: The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.
            ///   - organization_announcement_banners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organization_events: The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///   - organization_hooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organization_personal_access_tokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organization_personal_access_token_requests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organization_plan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organization_projects: The level of permission to grant the access token to manage organization projects and projects beta (where available).
            ///   - organization_packages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organization_secrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organization_self_hosted_runners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organization_user_blocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - team_discussions: The level of permission to grant the access token to manage team discussions and related comments.
            ///   - email_addresses: The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///   - followers: The level of permission to grant the access token to manage the followers belonging to a user.
            ///   - git_ssh_keys: The level of permission to grant the access token to manage git SSH keys.
            ///   - gpg_keys: The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///   - interaction_limits: The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///   - profile: The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///   - starring: The level of permission to grant the access token to list and manage repositories a user is starring.
            public init(
                actions: Components.Schemas.app_hyphen_permissions.actionsPayload? = nil,
                administration: Components.Schemas.app_hyphen_permissions.administrationPayload? = nil,
                checks: Components.Schemas.app_hyphen_permissions.checksPayload? = nil,
                codespaces: Components.Schemas.app_hyphen_permissions.codespacesPayload? = nil,
                contents: Components.Schemas.app_hyphen_permissions.contentsPayload? = nil,
                dependabot_secrets: Components.Schemas.app_hyphen_permissions.dependabot_secretsPayload? = nil,
                deployments: Components.Schemas.app_hyphen_permissions.deploymentsPayload? = nil,
                environments: Components.Schemas.app_hyphen_permissions.environmentsPayload? = nil,
                issues: Components.Schemas.app_hyphen_permissions.issuesPayload? = nil,
                metadata: Components.Schemas.app_hyphen_permissions.metadataPayload? = nil,
                packages: Components.Schemas.app_hyphen_permissions.packagesPayload? = nil,
                pages: Components.Schemas.app_hyphen_permissions.pagesPayload? = nil,
                pull_requests: Components.Schemas.app_hyphen_permissions.pull_requestsPayload? = nil,
                repository_custom_properties: Components.Schemas.app_hyphen_permissions.repository_custom_propertiesPayload? = nil,
                repository_hooks: Components.Schemas.app_hyphen_permissions.repository_hooksPayload? = nil,
                repository_projects: Components.Schemas.app_hyphen_permissions.repository_projectsPayload? = nil,
                secret_scanning_alerts: Components.Schemas.app_hyphen_permissions.secret_scanning_alertsPayload? = nil,
                secrets: Components.Schemas.app_hyphen_permissions.secretsPayload? = nil,
                security_events: Components.Schemas.app_hyphen_permissions.security_eventsPayload? = nil,
                single_file: Components.Schemas.app_hyphen_permissions.single_filePayload? = nil,
                statuses: Components.Schemas.app_hyphen_permissions.statusesPayload? = nil,
                vulnerability_alerts: Components.Schemas.app_hyphen_permissions.vulnerability_alertsPayload? = nil,
                workflows: Components.Schemas.app_hyphen_permissions.workflowsPayload? = nil,
                members: Components.Schemas.app_hyphen_permissions.membersPayload? = nil,
                organization_administration: Components.Schemas.app_hyphen_permissions.organization_administrationPayload? = nil,
                organization_custom_roles: Components.Schemas.app_hyphen_permissions.organization_custom_rolesPayload? = nil,
                organization_custom_org_roles: Components.Schemas.app_hyphen_permissions.organization_custom_org_rolesPayload? = nil,
                organization_custom_properties: Components.Schemas.app_hyphen_permissions.organization_custom_propertiesPayload? = nil,
                organization_copilot_seat_management: Components.Schemas.app_hyphen_permissions.organization_copilot_seat_managementPayload? = nil,
                organization_announcement_banners: Components.Schemas.app_hyphen_permissions.organization_announcement_bannersPayload? = nil,
                organization_events: Components.Schemas.app_hyphen_permissions.organization_eventsPayload? = nil,
                organization_hooks: Components.Schemas.app_hyphen_permissions.organization_hooksPayload? = nil,
                organization_personal_access_tokens: Components.Schemas.app_hyphen_permissions.organization_personal_access_tokensPayload? = nil,
                organization_personal_access_token_requests: Components.Schemas.app_hyphen_permissions.organization_personal_access_token_requestsPayload? = nil,
                organization_plan: Components.Schemas.app_hyphen_permissions.organization_planPayload? = nil,
                organization_projects: Components.Schemas.app_hyphen_permissions.organization_projectsPayload? = nil,
                organization_packages: Components.Schemas.app_hyphen_permissions.organization_packagesPayload? = nil,
                organization_secrets: Components.Schemas.app_hyphen_permissions.organization_secretsPayload? = nil,
                organization_self_hosted_runners: Components.Schemas.app_hyphen_permissions.organization_self_hosted_runnersPayload? = nil,
                organization_user_blocking: Components.Schemas.app_hyphen_permissions.organization_user_blockingPayload? = nil,
                team_discussions: Components.Schemas.app_hyphen_permissions.team_discussionsPayload? = nil,
                email_addresses: Components.Schemas.app_hyphen_permissions.email_addressesPayload? = nil,
                followers: Components.Schemas.app_hyphen_permissions.followersPayload? = nil,
                git_ssh_keys: Components.Schemas.app_hyphen_permissions.git_ssh_keysPayload? = nil,
                gpg_keys: Components.Schemas.app_hyphen_permissions.gpg_keysPayload? = nil,
                interaction_limits: Components.Schemas.app_hyphen_permissions.interaction_limitsPayload? = nil,
                profile: Components.Schemas.app_hyphen_permissions.profilePayload? = nil,
                starring: Components.Schemas.app_hyphen_permissions.starringPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.codespaces = codespaces
                self.contents = contents
                self.dependabot_secrets = dependabot_secrets
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pull_requests = pull_requests
                self.repository_custom_properties = repository_custom_properties
                self.repository_hooks = repository_hooks
                self.repository_projects = repository_projects
                self.secret_scanning_alerts = secret_scanning_alerts
                self.secrets = secrets
                self.security_events = security_events
                self.single_file = single_file
                self.statuses = statuses
                self.vulnerability_alerts = vulnerability_alerts
                self.workflows = workflows
                self.members = members
                self.organization_administration = organization_administration
                self.organization_custom_roles = organization_custom_roles
                self.organization_custom_org_roles = organization_custom_org_roles
                self.organization_custom_properties = organization_custom_properties
                self.organization_copilot_seat_management = organization_copilot_seat_management
                self.organization_announcement_banners = organization_announcement_banners
                self.organization_events = organization_events
                self.organization_hooks = organization_hooks
                self.organization_personal_access_tokens = organization_personal_access_tokens
                self.organization_personal_access_token_requests = organization_personal_access_token_requests
                self.organization_plan = organization_plan
                self.organization_projects = organization_projects
                self.organization_packages = organization_packages
                self.organization_secrets = organization_secrets
                self.organization_self_hosted_runners = organization_self_hosted_runners
                self.organization_user_blocking = organization_user_blocking
                self.team_discussions = team_discussions
                self.email_addresses = email_addresses
                self.followers = followers
                self.git_ssh_keys = git_ssh_keys
                self.gpg_keys = gpg_keys
                self.interaction_limits = interaction_limits
                self.profile = profile
                self.starring = starring
            }
            public enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case codespaces
                case contents
                case dependabot_secrets
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pull_requests
                case repository_custom_properties
                case repository_hooks
                case repository_projects
                case secret_scanning_alerts
                case secrets
                case security_events
                case single_file
                case statuses
                case vulnerability_alerts
                case workflows
                case members
                case organization_administration
                case organization_custom_roles
                case organization_custom_org_roles
                case organization_custom_properties
                case organization_copilot_seat_management
                case organization_announcement_banners
                case organization_events
                case organization_hooks
                case organization_personal_access_tokens
                case organization_personal_access_token_requests
                case organization_plan
                case organization_projects
                case organization_packages
                case organization_secrets
                case organization_self_hosted_runners
                case organization_user_blocking
                case team_discussions
                case email_addresses
                case followers
                case git_ssh_keys
                case gpg_keys
                case interaction_limits
                case profile
                case starring
            }
        }
        /// Installation
        ///
        /// - Remark: Generated from `#/components/schemas/installation`.
        public struct installation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public struct accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/installation/account/value1`.
                public var value1: Components.Schemas.simple_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/installation/account/value2`.
                public var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.simple_hyphen_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public var account: Components.Schemas.installation.accountPayload?
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            public var repository_selection: Components.Schemas.installation.repository_selectionPayload
            /// - Remark: Generated from `#/components/schemas/installation/access_tokens_url`.
            public var access_tokens_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/app_id`.
            public var app_id: Swift.Int
            /// The ID of the user or organization this token is being scoped to.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/target_id`.
            public var target_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/target_type`.
            public var target_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/permissions`.
            public var permissions: Components.Schemas.app_hyphen_permissions
            /// - Remark: Generated from `#/components/schemas/installation/events`.
            public var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/installation/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/single_file_name`.
            public var single_file_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/installation/app_slug`.
            public var app_slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/suspended_by`.
            public var suspended_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/installation/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/installation/contact_email`.
            public var contact_email: Swift.String?
            /// Creates a new `installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - account:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            ///   - access_tokens_url:
            ///   - repositories_url:
            ///   - html_url:
            ///   - app_id:
            ///   - target_id: The ID of the user or organization this token is being scoped to.
            ///   - target_type:
            ///   - permissions:
            ///   - events:
            ///   - created_at:
            ///   - updated_at:
            ///   - single_file_name:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            ///   - app_slug:
            ///   - suspended_by:
            ///   - suspended_at:
            ///   - contact_email:
            public init(
                id: Swift.Int,
                account: Components.Schemas.installation.accountPayload? = nil,
                repository_selection: Components.Schemas.installation.repository_selectionPayload,
                access_tokens_url: Swift.String,
                repositories_url: Swift.String,
                html_url: Swift.String,
                app_id: Swift.Int,
                target_id: Swift.Int,
                target_type: Swift.String,
                permissions: Components.Schemas.app_hyphen_permissions,
                events: [Swift.String],
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                single_file_name: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil,
                app_slug: Swift.String,
                suspended_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                suspended_at: Foundation.Date? = nil,
                contact_email: Swift.String? = nil
            ) {
                self.id = id
                self.account = account
                self.repository_selection = repository_selection
                self.access_tokens_url = access_tokens_url
                self.repositories_url = repositories_url
                self.html_url = html_url
                self.app_id = app_id
                self.target_id = target_id
                self.target_type = target_type
                self.permissions = permissions
                self.events = events
                self.created_at = created_at
                self.updated_at = updated_at
                self.single_file_name = single_file_name
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
                self.app_slug = app_slug
                self.suspended_by = suspended_by
                self.suspended_at = suspended_at
                self.contact_email = contact_email
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account
                case repository_selection
                case access_tokens_url
                case repositories_url
                case html_url
                case app_id
                case target_id
                case target_type
                case permissions
                case events
                case created_at
                case updated_at
                case single_file_name
                case has_multiple_single_files
                case single_file_paths
                case app_slug
                case suspended_by
                case suspended_at
                case contact_email
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// A GitHub organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-simple`.
        public struct organization_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-simple/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-simple/description`.
            public var description: Swift.String?
            /// Creates a new `organization_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
            }
        }
        /// Organization Full
        ///
        /// - Remark: Generated from `#/components/schemas/organization-full`.
        public struct organization_hyphen_full: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-full/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/is_verified`.
            public var is_verified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/has_organization_projects`.
            public var has_organization_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/has_repository_projects`.
            public var has_repository_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/organization-full/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-full/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-full/total_private_repos`.
            public var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/owned_private_repos`.
            public var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/private_gists`.
            public var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/disk_usage`.
            public var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/collaborators`.
            public var collaborators: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/organization-full/billing_email`.
            public var billing_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/private_repos`.
                public var private_repos: Swift.Int
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/filled_seats`.
                public var filled_seats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/organization-full/plan/seats`.
                public var seats: Swift.Int?
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                ///   - filled_seats:
                ///   - seats:
                public init(
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int,
                    filled_seats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                    self.filled_seats = filled_seats
                    self.seats = seats
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case private_repos
                    case filled_seats
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/organization-full/plan`.
            public var plan: Components.Schemas.organization_hyphen_full.planPayload?
            /// - Remark: Generated from `#/components/schemas/organization-full/default_repository_permission`.
            public var default_repository_permission: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_repositories`.
            public var members_can_create_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/two_factor_requirement_enabled`.
            public var two_factor_requirement_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_allowed_repository_creation_type`.
            public var members_allowed_repository_creation_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_repositories`.
            public var members_can_create_public_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_repositories`.
            public var members_can_create_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_internal_repositories`.
            public var members_can_create_internal_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_pages`.
            public var members_can_create_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_public_pages`.
            public var members_can_create_public_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_create_private_pages`.
            public var members_can_create_private_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/members_can_fork_private_repositories`.
            public var members_can_fork_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-full/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/advanced_security_enabled_for_new_repositories`.
            public var advanced_security_enabled_for_new_repositories: Swift.Bool?
            /// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            /// this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_alerts_enabled_for_new_repositories`.
            public var dependabot_alerts_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            /// to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependabot_security_updates_enabled_for_new_repositories`.
            public var dependabot_security_updates_enabled_for_new_repositories: Swift.Bool?
            /// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/dependency_graph_enabled_for_new_repositories`.
            public var dependency_graph_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            /// organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_enabled_for_new_repositories`.
            public var secret_scanning_enabled_for_new_repositories: Swift.Bool?
            /// Whether secret scanning push protection is automatically enabled for new repositories and repositories
            /// transferred to this organization.
            ///
            /// This field is only visible to organization owners or members of a team with the security manager role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_enabled_for_new_repositories`.
            public var secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool?
            /// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link_enabled`.
            public var secret_scanning_push_protection_custom_link_enabled: Swift.Bool?
            /// An optional URL string to display to contributors who are blocked from pushing a secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-full/secret_scanning_push_protection_custom_link`.
            public var secret_scanning_push_protection_custom_link: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-full/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-full/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-full/archived_at`.
            public var archived_at: Foundation.Date?
            /// Creates a new `organization_hyphen_full`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - twitter_username:
            ///   - is_verified:
            ///   - has_organization_projects:
            ///   - has_repository_projects:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - html_url:
            ///   - _type:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - private_gists:
            ///   - disk_usage:
            ///   - collaborators:
            ///   - billing_email:
            ///   - plan:
            ///   - default_repository_permission:
            ///   - members_can_create_repositories:
            ///   - two_factor_requirement_enabled:
            ///   - members_allowed_repository_creation_type:
            ///   - members_can_create_public_repositories:
            ///   - members_can_create_private_repositories:
            ///   - members_can_create_internal_repositories:
            ///   - members_can_create_pages:
            ///   - members_can_create_public_pages:
            ///   - members_can_create_private_pages:
            ///   - members_can_fork_private_repositories:
            ///   - web_commit_signoff_required:
            ///   - advanced_security_enabled_for_new_repositories: Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
            ///   - dependabot_alerts_enabled_for_new_repositories: Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
            ///   - dependabot_security_updates_enabled_for_new_repositories: Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
            ///   - dependency_graph_enabled_for_new_repositories: Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_enabled_for_new_repositories: Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
            ///   - secret_scanning_push_protection_enabled_for_new_repositories: Whether secret scanning push protection is automatically enabled for new repositories and repositories
            ///   - secret_scanning_push_protection_custom_link_enabled: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
            ///   - secret_scanning_push_protection_custom_link: An optional URL string to display to contributors who are blocked from pushing a secret.
            ///   - created_at:
            ///   - updated_at:
            ///   - archived_at:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                is_verified: Swift.Bool? = nil,
                has_organization_projects: Swift.Bool,
                has_repository_projects: Swift.Bool,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                html_url: Swift.String,
                _type: Swift.String,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                private_gists: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil,
                billing_email: Swift.String? = nil,
                plan: Components.Schemas.organization_hyphen_full.planPayload? = nil,
                default_repository_permission: Swift.String? = nil,
                members_can_create_repositories: Swift.Bool? = nil,
                two_factor_requirement_enabled: Swift.Bool? = nil,
                members_allowed_repository_creation_type: Swift.String? = nil,
                members_can_create_public_repositories: Swift.Bool? = nil,
                members_can_create_private_repositories: Swift.Bool? = nil,
                members_can_create_internal_repositories: Swift.Bool? = nil,
                members_can_create_pages: Swift.Bool? = nil,
                members_can_create_public_pages: Swift.Bool? = nil,
                members_can_create_private_pages: Swift.Bool? = nil,
                members_can_fork_private_repositories: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                advanced_security_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_alerts_enabled_for_new_repositories: Swift.Bool? = nil,
                dependabot_security_updates_enabled_for_new_repositories: Swift.Bool? = nil,
                dependency_graph_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link_enabled: Swift.Bool? = nil,
                secret_scanning_push_protection_custom_link: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                archived_at: Foundation.Date? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.twitter_username = twitter_username
                self.is_verified = is_verified
                self.has_organization_projects = has_organization_projects
                self.has_repository_projects = has_repository_projects
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.html_url = html_url
                self._type = _type
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.private_gists = private_gists
                self.disk_usage = disk_usage
                self.collaborators = collaborators
                self.billing_email = billing_email
                self.plan = plan
                self.default_repository_permission = default_repository_permission
                self.members_can_create_repositories = members_can_create_repositories
                self.two_factor_requirement_enabled = two_factor_requirement_enabled
                self.members_allowed_repository_creation_type = members_allowed_repository_creation_type
                self.members_can_create_public_repositories = members_can_create_public_repositories
                self.members_can_create_private_repositories = members_can_create_private_repositories
                self.members_can_create_internal_repositories = members_can_create_internal_repositories
                self.members_can_create_pages = members_can_create_pages
                self.members_can_create_public_pages = members_can_create_public_pages
                self.members_can_create_private_pages = members_can_create_private_pages
                self.members_can_fork_private_repositories = members_can_fork_private_repositories
                self.web_commit_signoff_required = web_commit_signoff_required
                self.advanced_security_enabled_for_new_repositories = advanced_security_enabled_for_new_repositories
                self.dependabot_alerts_enabled_for_new_repositories = dependabot_alerts_enabled_for_new_repositories
                self.dependabot_security_updates_enabled_for_new_repositories = dependabot_security_updates_enabled_for_new_repositories
                self.dependency_graph_enabled_for_new_repositories = dependency_graph_enabled_for_new_repositories
                self.secret_scanning_enabled_for_new_repositories = secret_scanning_enabled_for_new_repositories
                self.secret_scanning_push_protection_enabled_for_new_repositories = secret_scanning_push_protection_enabled_for_new_repositories
                self.secret_scanning_push_protection_custom_link_enabled = secret_scanning_push_protection_custom_link_enabled
                self.secret_scanning_push_protection_custom_link = secret_scanning_push_protection_custom_link
                self.created_at = created_at
                self.updated_at = updated_at
                self.archived_at = archived_at
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
                case name
                case company
                case blog
                case location
                case email
                case twitter_username
                case is_verified
                case has_organization_projects
                case has_repository_projects
                case public_repos
                case public_gists
                case followers
                case following
                case html_url
                case _type = "type"
                case total_private_repos
                case owned_private_repos
                case private_gists
                case disk_usage
                case collaborators
                case billing_email
                case plan
                case default_repository_permission
                case members_can_create_repositories
                case two_factor_requirement_enabled
                case members_allowed_repository_creation_type
                case members_can_create_public_repositories
                case members_can_create_private_repositories
                case members_can_create_internal_repositories
                case members_can_create_pages
                case members_can_create_public_pages
                case members_can_create_private_pages
                case members_can_fork_private_repositories
                case web_commit_signoff_required
                case advanced_security_enabled_for_new_repositories
                case dependabot_alerts_enabled_for_new_repositories
                case dependabot_security_updates_enabled_for_new_repositories
                case dependency_graph_enabled_for_new_repositories
                case secret_scanning_enabled_for_new_repositories
                case secret_scanning_push_protection_enabled_for_new_repositories
                case secret_scanning_push_protection_custom_link_enabled
                case secret_scanning_push_protection_custom_link
                case created_at
                case updated_at
                case archived_at
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// Organization Invitation
        ///
        /// - Remark: Generated from `#/components/schemas/organization-invitation`.
        public struct organization_hyphen_invitation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-invitation/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-invitation/login`.
            public var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/role`.
            public var role: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/failed_at`.
            public var failed_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/failed_reason`.
            public var failed_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/inviter`.
            public var inviter: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/organization-invitation/team_count`.
            public var team_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-invitation/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/invitation_teams_url`.
            public var invitation_teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/invitation_source`.
            public var invitation_source: Swift.String?
            /// Creates a new `organization_hyphen_invitation`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - login:
            ///   - email:
            ///   - role:
            ///   - created_at:
            ///   - failed_at:
            ///   - failed_reason:
            ///   - inviter:
            ///   - team_count:
            ///   - node_id:
            ///   - invitation_teams_url:
            ///   - invitation_source:
            public init(
                id: Swift.Int,
                login: Swift.String? = nil,
                email: Swift.String? = nil,
                role: Swift.String,
                created_at: Swift.String,
                failed_at: Swift.String? = nil,
                failed_reason: Swift.String? = nil,
                inviter: Components.Schemas.simple_hyphen_user,
                team_count: Swift.Int,
                node_id: Swift.String,
                invitation_teams_url: Swift.String,
                invitation_source: Swift.String? = nil
            ) {
                self.id = id
                self.login = login
                self.email = email
                self.role = role
                self.created_at = created_at
                self.failed_at = failed_at
                self.failed_reason = failed_reason
                self.inviter = inviter
                self.team_count = team_count
                self.node_id = node_id
                self.invitation_teams_url = invitation_teams_url
                self.invitation_source = invitation_source
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case login
                case email
                case role
                case created_at
                case failed_at
                case failed_reason
                case inviter
                case team_count
                case node_id
                case invitation_teams_url
                case invitation_source
            }
        }
        /// Org Hook
        ///
        /// - Remark: Generated from `#/components/schemas/org-hook`.
        public struct org_hyphen_hook: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/org-hook/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/org-hook/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/org-hook/ping_url`.
            public var ping_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/org-hook/deliveries_url`.
            public var deliveries_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/org-hook/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/org-hook/events`.
            public var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/org-hook/active`.
            public var active: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/org-hook/config`.
            public struct configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-hook/config/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/org-hook/config/insecure_ssl`.
                public var insecure_ssl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/org-hook/config/content_type`.
                public var content_type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/org-hook/config/secret`.
                public var secret: Swift.String?
                /// Creates a new `configPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - insecure_ssl:
                ///   - content_type:
                ///   - secret:
                public init(
                    url: Swift.String? = nil,
                    insecure_ssl: Swift.String? = nil,
                    content_type: Swift.String? = nil,
                    secret: Swift.String? = nil
                ) {
                    self.url = url
                    self.insecure_ssl = insecure_ssl
                    self.content_type = content_type
                    self.secret = secret
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case insecure_ssl
                    case content_type
                    case secret
                }
            }
            /// - Remark: Generated from `#/components/schemas/org-hook/config`.
            public var config: Components.Schemas.org_hyphen_hook.configPayload
            /// - Remark: Generated from `#/components/schemas/org-hook/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/org-hook/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/org-hook/type`.
            public var _type: Swift.String
            /// Creates a new `org_hyphen_hook`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            ///   - ping_url:
            ///   - deliveries_url:
            ///   - name:
            ///   - events:
            ///   - active:
            ///   - config:
            ///   - updated_at:
            ///   - created_at:
            ///   - _type:
            public init(
                id: Swift.Int,
                url: Swift.String,
                ping_url: Swift.String,
                deliveries_url: Swift.String? = nil,
                name: Swift.String,
                events: [Swift.String],
                active: Swift.Bool,
                config: Components.Schemas.org_hyphen_hook.configPayload,
                updated_at: Foundation.Date,
                created_at: Foundation.Date,
                _type: Swift.String
            ) {
                self.id = id
                self.url = url
                self.ping_url = ping_url
                self.deliveries_url = deliveries_url
                self.name = name
                self.events = events
                self.active = active
                self.config = config
                self.updated_at = updated_at
                self.created_at = created_at
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case url
                case ping_url
                case deliveries_url
                case name
                case events
                case active
                case config
                case updated_at
                case created_at
                case _type = "type"
            }
        }
        /// Org Membership
        ///
        /// - Remark: Generated from `#/components/schemas/org-membership`.
        public struct org_hyphen_membership: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/org-membership/url`.
            public var url: Swift.String
            /// The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
            ///
            /// - Remark: Generated from `#/components/schemas/org-membership/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case pending = "pending"
            }
            /// The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
            ///
            /// - Remark: Generated from `#/components/schemas/org-membership/state`.
            public var state: Components.Schemas.org_hyphen_membership.statePayload
            /// The user's membership type in the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/org-membership/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case admin = "admin"
                case member = "member"
                case billing_manager = "billing_manager"
            }
            /// The user's membership type in the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/org-membership/role`.
            public var role: Components.Schemas.org_hyphen_membership.rolePayload
            /// - Remark: Generated from `#/components/schemas/org-membership/organization_url`.
            public var organization_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/org-membership/organization`.
            public var organization: Components.Schemas.organization_hyphen_simple
            /// - Remark: Generated from `#/components/schemas/org-membership/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/org-membership/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-membership/permissions/can_create_repository`.
                public var can_create_repository: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - can_create_repository:
                public init(can_create_repository: Swift.Bool) {
                    self.can_create_repository = can_create_repository
                }
                public enum CodingKeys: String, CodingKey {
                    case can_create_repository
                }
            }
            /// - Remark: Generated from `#/components/schemas/org-membership/permissions`.
            public var permissions: Components.Schemas.org_hyphen_membership.permissionsPayload?
            /// Creates a new `org_hyphen_membership`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - state: The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
            ///   - role: The user's membership type in the organization.
            ///   - organization_url:
            ///   - organization:
            ///   - user:
            ///   - permissions:
            public init(
                url: Swift.String,
                state: Components.Schemas.org_hyphen_membership.statePayload,
                role: Components.Schemas.org_hyphen_membership.rolePayload,
                organization_url: Swift.String,
                organization: Components.Schemas.organization_hyphen_simple,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                permissions: Components.Schemas.org_hyphen_membership.permissionsPayload? = nil
            ) {
                self.url = url
                self.state = state
                self.role = role
                self.organization_url = organization_url
                self.organization = organization
                self.user = user
                self.permissions = permissions
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case state
                case role
                case organization_url
                case organization
                case user
                case permissions
            }
        }
        /// A fine-grained permission that protects organization resources.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-fine-grained-permission`.
        public struct organization_hyphen_fine_hyphen_grained_hyphen_permission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-fine-grained-permission/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-fine-grained-permission/description`.
            public var description: Swift.String
            /// Creates a new `organization_hyphen_fine_hyphen_grained_hyphen_permission`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - description:
            public init(
                name: Swift.String,
                description: Swift.String
            ) {
                self.name = name
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case description
            }
        }
        /// Organization roles
        ///
        /// - Remark: Generated from `#/components/schemas/organization-role`.
        public struct organization_hyphen_role: Codable, Hashable, Sendable {
            /// The unique identifier of the role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/id`.
            public var id: Swift.Int
            /// The name of the role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/name`.
            public var name: Swift.String
            /// A short description about who this role is for or what permissions it grants.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/description`.
            public var description: Swift.String?
            /// A list of permissions included in this role.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/permissions`.
            public var permissions: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/organization-role/organization`.
            public var organization: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The date and time the role was created.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/created_at`.
            public var created_at: Foundation.Date
            /// The date and time the role was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-role/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `organization_hyphen_role`.
            ///
            /// - Parameters:
            ///   - id: The unique identifier of the role.
            ///   - name: The name of the role.
            ///   - description: A short description about who this role is for or what permissions it grants.
            ///   - permissions: A list of permissions included in this role.
            ///   - organization:
            ///   - created_at: The date and time the role was created.
            ///   - updated_at: The date and time the role was last updated.
            public init(
                id: Swift.Int,
                name: Swift.String,
                description: Swift.String? = nil,
                permissions: [Swift.String],
                organization: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.id = id
                self.name = name
                self.description = description
                self.permissions = permissions
                self.organization = organization
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case description
                case permissions
                case organization
                case created_at
                case updated_at
            }
        }
        /// Minimal representation of an organization programmatic access grant request for enumerations
        ///
        /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request`.
        public struct organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request: Codable, Hashable, Sendable {
            /// Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/id`.
            public var id: Swift.Int
            /// Reason for requesting access.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/reason`.
            public var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Type of repository selection requested.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case all = "all"
                case subset = "subset"
            }
            /// Type of repository selection requested.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/repository_selection`.
            public var repository_selection: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.repository_selectionPayload
            /// URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/repositories_url`.
            public var repositories_url: Swift.String
            /// Permissions requested, categorized by type of permission.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/organization`.
                public struct organizationPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `organizationPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/organization`.
                public var organization: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.organizationPayload?
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/repository`.
                public struct repositoryPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `repositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/repository`.
                public var repository: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.repositoryPayload?
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/other`.
                public struct otherPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `otherPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions/other`.
                public var other: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.otherPayload?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - organization:
                ///   - repository:
                ///   - other:
                public init(
                    organization: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.organizationPayload? = nil,
                    repository: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.repositoryPayload? = nil,
                    other: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload.otherPayload? = nil
                ) {
                    self.organization = organization
                    self.repository = repository
                    self.other = other
                }
                public enum CodingKeys: String, CodingKey {
                    case organization
                    case repository
                    case other
                }
            }
            /// Permissions requested, categorized by type of permission.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/permissions`.
            public var permissions: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload
            /// Date and time when the request for access was created.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/created_at`.
            public var created_at: Swift.String
            /// Whether the associated fine-grained personal access token has expired.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/token_expired`.
            public var token_expired: Swift.Bool
            /// Date and time when the associated fine-grained personal access token expires.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/token_expires_at`.
            public var token_expires_at: Swift.String?
            /// Date and time when the associated fine-grained personal access token was last used for authentication.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant-request/token_last_used_at`.
            public var token_last_used_at: Swift.String?
            /// Creates a new `organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
            ///   - reason: Reason for requesting access.
            ///   - owner:
            ///   - repository_selection: Type of repository selection requested.
            ///   - repositories_url: URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
            ///   - permissions: Permissions requested, categorized by type of permission.
            ///   - created_at: Date and time when the request for access was created.
            ///   - token_expired: Whether the associated fine-grained personal access token has expired.
            ///   - token_expires_at: Date and time when the associated fine-grained personal access token expires.
            ///   - token_last_used_at: Date and time when the associated fine-grained personal access token was last used for authentication.
            public init(
                id: Swift.Int,
                reason: Swift.String? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                repository_selection: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.repository_selectionPayload,
                repositories_url: Swift.String,
                permissions: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request.permissionsPayload,
                created_at: Swift.String,
                token_expired: Swift.Bool,
                token_expires_at: Swift.String? = nil,
                token_last_used_at: Swift.String? = nil
            ) {
                self.id = id
                self.reason = reason
                self.owner = owner
                self.repository_selection = repository_selection
                self.repositories_url = repositories_url
                self.permissions = permissions
                self.created_at = created_at
                self.token_expired = token_expired
                self.token_expires_at = token_expires_at
                self.token_last_used_at = token_last_used_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case reason
                case owner
                case repository_selection
                case repositories_url
                case permissions
                case created_at
                case token_expired
                case token_expires_at
                case token_last_used_at
            }
        }
        /// Minimal representation of an organization programmatic access grant for enumerations
        ///
        /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant`.
        public struct organization_hyphen_programmatic_hyphen_access_hyphen_grant: Codable, Hashable, Sendable {
            /// Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Type of repository selection requested.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case none = "none"
                case all = "all"
                case subset = "subset"
            }
            /// Type of repository selection requested.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/repository_selection`.
            public var repository_selection: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.repository_selectionPayload
            /// URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/repositories_url`.
            public var repositories_url: Swift.String
            /// Permissions requested, categorized by type of permission.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/organization`.
                public struct organizationPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `organizationPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/organization`.
                public var organization: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.organizationPayload?
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/repository`.
                public struct repositoryPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `repositoryPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/repository`.
                public var repository: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.repositoryPayload?
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/other`.
                public struct otherPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `otherPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions/other`.
                public var other: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.otherPayload?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - organization:
                ///   - repository:
                ///   - other:
                public init(
                    organization: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.organizationPayload? = nil,
                    repository: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.repositoryPayload? = nil,
                    other: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload.otherPayload? = nil
                ) {
                    self.organization = organization
                    self.repository = repository
                    self.other = other
                }
                public enum CodingKeys: String, CodingKey {
                    case organization
                    case repository
                    case other
                }
            }
            /// Permissions requested, categorized by type of permission.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/permissions`.
            public var permissions: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload
            /// Date and time when the fine-grained personal access token was approved to access the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/access_granted_at`.
            public var access_granted_at: Swift.String
            /// Whether the associated fine-grained personal access token has expired.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/token_expired`.
            public var token_expired: Swift.Bool
            /// Date and time when the associated fine-grained personal access token expires.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/token_expires_at`.
            public var token_expires_at: Swift.String?
            /// Date and time when the associated fine-grained personal access token was last used for authentication.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-programmatic-access-grant/token_last_used_at`.
            public var token_last_used_at: Swift.String?
            /// Creates a new `organization_hyphen_programmatic_hyphen_access_hyphen_grant`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token.
            ///   - owner:
            ///   - repository_selection: Type of repository selection requested.
            ///   - repositories_url: URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
            ///   - permissions: Permissions requested, categorized by type of permission.
            ///   - access_granted_at: Date and time when the fine-grained personal access token was approved to access the organization.
            ///   - token_expired: Whether the associated fine-grained personal access token has expired.
            ///   - token_expires_at: Date and time when the associated fine-grained personal access token expires.
            ///   - token_last_used_at: Date and time when the associated fine-grained personal access token was last used for authentication.
            public init(
                id: Swift.Int,
                owner: Components.Schemas.simple_hyphen_user,
                repository_selection: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.repository_selectionPayload,
                repositories_url: Swift.String,
                permissions: Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant.permissionsPayload,
                access_granted_at: Swift.String,
                token_expired: Swift.Bool,
                token_expires_at: Swift.String? = nil,
                token_last_used_at: Swift.String? = nil
            ) {
                self.id = id
                self.owner = owner
                self.repository_selection = repository_selection
                self.repositories_url = repositories_url
                self.permissions = permissions
                self.access_granted_at = access_granted_at
                self.token_expired = token_expired
                self.token_expires_at = token_expires_at
                self.token_last_used_at = token_last_used_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case owner
                case repository_selection
                case repositories_url
                case permissions
                case access_granted_at
                case token_expired
                case token_expires_at
                case token_last_used_at
            }
        }
        /// Custom property defined on an organization
        ///
        /// - Remark: Generated from `#/components/schemas/org-custom-property`.
        public struct org_hyphen_custom_hyphen_property: Codable, Hashable, Sendable {
            /// The name of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/property_name`.
            public var property_name: Swift.String
            /// The type of the value for the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/value_type`.
            @frozen public enum value_typePayload: String, Codable, Hashable, Sendable {
                case string = "string"
                case single_select = "single_select"
            }
            /// The type of the value for the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/value_type`.
            public var value_type: Components.Schemas.org_hyphen_custom_hyphen_property.value_typePayload
            /// Whether the property is required.
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/required`.
            public var required: Swift.Bool?
            /// Default value of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/default_value`.
            @frozen public enum default_valuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/org-custom-property/default_value/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/org-custom-property/default_value/case2`.
                case case2([Swift.String])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Default value of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/default_value`.
            public var default_value: Components.Schemas.org_hyphen_custom_hyphen_property.default_valuePayload?
            /// Short description of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/description`.
            public var description: Swift.String?
            /// An ordered list of the allowed values of the property.
            /// The property can have up to 200 allowed values.
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/allowed_values`.
            public var allowed_values: [Swift.String]?
            /// Who can edit the values of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/values_editable_by`.
            @frozen public enum values_editable_byPayload: String, Codable, Hashable, Sendable {
                case org_actors = "org_actors"
                case org_and_repo_actors = "org_and_repo_actors"
            }
            /// Who can edit the values of the property
            ///
            /// - Remark: Generated from `#/components/schemas/org-custom-property/values_editable_by`.
            public var values_editable_by: Components.Schemas.org_hyphen_custom_hyphen_property.values_editable_byPayload?
            /// Creates a new `org_hyphen_custom_hyphen_property`.
            ///
            /// - Parameters:
            ///   - property_name: The name of the property
            ///   - value_type: The type of the value for the property
            ///   - required: Whether the property is required.
            ///   - default_value: Default value of the property
            ///   - description: Short description of the property
            ///   - allowed_values: An ordered list of the allowed values of the property.
            ///   - values_editable_by: Who can edit the values of the property
            public init(
                property_name: Swift.String,
                value_type: Components.Schemas.org_hyphen_custom_hyphen_property.value_typePayload,
                required: Swift.Bool? = nil,
                default_value: Components.Schemas.org_hyphen_custom_hyphen_property.default_valuePayload? = nil,
                description: Swift.String? = nil,
                allowed_values: [Swift.String]? = nil,
                values_editable_by: Components.Schemas.org_hyphen_custom_hyphen_property.values_editable_byPayload? = nil
            ) {
                self.property_name = property_name
                self.value_type = value_type
                self.required = required
                self.default_value = default_value
                self.description = description
                self.allowed_values = allowed_values
                self.values_editable_by = values_editable_by
            }
            public enum CodingKeys: String, CodingKey {
                case property_name
                case value_type
                case required
                case default_value
                case description
                case allowed_values
                case values_editable_by
            }
        }
        /// Custom property name and associated value
        ///
        /// - Remark: Generated from `#/components/schemas/custom-property-value`.
        public struct custom_hyphen_property_hyphen_value: Codable, Hashable, Sendable {
            /// The name of the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/property_name`.
            public var property_name: Swift.String
            /// The value assigned to the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/value`.
            @frozen public enum valuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/custom-property-value/value/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/custom-property-value/value/case2`.
                case case2([Swift.String])
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The value assigned to the property
            ///
            /// - Remark: Generated from `#/components/schemas/custom-property-value/value`.
            public var value: Components.Schemas.custom_hyphen_property_hyphen_value.valuePayload?
            /// Creates a new `custom_hyphen_property_hyphen_value`.
            ///
            /// - Parameters:
            ///   - property_name: The name of the property
            ///   - value: The value assigned to the property
            public init(
                property_name: Swift.String,
                value: Components.Schemas.custom_hyphen_property_hyphen_value.valuePayload? = nil
            ) {
                self.property_name = property_name
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case property_name
                case value
            }
        }
        /// List of custom property values for a repository
        ///
        /// - Remark: Generated from `#/components/schemas/org-repo-custom-property-values`.
        public struct org_hyphen_repo_hyphen_custom_hyphen_property_hyphen_values: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/org-repo-custom-property-values/repository_id`.
            public var repository_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/org-repo-custom-property-values/repository_name`.
            public var repository_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/org-repo-custom-property-values/repository_full_name`.
            public var repository_full_name: Swift.String
            /// List of custom property names and associated values
            ///
            /// - Remark: Generated from `#/components/schemas/org-repo-custom-property-values/properties`.
            public var properties: [Components.Schemas.custom_hyphen_property_hyphen_value]
            /// Creates a new `org_hyphen_repo_hyphen_custom_hyphen_property_hyphen_values`.
            ///
            /// - Parameters:
            ///   - repository_id:
            ///   - repository_name:
            ///   - repository_full_name:
            ///   - properties: List of custom property names and associated values
            public init(
                repository_id: Swift.Int,
                repository_name: Swift.String,
                repository_full_name: Swift.String,
                properties: [Components.Schemas.custom_hyphen_property_hyphen_value]
            ) {
                self.repository_id = repository_id
                self.repository_name = repository_name
                self.repository_full_name = repository_full_name
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case repository_id
                case repository_name
                case repository_full_name
                case properties
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        public struct team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        public typealias cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        public typealias delivery_hyphen_id = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// An organization ID. Only return organizations with an ID greater than this ID.
        ///
        /// - Remark: Generated from `#/components/parameters/since-org`.
        public typealias since_hyphen_org = Swift.Int
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
        ///
        /// - Remark: Generated from `#/components/parameters/hook-id`.
        public typealias hook_hyphen_id = Swift.Int
        /// The unique identifier of the invitation.
        ///
        /// - Remark: Generated from `#/components/parameters/invitation-id`.
        public typealias invitation_hyphen_id = Swift.Int
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        public typealias team_hyphen_slug = Swift.String
        /// The unique identifier of the role.
        ///
        /// - Remark: Generated from `#/components/parameters/role-id`.
        public typealias role_hyphen_id = Swift.Int
        /// The property by which to sort the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
        @frozen public enum personal_hyphen_access_hyphen_token_hyphen_sort: String, Codable, Hashable, Sendable {
            case created_at = "created_at"
        }
        /// A list of owner usernames to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-owner`.
        public typealias personal_hyphen_access_hyphen_token_hyphen_owner = [Swift.String]
        /// The name of the repository to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-repository`.
        public typealias personal_hyphen_access_hyphen_token_hyphen_repository = Swift.String
        /// The permission to use to filter the results.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-permission`.
        public typealias personal_hyphen_access_hyphen_token_hyphen_permission = Swift.String
        /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-before`.
        public typealias personal_hyphen_access_hyphen_token_hyphen_before = Foundation.Date
        /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/personal-access-token-after`.
        public typealias personal_hyphen_access_hyphen_token_hyphen_after = Foundation.Date
        /// The unique identifier of the fine-grained personal access token.
        ///
        /// - Remark: Generated from `#/components/parameters/fine-grained-personal-access-token-id`.
        public typealias fine_hyphen_grained_hyphen_personal_hyphen_access_hyphen_token_hyphen_id = Swift.Int
        /// The custom property name. The name is case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/custom-property-name`.
        public typealias custom_hyphen_property_hyphen_name = Swift.String
        /// The security feature to enable or disable.
        ///
        /// - Remark: Generated from `#/components/parameters/security-product`.
        @frozen public enum security_hyphen_product: String, Codable, Hashable, Sendable {
            case dependency_graph = "dependency_graph"
            case dependabot_alerts = "dependabot_alerts"
            case dependabot_security_updates = "dependabot_security_updates"
            case advanced_security = "advanced_security"
            case code_scanning_default_setup = "code_scanning_default_setup"
            case secret_scanning = "secret_scanning"
            case secret_scanning_push_protection = "secret_scanning_push_protection"
        }
        /// The action to take.
        ///
        /// `enable_all` means to enable the specified security feature for all repositories in the organization.
        /// `disable_all` means to disable the specified security feature for all repositories in the organization.
        ///
        /// - Remark: Generated from `#/components/parameters/org-security-product-enablement`.
        @frozen public enum org_hyphen_security_hyphen_product_hyphen_enablement: String, Codable, Hashable, Sendable {
            case enable_all = "enable_all"
            case disable_all = "disable_all"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct internal_error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.internal_error.Body
            /// Creates a new `internal_error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.internal_error.Body) {
                self.body = body
            }
        }
        public struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
        public struct no_content: Sendable, Hashable {
            /// Creates a new `no_content`.
            public init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List organizations
    ///
    /// Lists all organizations, in the order that they were created.
    ///
    /// **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
    ///
    /// - Remark: HTTP `GET /organizations`.
    /// - Remark: Generated from `#/paths//organizations/get(orgs/list)`.
    public enum orgs_sol_list {
        public static let id: Swift.String = "orgs/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organizations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// An organization ID. Only return organizations with an ID greater than this ID.
                ///
                /// - Remark: Generated from `#/paths/organizations/GET/query/since`.
                public var since: Components.Parameters.since_hyphen_org?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/organizations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: An organization ID. Only return organizations with an ID greater than this ID.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since_hyphen_org? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                }
            }
            public var query: Operations.orgs_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/organizations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orgs_sol_list.Input.Query = .init(),
                headers: Operations.orgs_sol_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organizations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organizations/GET/responses/200/headers/Link`.
                    public var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Swift.String? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/organizations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organizations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//organizations/get(orgs/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//organizations/get(orgs/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization
    ///
    /// Gets information about an organization.
    ///
    /// When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    ///
    /// To see the full details about an organization, the authenticated user must be an organization owner.
    ///
    /// The values returned by this endpoint are set by the "Update an organization" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the "Update an organization" endpoint have been overwritten by that configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on security configurations, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
    ///
    /// To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
    ///
    /// - Remark: HTTP `GET /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)`.
    public enum orgs_sol_get {
        public static let id: Swift.String = "orgs/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get.Input.Path,
                headers: Operations.orgs_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/get(orgs/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an organization
    ///
    /// **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
    ///
    /// Updates the organization's profile and member privileges.
    ///
    /// With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:
    ///
    /// - advanced_security_enabled_for_new_repositories
    /// - dependabot_alerts_enabled_for_new_repositories
    /// - dependabot_security_updates_enabled_for_new_repositories
    /// - dependency_graph_enabled_for_new_repositories
    /// - secret_scanning_enabled_for_new_repositories
    /// - secret_scanning_push_protection_enabled_for_new_repositories
    ///
    /// For more information on setting a default security configuration, see "[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale)."
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)`.
    public enum orgs_sol_update {
        public static let id: Swift.String = "orgs/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Billing email address. This address is not publicized.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/billing_email`.
                    public var billing_email: Swift.String?
                    /// The company name.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/company`.
                    public var company: Swift.String?
                    /// The publicly visible email address.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/email`.
                    public var email: Swift.String?
                    /// The Twitter username of the company.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/twitter_username`.
                    public var twitter_username: Swift.String?
                    /// The location.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/location`.
                    public var location: Swift.String?
                    /// The shorthand name of the company.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The description of the company. The maximum size is 160 characters.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Whether an organization can use organization projects.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/has_organization_projects`.
                    public var has_organization_projects: Swift.Bool?
                    /// Whether repositories that belong to the organization can use repository projects.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/has_repository_projects`.
                    public var has_repository_projects: Swift.Bool?
                    /// Default permission level members have for organization repositories.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/default_repository_permission`.
                    @frozen public enum default_repository_permissionPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                        case none = "none"
                    }
                    /// Default permission level members have for organization repositories.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/default_repository_permission`.
                    public var default_repository_permission: Operations.orgs_sol_update.Input.Body.jsonPayload.default_repository_permissionPayload?
                    /// Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_repositories`.
                    public var members_can_create_repositories: Swift.Bool?
                    /// Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_internal_repositories`.
                    public var members_can_create_internal_repositories: Swift.Bool?
                    /// Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_private_repositories`.
                    public var members_can_create_private_repositories: Swift.Bool?
                    /// Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_public_repositories`.
                    public var members_can_create_public_repositories: Swift.Bool?
                    /// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
                    /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_allowed_repository_creation_type`.
                    @frozen public enum members_allowed_repository_creation_typePayload: String, Codable, Hashable, Sendable {
                        case all = "all"
                        case _private = "private"
                        case none = "none"
                    }
                    /// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
                    /// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_allowed_repository_creation_type`.
                    public var members_allowed_repository_creation_type: Operations.orgs_sol_update.Input.Body.jsonPayload.members_allowed_repository_creation_typePayload?
                    /// Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_pages`.
                    public var members_can_create_pages: Swift.Bool?
                    /// Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_public_pages`.
                    public var members_can_create_public_pages: Swift.Bool?
                    /// Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_create_private_pages`.
                    public var members_can_create_private_pages: Swift.Bool?
                    /// Whether organization members can fork private organization repositories.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/members_can_fork_private_repositories`.
                    public var members_can_fork_private_repositories: Swift.Bool?
                    /// Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/web_commit_signoff_required`.
                    public var web_commit_signoff_required: Swift.Bool?
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/blog`.
                    public var blog: Swift.String?
                    /// Whether GitHub Advanced Security is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/advanced_security_enabled_for_new_repositories`.
                    public var advanced_security_enabled_for_new_repositories: Swift.Bool?
                    /// Whether Dependabot alerts is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/dependabot_alerts_enabled_for_new_repositories`.
                    public var dependabot_alerts_enabled_for_new_repositories: Swift.Bool?
                    /// Whether Dependabot security updates is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/dependabot_security_updates_enabled_for_new_repositories`.
                    public var dependabot_security_updates_enabled_for_new_repositories: Swift.Bool?
                    /// Whether dependency graph is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/dependency_graph_enabled_for_new_repositories`.
                    public var dependency_graph_enabled_for_new_repositories: Swift.Bool?
                    /// Whether secret scanning is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/secret_scanning_enabled_for_new_repositories`.
                    public var secret_scanning_enabled_for_new_repositories: Swift.Bool?
                    /// Whether secret scanning push protection is automatically enabled for new repositories.
                    ///
                    /// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
                    ///
                    /// You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/secret_scanning_push_protection_enabled_for_new_repositories`.
                    public var secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool?
                    /// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/secret_scanning_push_protection_custom_link_enabled`.
                    public var secret_scanning_push_protection_custom_link_enabled: Swift.Bool?
                    /// If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/json/secret_scanning_push_protection_custom_link`.
                    public var secret_scanning_push_protection_custom_link: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - billing_email: Billing email address. This address is not publicized.
                    ///   - company: The company name.
                    ///   - email: The publicly visible email address.
                    ///   - twitter_username: The Twitter username of the company.
                    ///   - location: The location.
                    ///   - name: The shorthand name of the company.
                    ///   - description: The description of the company. The maximum size is 160 characters.
                    ///   - has_organization_projects: Whether an organization can use organization projects.
                    ///   - has_repository_projects: Whether repositories that belong to the organization can use repository projects.
                    ///   - default_repository_permission: Default permission level members have for organization repositories.
                    ///   - members_can_create_repositories: Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
                    ///   - members_can_create_internal_repositories: Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///   - members_can_create_private_repositories: Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///   - members_can_create_public_repositories: Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
                    ///   - members_allowed_repository_creation_type: Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
                    ///   - members_can_create_pages: Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
                    ///   - members_can_create_public_pages: Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
                    ///   - members_can_create_private_pages: Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
                    ///   - members_can_fork_private_repositories: Whether organization members can fork private organization repositories.
                    ///   - web_commit_signoff_required: Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
                    ///   - blog:
                    ///   - advanced_security_enabled_for_new_repositories: Whether GitHub Advanced Security is automatically enabled for new repositories.
                    ///   - dependabot_alerts_enabled_for_new_repositories: Whether Dependabot alerts is automatically enabled for new repositories.
                    ///   - dependabot_security_updates_enabled_for_new_repositories: Whether Dependabot security updates is automatically enabled for new repositories.
                    ///   - dependency_graph_enabled_for_new_repositories: Whether dependency graph is automatically enabled for new repositories.
                    ///   - secret_scanning_enabled_for_new_repositories: Whether secret scanning is automatically enabled for new repositories.
                    ///   - secret_scanning_push_protection_enabled_for_new_repositories: Whether secret scanning push protection is automatically enabled for new repositories.
                    ///   - secret_scanning_push_protection_custom_link_enabled: Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
                    ///   - secret_scanning_push_protection_custom_link: If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
                    public init(
                        billing_email: Swift.String? = nil,
                        company: Swift.String? = nil,
                        email: Swift.String? = nil,
                        twitter_username: Swift.String? = nil,
                        location: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        has_organization_projects: Swift.Bool? = nil,
                        has_repository_projects: Swift.Bool? = nil,
                        default_repository_permission: Operations.orgs_sol_update.Input.Body.jsonPayload.default_repository_permissionPayload? = nil,
                        members_can_create_repositories: Swift.Bool? = nil,
                        members_can_create_internal_repositories: Swift.Bool? = nil,
                        members_can_create_private_repositories: Swift.Bool? = nil,
                        members_can_create_public_repositories: Swift.Bool? = nil,
                        members_allowed_repository_creation_type: Operations.orgs_sol_update.Input.Body.jsonPayload.members_allowed_repository_creation_typePayload? = nil,
                        members_can_create_pages: Swift.Bool? = nil,
                        members_can_create_public_pages: Swift.Bool? = nil,
                        members_can_create_private_pages: Swift.Bool? = nil,
                        members_can_fork_private_repositories: Swift.Bool? = nil,
                        web_commit_signoff_required: Swift.Bool? = nil,
                        blog: Swift.String? = nil,
                        advanced_security_enabled_for_new_repositories: Swift.Bool? = nil,
                        dependabot_alerts_enabled_for_new_repositories: Swift.Bool? = nil,
                        dependabot_security_updates_enabled_for_new_repositories: Swift.Bool? = nil,
                        dependency_graph_enabled_for_new_repositories: Swift.Bool? = nil,
                        secret_scanning_enabled_for_new_repositories: Swift.Bool? = nil,
                        secret_scanning_push_protection_enabled_for_new_repositories: Swift.Bool? = nil,
                        secret_scanning_push_protection_custom_link_enabled: Swift.Bool? = nil,
                        secret_scanning_push_protection_custom_link: Swift.String? = nil
                    ) {
                        self.billing_email = billing_email
                        self.company = company
                        self.email = email
                        self.twitter_username = twitter_username
                        self.location = location
                        self.name = name
                        self.description = description
                        self.has_organization_projects = has_organization_projects
                        self.has_repository_projects = has_repository_projects
                        self.default_repository_permission = default_repository_permission
                        self.members_can_create_repositories = members_can_create_repositories
                        self.members_can_create_internal_repositories = members_can_create_internal_repositories
                        self.members_can_create_private_repositories = members_can_create_private_repositories
                        self.members_can_create_public_repositories = members_can_create_public_repositories
                        self.members_allowed_repository_creation_type = members_allowed_repository_creation_type
                        self.members_can_create_pages = members_can_create_pages
                        self.members_can_create_public_pages = members_can_create_public_pages
                        self.members_can_create_private_pages = members_can_create_private_pages
                        self.members_can_fork_private_repositories = members_can_fork_private_repositories
                        self.web_commit_signoff_required = web_commit_signoff_required
                        self.blog = blog
                        self.advanced_security_enabled_for_new_repositories = advanced_security_enabled_for_new_repositories
                        self.dependabot_alerts_enabled_for_new_repositories = dependabot_alerts_enabled_for_new_repositories
                        self.dependabot_security_updates_enabled_for_new_repositories = dependabot_security_updates_enabled_for_new_repositories
                        self.dependency_graph_enabled_for_new_repositories = dependency_graph_enabled_for_new_repositories
                        self.secret_scanning_enabled_for_new_repositories = secret_scanning_enabled_for_new_repositories
                        self.secret_scanning_push_protection_enabled_for_new_repositories = secret_scanning_push_protection_enabled_for_new_repositories
                        self.secret_scanning_push_protection_custom_link_enabled = secret_scanning_push_protection_custom_link_enabled
                        self.secret_scanning_push_protection_custom_link = secret_scanning_push_protection_custom_link
                    }
                    public enum CodingKeys: String, CodingKey {
                        case billing_email
                        case company
                        case email
                        case twitter_username
                        case location
                        case name
                        case description
                        case has_organization_projects
                        case has_repository_projects
                        case default_repository_permission
                        case members_can_create_repositories
                        case members_can_create_internal_repositories
                        case members_can_create_private_repositories
                        case members_can_create_public_repositories
                        case members_allowed_repository_creation_type
                        case members_can_create_pages
                        case members_can_create_public_pages
                        case members_can_create_private_pages
                        case members_can_fork_private_repositories
                        case web_commit_signoff_required
                        case blog
                        case advanced_security_enabled_for_new_repositories
                        case dependabot_alerts_enabled_for_new_repositories
                        case dependabot_security_updates_enabled_for_new_repositories
                        case dependency_graph_enabled_for_new_repositories
                        case secret_scanning_enabled_for_new_repositories
                        case secret_scanning_push_protection_enabled_for_new_repositories
                        case secret_scanning_push_protection_custom_link_enabled
                        case secret_scanning_push_protection_custom_link
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update.Input.Path,
                headers: Operations.orgs_sol_update.Input.Headers = .init(),
                body: Operations.orgs_sol_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/422/content/json`.
                    @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/422/content/json/case1`.
                        case validation_hyphen_error(Components.Schemas.validation_hyphen_error)
                        /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/422/content/json/case2`.
                        case validation_hyphen_error_hyphen_simple(Components.Schemas.validation_hyphen_error_hyphen_simple)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .validation_hyphen_error(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .validation_hyphen_error_hyphen_simple(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .validation_hyphen_error(value):
                                try value.encode(to: encoder)
                            case let .validation_hyphen_error_hyphen_simple(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/PATCH/responses/422/content/application\/json`.
                    case json(Operations.orgs_sol_update.Output.UnprocessableContent.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.orgs_sol_update.Output.UnprocessableContent.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_update.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_update.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation failed
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_update.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_update.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/patch(orgs/update)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization
    ///
    /// Deletes an organization and all its repositories.
    ///
    /// The organization login will be unavailable for 90 days after deletion.
    ///
    /// Please review the Terms of Service regarding account deletion before using this endpoint:
    ///
    /// https://docs.github.com/site-policy/github-terms/github-terms-of-service
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)`.
    public enum orgs_sol_delete {
        public static let id: Swift.String = "orgs/delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_delete.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_delete.Input.Path,
                headers: Operations.orgs_sol_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/delete(orgs/delete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List users blocked by an organization
    ///
    /// List the users blocked by an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/get(orgs/list-blocked-users)`.
    public enum orgs_sol_list_hyphen_blocked_hyphen_users {
        public static let id: Swift.String = "orgs/list-blocked-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_blocked_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_blocked_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Path,
                query: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/blocks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/get(orgs/list-blocked-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_blocked_hyphen_users.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user is blocked by an organization
    ///
    /// Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/get(orgs/check-blocked-user)`.
    public enum orgs_sol_check_hyphen_blocked_hyphen_user {
        public static let id: Swift.String = "orgs/check-blocked-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_check_hyphen_blocked_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_check_hyphen_blocked_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// If the user is blocked
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/get(orgs/check-blocked-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// If the user is not blocked
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/get(orgs/check-blocked-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_check_hyphen_blocked_hyphen_user.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Block a user from an organization
    ///
    /// Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/put(orgs/block-user)`.
    public enum orgs_sol_block_hyphen_user {
        public static let id: Swift.String = "orgs/block-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_block_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_block_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_block_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_block_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_block_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_block_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/put(orgs/block-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_block_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_block_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/put(orgs/block-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unblock a user from an organization
    ///
    /// Unblocks the given user on behalf of the specified organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/blocks/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/delete(orgs/unblock-user)`.
    public enum orgs_sol_unblock_hyphen_user {
        public static let id: Swift.String = "orgs/unblock-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/blocks/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_unblock_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_unblock_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/blocks/{username}/delete(orgs/unblock-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_unblock_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_unblock_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List failed organization invitations
    ///
    /// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/failed_invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/failed_invitations/get(orgs/list-failed-invitations)`.
    public enum orgs_sol_list_hyphen_failed_hyphen_invitations {
        public static let id: Swift.String = "orgs/list-failed-invitations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Path,
                query: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/failed_invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/failed_invitations/get(orgs/list-failed-invitations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_failed_hyphen_invitations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/failed_invitations/get(orgs/list-failed-invitations)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization webhooks
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/get(orgs/list-webhooks)`.
    public enum orgs_sol_list_hyphen_webhooks {
        public static let id: Swift.String = "orgs/list-webhooks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_webhooks.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_webhooks.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_webhooks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_webhooks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_webhooks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_webhooks.Input.Path,
                query: Operations.orgs_sol_list_hyphen_webhooks.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_webhooks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_webhooks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.org_hyphen_hook])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.org_hyphen_hook] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_webhooks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_webhooks.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_webhooks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/get(orgs/list-webhooks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_webhooks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_webhooks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/get(orgs/list-webhooks)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization webhook
    ///
    /// Create a hook that posts payloads in JSON format.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
    /// edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)`.
    public enum orgs_sol_create_hyphen_webhook {
        public static let id: Swift.String = "orgs/create-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_webhook.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Must be passed as "web".
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config`.
                    public struct configPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/url`.
                        public var url: Components.Schemas.webhook_hyphen_config_hyphen_url
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/content_type`.
                        public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/secret`.
                        public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/insecure_ssl`.
                        public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/username`.
                        public var username: Swift.String?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config/password`.
                        public var password: Swift.String?
                        /// Creates a new `configPayload`.
                        ///
                        /// - Parameters:
                        ///   - url:
                        ///   - content_type:
                        ///   - secret:
                        ///   - insecure_ssl:
                        ///   - username:
                        ///   - password:
                        public init(
                            url: Components.Schemas.webhook_hyphen_config_hyphen_url,
                            content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                            secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                            insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil,
                            username: Swift.String? = nil,
                            password: Swift.String? = nil
                        ) {
                            self.url = url
                            self.content_type = content_type
                            self.secret = secret
                            self.insecure_ssl = insecure_ssl
                            self.username = username
                            self.password = password
                        }
                        public enum CodingKeys: String, CodingKey {
                            case url
                            case content_type
                            case secret
                            case insecure_ssl
                            case username
                            case password
                        }
                    }
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/config`.
                    public var config: Operations.orgs_sol_create_hyphen_webhook.Input.Body.jsonPayload.configPayload
                    /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/events`.
                    public var events: [Swift.String]?
                    /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/json/active`.
                    public var active: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: Must be passed as "web".
                    ///   - config: Key/value pairs to provide settings for this webhook.
                    ///   - events: Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
                    ///   - active: Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    public init(
                        name: Swift.String,
                        config: Operations.orgs_sol_create_hyphen_webhook.Input.Body.jsonPayload.configPayload,
                        events: [Swift.String]? = nil,
                        active: Swift.Bool? = nil
                    ) {
                        self.name = name
                        self.config = config
                        self.events = events
                        self.active = active
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case config
                        case events
                        case active
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_webhook.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_webhook.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_webhook.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_webhook.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_webhook.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_create_hyphen_webhook.Output.Created.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_create_hyphen_webhook.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_create_hyphen_webhook.Output.Created.Headers = .init(),
                    body: Operations.orgs_sol_create_hyphen_webhook.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.orgs_sol_create_hyphen_webhook.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.orgs_sol_create_hyphen_webhook.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/post(orgs/create-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization webhook
    ///
    /// Returns a webhook configured in an organization. To get only the webhook
    /// `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/get(orgs/get-webhook)`.
    public enum orgs_sol_get_hyphen_webhook {
        public static let id: Swift.String = "orgs/get-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_webhook.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_webhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_webhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/get(orgs/get-webhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_webhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_webhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/get(orgs/get-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an organization webhook
    ///
    /// Updates a webhook configured in an organization. When you update a webhook,
    /// the `secret` will be overwritten. If you previously had a `secret` set, you must
    /// provide the same `secret` or set a new `secret` or the secret will be removed. If
    /// you are only updating individual webhook `config` properties, use "[Update a webhook
    /// configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)`.
    public enum orgs_sol_update_hyphen_webhook {
        public static let id: Swift.String = "orgs/update-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_update_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update_hyphen_webhook.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config`.
                    public struct configPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config/url`.
                        public var url: Components.Schemas.webhook_hyphen_config_hyphen_url
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config/content_type`.
                        public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config/secret`.
                        public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                        /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config/insecure_ssl`.
                        public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                        /// Creates a new `configPayload`.
                        ///
                        /// - Parameters:
                        ///   - url:
                        ///   - content_type:
                        ///   - secret:
                        ///   - insecure_ssl:
                        public init(
                            url: Components.Schemas.webhook_hyphen_config_hyphen_url,
                            content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                            secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                            insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
                        ) {
                            self.url = url
                            self.content_type = content_type
                            self.secret = secret
                            self.insecure_ssl = insecure_ssl
                        }
                        public enum CodingKeys: String, CodingKey {
                            case url
                            case content_type
                            case secret
                            case insecure_ssl
                        }
                    }
                    /// Key/value pairs to provide settings for this webhook.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/config`.
                    public var config: Operations.orgs_sol_update_hyphen_webhook.Input.Body.jsonPayload.configPayload?
                    /// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/events`.
                    public var events: [Swift.String]?
                    /// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/active`.
                    public var active: Swift.Bool?
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - config: Key/value pairs to provide settings for this webhook.
                    ///   - events: Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
                    ///   - active: Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                    ///   - name:
                    public init(
                        config: Operations.orgs_sol_update_hyphen_webhook.Input.Body.jsonPayload.configPayload? = nil,
                        events: [Swift.String]? = nil,
                        active: Swift.Bool? = nil,
                        name: Swift.String? = nil
                    ) {
                        self.config = config
                        self.events = events
                        self.active = active
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case config
                        case events
                        case active
                        case name
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update_hyphen_webhook.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update_hyphen_webhook.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update_hyphen_webhook.Input.Path,
                headers: Operations.orgs_sol_update_hyphen_webhook.Input.Headers = .init(),
                body: Operations.orgs_sol_update_hyphen_webhook.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_hook)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_hook {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_update_hyphen_webhook.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_update_hyphen_webhook.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_update_hyphen_webhook.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_update_hyphen_webhook.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/patch(orgs/update-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization webhook
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/hooks/{hook_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/delete(orgs/delete-webhook)`.
    public enum orgs_sol_delete_hyphen_webhook {
        public static let id: Swift.String = "orgs/delete-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/DELETE/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_delete_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_delete_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_delete_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_delete_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_delete_hyphen_webhook.Input.Path,
                headers: Operations.orgs_sol_delete_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/delete(orgs/delete-webhook)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_delete_hyphen_webhook.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_delete_hyphen_webhook.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/delete(orgs/delete-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a webhook configuration for an organization
    ///
    /// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/get(orgs/get-webhook-config-for-org)`.
    public enum orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org {
        public static let id: Swift.String = "orgs/get-webhook-config-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/get(orgs/get-webhook-config-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a webhook configuration for an organization
    ///
    /// Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/hooks/{hook_id}/config`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/patch(orgs/update-webhook-config-for-org)`.
    public enum orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org {
        public static let id: Swift.String = "orgs/update-webhook-config-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/json/url`.
                    public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/json/content_type`.
                    public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/json/secret`.
                    public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/json/insecure_ssl`.
                    public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - content_type:
                    ///   - secret:
                    ///   - insecure_ssl:
                    public init(
                        url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                        content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                        secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                        insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
                    ) {
                        self.url = url
                        self.content_type = content_type
                        self.secret = secret
                        self.insecure_ssl = insecure_ssl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case content_type
                        case secret
                        case insecure_ssl
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Path,
                headers: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Headers = .init(),
                body: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/config/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/config/patch(orgs/update-webhook-config-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List deliveries for an organization webhook
    ///
    /// Returns a list of webhook deliveries for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)`.
    public enum orgs_sol_list_hyphen_webhook_hyphen_deliveries {
        public static let id: Swift.String = "orgs/list-webhook-deliveries"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/query/cursor`.
                public var cursor: Components.Parameters.cursor?
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/query/redelivery`.
                public var redelivery: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - cursor: Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                ///   - redelivery:
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    cursor: Components.Parameters.cursor? = nil,
                    redelivery: Swift.Bool? = nil
                ) {
                    self.per_page = per_page
                    self.cursor = cursor
                    self.redelivery = redelivery
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Path,
                query: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.hook_hyphen_delivery_hyphen_item])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.hook_hyphen_delivery_hyphen_item] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/get(orgs/list-webhook-deliveries)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get a webhook delivery for an organization webhook
    ///
    /// Returns a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)`.
    public enum orgs_sol_get_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "orgs/get-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///   - delivery_id:
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id,
                    delivery_id: Components.Parameters.delivery_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.hook_hyphen_delivery)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook_hyphen_delivery {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/get(orgs/get-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Redeliver a delivery for an organization webhook
    ///
    /// Redeliver a delivery for a webhook configured in an organization.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)`.
    public enum orgs_sol_redeliver_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "orgs/redeliver-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///   - delivery_id:
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id,
                    delivery_id: Components.Parameters.delivery_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.orgs_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts/post(orgs/redeliver-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Ping an organization webhook
    ///
    /// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
    /// to be sent to the hook.
    ///
    /// You must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
    /// webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/hooks/{hook_id}/pings`.
    /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/pings/post(orgs/ping-webhook)`.
    public enum orgs_sol_ping_hyphen_webhook {
        public static let id: Swift.String = "orgs/ping-webhook"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/pings/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/pings/POST/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/pings/POST/path/hook_id`.
                public var hook_id: Components.Parameters.hook_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - hook_id: The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
                public init(
                    org: Components.Parameters.org,
                    hook_id: Components.Parameters.hook_hyphen_id
                ) {
                    self.org = org
                    self.hook_id = hook_id
                }
            }
            public var path: Operations.orgs_sol_ping_hyphen_webhook.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/hooks/{hook_id}/pings/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_ping_hyphen_webhook.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_ping_hyphen_webhook.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_ping_hyphen_webhook.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_ping_hyphen_webhook.Input.Path,
                headers: Operations.orgs_sol_ping_hyphen_webhook.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/pings/post(orgs/ping-webhook)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_ping_hyphen_webhook.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_ping_hyphen_webhook.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/hooks/{hook_id}/pings/post(orgs/ping-webhook)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List app installations for an organization
    ///
    /// Lists all GitHub Apps in an organization. The installation count includes
    /// all GitHub Apps installed on repositories in the organization.
    ///
    /// The authenticated user must be an organization owner to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installations/get(orgs/list-app-installations)`.
    public enum orgs_sol_list_hyphen_app_hyphen_installations {
        public static let id: Swift.String = "orgs/list-app-installations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_app_hyphen_installations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_app_hyphen_installations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Path,
                query: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/content/json/installations`.
                        public var installations: [Components.Schemas.installation]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - installations:
                        public init(
                            total_count: Swift.Int,
                            installations: [Components.Schemas.installation]
                        ) {
                            self.total_count = total_count
                            self.installations = installations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case installations
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/installations/GET/responses/200/content/application\/json`.
                    case json(Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/installations/get(orgs/list-app-installations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_app_hyphen_installations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pending organization invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/get(orgs/list-pending-invitations)`.
    public enum orgs_sol_list_hyphen_pending_hyphen_invitations {
        public static let id: Swift.String = "orgs/list-pending-invitations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/role`.
                @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case admin = "admin"
                    case direct_member = "direct_member"
                    case billing_manager = "billing_manager"
                    case hiring_manager = "hiring_manager"
                }
                /// Filter invitations by their member role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/role`.
                public var role: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query.rolePayload?
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/invitation_source`.
                @frozen public enum invitation_sourcePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case member = "member"
                    case scim = "scim"
                }
                /// Filter invitations by their invitation source.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/query/invitation_source`.
                public var invitation_source: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query.invitation_sourcePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - role: Filter invitations by their member role.
                ///   - invitation_source: Filter invitations by their invitation source.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    role: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query.rolePayload? = nil,
                    invitation_source: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query.invitation_sourcePayload? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.role = role
                    self.invitation_source = invitation_source
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Path,
                query: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/get(orgs/list-pending-invitations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_pending_hyphen_invitations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/get(orgs/list-pending-invitations)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an organization invitation
    ///
    /// Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /orgs/{org}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)`.
    public enum orgs_sol_create_hyphen_invitation {
        public static let id: Swift.String = "orgs/create-invitation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_invitation.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_invitation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_invitation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_invitation.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json/invitee_id`.
                    public var invitee_id: Swift.Int?
                    /// **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// The role for the new member. 
                    ///  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
                    ///  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
                    ///  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
                    ///  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                        case admin = "admin"
                        case direct_member = "direct_member"
                        case billing_manager = "billing_manager"
                        case reinstate = "reinstate"
                    }
                    /// The role for the new member. 
                    ///  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
                    ///  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
                    ///  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
                    ///  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json/role`.
                    public var role: Operations.orgs_sol_create_hyphen_invitation.Input.Body.jsonPayload.rolePayload?
                    /// Specify IDs for the teams you want to invite new members to.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/json/team_ids`.
                    public var team_ids: [Swift.Int]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - invitee_id: **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
                    ///   - email: **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
                    ///   - role: The role for the new member. 
                    ///   - team_ids: Specify IDs for the teams you want to invite new members to.
                    public init(
                        invitee_id: Swift.Int? = nil,
                        email: Swift.String? = nil,
                        role: Operations.orgs_sol_create_hyphen_invitation.Input.Body.jsonPayload.rolePayload? = nil,
                        team_ids: [Swift.Int]? = nil
                    ) {
                        self.invitee_id = invitee_id
                        self.email = email
                        self.role = role
                        self.team_ids = team_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case invitee_id
                        case email
                        case role
                        case team_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_invitation.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_invitation.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_invitation.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_invitation.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_invitation.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_invitation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_invitation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_create_hyphen_invitation.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_create_hyphen_invitation.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.orgs_sol_create_hyphen_invitation.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.orgs_sol_create_hyphen_invitation.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/post(orgs/create-invitation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Cancel an organization invitation
    ///
    /// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/invitations/{invitation_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)`.
    public enum orgs_sol_cancel_hyphen_invitation {
        public static let id: Swift.String = "orgs/cancel-invitation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/DELETE/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - invitation_id: The unique identifier of the invitation.
                public init(
                    org: Components.Parameters.org,
                    invitation_id: Components.Parameters.invitation_hyphen_id
                ) {
                    self.org = org
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.orgs_sol_cancel_hyphen_invitation.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_cancel_hyphen_invitation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_cancel_hyphen_invitation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_cancel_hyphen_invitation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_cancel_hyphen_invitation.Input.Path,
                headers: Operations.orgs_sol_cancel_hyphen_invitation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_cancel_hyphen_invitation.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_cancel_hyphen_invitation.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/delete(orgs/cancel-invitation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization invitation teams
    ///
    /// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/invitations/{invitation_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/teams/get(orgs/list-invitation-teams)`.
    public enum orgs_sol_list_hyphen_invitation_hyphen_teams {
        public static let id: Swift.String = "orgs/list-invitation-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the invitation.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/path/invitation_id`.
                public var invitation_id: Components.Parameters.invitation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - invitation_id: The unique identifier of the invitation.
                public init(
                    org: Components.Parameters.org,
                    invitation_id: Components.Parameters.invitation_hyphen_id
                ) {
                    self.org = org
                    self.invitation_id = invitation_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Path,
                query: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/invitations/{invitation_id}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/teams/get(orgs/list-invitation-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_invitation_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/invitations/{invitation_id}/teams/get(orgs/list-invitation-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization members
    ///
    /// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/get(orgs/list-members)`.
    public enum orgs_sol_list_hyphen_members {
        public static let id: Swift.String = "orgs/list-members"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_members.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case _2fa_disabled = "2fa_disabled"
                    case all = "all"
                }
                /// Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/filter`.
                public var filter: Operations.orgs_sol_list_hyphen_members.Input.Query.filterPayload?
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/role`.
                @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                    case all = "all"
                    case admin = "admin"
                    case member = "member"
                }
                /// Filter members returned by their role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/role`.
                public var role: Operations.orgs_sol_list_hyphen_members.Input.Query.rolePayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
                ///   - role: Filter members returned by their role.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.orgs_sol_list_hyphen_members.Input.Query.filterPayload? = nil,
                    role: Operations.orgs_sol_list_hyphen_members.Input.Query.rolePayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.role = role
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_members.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_members.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_members.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_members.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_members.Input.Path,
                query: Operations.orgs_sol_list_hyphen_members.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_members.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_members.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_members.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_members.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_members.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/get(orgs/list-members)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_members.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_members.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/get(orgs/list-members)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check organization membership for a user
    ///
    /// Check if a user is, publicly or privately, a member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)`.
    public enum orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/check-membership-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if requester is an organization member and user is a member
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/GET/responses/302/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Response if requester is not an organization member
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if requester is an organization member and user is not a member
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/get(orgs/check-membership-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_check_hyphen_membership_hyphen_for_hyphen_user.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove an organization member
    ///
    /// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/delete(orgs/remove-member)`.
    public enum orgs_sol_remove_hyphen_member {
        public static let id: Swift.String = "orgs/remove-member"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_member.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/members/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_member.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_member.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_remove_hyphen_member.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_remove_hyphen_member.Input.Path,
                headers: Operations.orgs_sol_remove_hyphen_member.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/delete(orgs/remove-member)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_remove_hyphen_member.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_remove_hyphen_member.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/members/{username}/delete(orgs/remove-member)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get organization membership for a user
    ///
    /// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)`.
    public enum orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/get-membership-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/get(orgs/get-membership-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set organization membership for a user
    ///
    /// Only authenticated organization owners can add a member to the organization or update the member's role.
    ///
    /// *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    ///     
    /// *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
    ///
    /// **Rate limits**
    ///
    /// To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)`.
    public enum orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/set-membership-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The role to give the user in the organization. Can be one of:  
                    ///  * `admin` - The user will become an owner of the organization.  
                    ///  * `member` - The user will become a non-owner member of the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/requestBody/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                        case admin = "admin"
                        case member = "member"
                    }
                    /// The role to give the user in the organization. Can be one of:  
                    ///  * `admin` - The user will become an owner of the organization.  
                    ///  * `member` - The user will become a non-owner member of the organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/requestBody/json/role`.
                    public var role: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body.jsonPayload.rolePayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role to give the user in the organization. Can be one of:  
                    public init(role: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body.jsonPayload.rolePayload? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init(),
                body: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_set_hyphen_membership_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/put(orgs/set-membership-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove organization membership for a user
    ///
    /// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
    ///
    /// If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)`.
    public enum orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/remove-membership-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/memberships/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_remove_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/memberships/{username}/delete(orgs/remove-membership-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization fine-grained permissions for an organization
    ///
    /// Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-fine-grained-permissions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)`.
    public enum orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions {
        public static let id: Swift.String = "orgs/list-organization-fine-grained-permissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-fine-grained-permissions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-fine-grained-permissions/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-fine-grained-permissions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Path,
                headers: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-fine-grained-permissions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-fine-grained-permissions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_fine_hyphen_grained_hyphen_permission])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_fine_hyphen_grained_hyphen_permission] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_organization_hyphen_fine_hyphen_grained_hyphen_permissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-fine-grained-permissions/get(orgs/list-organization-fine-grained-permissions)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all organization roles for an organization
    ///
    /// Lists the organization roles available in this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)`.
    public enum orgs_sol_list_hyphen_org_hyphen_roles {
        public static let id: Swift.String = "orgs/list-org-roles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_roles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_roles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Path,
                headers: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// The total number of organization roles available to the organization.
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int?
                        /// The list of organization roles available to the organization.
                        ///
                        /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/responses/200/content/json/roles`.
                        public var roles: [Components.Schemas.organization_hyphen_role]?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count: The total number of organization roles available to the organization.
                        ///   - roles: The list of organization roles available to the organization.
                        public init(
                            total_count: Swift.Int? = nil,
                            roles: [Components.Schemas.organization_hyphen_role]? = nil
                        ) {
                            self.total_count = total_count
                            self.roles = roles
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case roles
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/GET/responses/200/content/application\/json`.
                    case json(Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response - list of organization roles
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_org_hyphen_roles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/get(orgs/list-org-roles)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a custom organization role
    ///
    /// Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/organization-roles`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)`.
    public enum orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role {
        public static let id: Swift.String = "orgs/create-custom-organization-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the custom role.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// A short description about the intended usage of this role or what permissions it grants.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A list of additional permissions included in this role.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody/json/permissions`.
                    public var permissions: [Swift.String]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the custom role.
                    ///   - description: A short description about the intended usage of this role or what permissions it grants.
                    ///   - permissions: A list of additional permissions included in this role.
                    public init(
                        name: Swift.String,
                        description: Swift.String? = nil,
                        permissions: [Swift.String]
                    ) {
                        self.name = name
                        self.description = description
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_role)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_role {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.orgs_sol_create_hyphen_custom_hyphen_organization_hyphen_role.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/post(orgs/create-custom-organization-role)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove all organization roles for a team
    ///
    /// Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/delete(orgs/revoke-all-org-roles-team)`.
    public enum orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team {
        public static let id: Swift.String = "orgs/revoke-all-org-roles-team"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/delete(orgs/revoke-all-org-roles-team)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_team.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Assign an organization role to a team
    ///
    /// Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)`.
    public enum orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role {
        public static let id: Swift.String = "orgs/assign-team-to-org-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/PUT/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/PUT/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Response if the organization, team or role does not exist.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Response if the organization roles feature is not enabled for the organization, or validation failed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/put(orgs/assign-team-to-org-role)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_assign_hyphen_team_hyphen_to_hyphen_org_hyphen_role.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove an organization role from a team
    ///
    /// Removes an organization role from a team. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/delete(orgs/revoke-org-role-team)`.
    public enum orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team {
        public static let id: Swift.String = "orgs/revoke-org-role-team"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/DELETE/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/teams/{team_slug}/{role_id}/delete(orgs/revoke-org-role-team)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_team.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove all organization roles for a user
    ///
    /// Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/delete(orgs/revoke-all-org-roles-user)`.
    public enum orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user {
        public static let id: Swift.String = "orgs/revoke-all-org-roles-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/delete(orgs/revoke-all-org-roles-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_revoke_hyphen_all_hyphen_org_hyphen_roles_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Assign an organization role to a user
    ///
    /// Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)`.
    public enum orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role {
        public static let id: Swift.String = "orgs/assign-user-to-org-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/PUT/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.username = username
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Response if the organization, user or role does not exist.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Response if the organization roles feature is not enabled enabled for the organization, the validation failed, or the user is not an organization member.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/put(orgs/assign-user-to-org-role)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_assign_hyphen_user_hyphen_to_hyphen_org_hyphen_role.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove an organization role from a user
    ///
    /// Remove an organization role from a user. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/delete(orgs/revoke-org-role-user)`.
    public enum orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user {
        public static let id: Swift.String = "orgs/revoke-org-role-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/users/{username}/{role_id}/DELETE/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.username = username
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/users/{username}/{role_id}/delete(orgs/revoke-org-role-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_revoke_hyphen_org_hyphen_role_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get an organization role
    ///
    /// Gets an organization role that is available to this organization. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)`.
    public enum orgs_sol_get_hyphen_org_hyphen_role {
        public static let id: Swift.String = "orgs/get-org-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_org_hyphen_role.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_org_hyphen_role.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_org_hyphen_role.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_role)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_role {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_org_hyphen_role.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_org_hyphen_role.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_org_hyphen_role.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_org_hyphen_role.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/get(orgs/get-org-role)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a custom organization role
    ///
    /// Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)`.
    public enum orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role {
        public static let id: Swift.String = "orgs/patch-custom-organization-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the custom role.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// A short description about the intended usage of this role or what permissions it grants.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// A list of additional permissions included in this role.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody/json/permissions`.
                    public var permissions: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the custom role.
                    ///   - description: A short description about the intended usage of this role or what permissions it grants.
                    ///   - permissions: A list of additional permissions included in this role.
                    public init(
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        permissions: [Swift.String]? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Path,
                headers: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Headers = .init(),
                body: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_role)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_role {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_patch_hyphen_custom_hyphen_organization_hyphen_role.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/patch(orgs/patch-custom-organization-role)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a custom organization role.
    ///
    /// Deletes a custom organization role. For more information on custom organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/organization-roles/{role_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/delete(orgs/delete-custom-organization-role)`.
    public enum orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role {
        public static let id: Swift.String = "orgs/delete-custom-organization-role"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/DELETE/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/delete(orgs/delete-custom-organization-role)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_delete_hyphen_custom_hyphen_organization_hyphen_role.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List teams that are assigned to an organization role
    ///
    /// Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)`.
    public enum orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams {
        public static let id: Swift.String = "orgs/list-org-role-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Path,
                query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response - List of assigned teams
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Response if the organization or role does not exist.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Response if the organization roles feature is not enabled or validation failed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/teams/get(orgs/list-org-role-teams)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_teams.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List users that are assigned to an organization role
    ///
    /// Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
    ///
    /// To use this endpoint, you must be an administrator for the organization.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/organization-roles/{role_id}/users`.
    /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)`.
    public enum orgs_sol_list_hyphen_org_hyphen_role_hyphen_users {
        public static let id: Swift.String = "orgs/list-org-role-users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the role.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/path/role_id`.
                public var role_id: Components.Parameters.role_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - role_id: The unique identifier of the role.
                public init(
                    org: Components.Parameters.org,
                    role_id: Components.Parameters.role_hyphen_id
                ) {
                    self.org = org
                    self.role_id = role_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Path,
                query: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/organization-roles/{role_id}/users/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response - List of assigned users
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Response if the organization or role does not exist.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Response if the organization roles feature is not enabled or validation failed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/organization-roles/{role_id}/users/get(orgs/list-org-role-users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_list_hyphen_org_hyphen_role_hyphen_users.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List outside collaborators for an organization
    ///
    /// List all users who are outside collaborators of an organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/outside_collaborators`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/get(orgs/list-outside-collaborators)`.
    public enum orgs_sol_list_hyphen_outside_hyphen_collaborators {
        public static let id: Swift.String = "orgs/list-outside-collaborators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case _2fa_disabled = "2fa_disabled"
                    case all = "all"
                }
                /// Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/query/filter`.
                public var filter: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Query.filterPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Query.filterPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Path,
                query: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/get(orgs/list-outside-collaborators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_outside_hyphen_collaborators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Convert an organization member to outside collaborator
    ///
    /// When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)`.
    public enum orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator {
        public static let id: Swift.String = "orgs/convert-member-to-outside-collaborator"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/requestBody/json/async`.
                    public var async: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - async: When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
                    public init(async: Swift.Bool? = nil) {
                        self.async = async
                    }
                    public enum CodingKeys: String, CodingKey {
                        case async
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Path,
                headers: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Headers = .init(),
                body: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/responses/202/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `jsonPayload`.
                        public init() {}
                        public init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/PUT/responses/202/content/application\/json`.
                    case json(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// User is getting converted asynchronously
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// User was converted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.orgs_sol_convert_hyphen_member_hyphen_to_hyphen_outside_hyphen_collaborator.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/put(orgs/convert-member-to-outside-collaborator)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove outside collaborator from an organization
    ///
    /// Removing a user from this list will remove them from all the organization's repositories.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/outside_collaborators/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/delete(orgs/remove-outside-collaborator)`.
    public enum orgs_sol_remove_hyphen_outside_hyphen_collaborator {
        public static let id: Swift.String = "orgs/remove-outside-collaborator"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Path,
                headers: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/delete(orgs/remove-outside-collaborator)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/responses/422/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/responses/422/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/responses/422/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/outside_collaborators/{username}/DELETE/responses/422/content/application\/json`.
                    case json(Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable Entity if user is a member of the organization
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/outside_collaborators/{username}/delete(orgs/remove-outside-collaborator)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_remove_hyphen_outside_hyphen_collaborator.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List requests to access organization resources with fine-grained personal access tokens
    ///
    /// Lists requests from organization members to access organization resources with a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)`.
    public enum orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests {
        public static let id: Swift.String = "orgs/list-pat-grant-requests"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/page`.
                public var page: Components.Parameters.page?
                /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
                @frozen public enum personal_hyphen_access_hyphen_token_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                }
                /// The property by which to sort the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/sort`.
                public var sort: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// A list of owner usernames to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/owner`.
                public var owner: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_owner?
                /// The name of the repository to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/repository`.
                public var repository: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_repository?
                /// The permission to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/permission`.
                public var permission: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_permission?
                /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/last_used_before`.
                public var last_used_before: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_before?
                /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/query/last_used_after`.
                public var last_used_after: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_after?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - sort: The property by which to sort the results.
                ///   - direction: The direction to sort the results by.
                ///   - owner: A list of owner usernames to use to filter the results.
                ///   - repository: The name of the repository to use to filter the results.
                ///   - permission: The permission to use to filter the results.
                ///   - last_used_before: Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - last_used_after: Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    sort: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    owner: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_owner? = nil,
                    repository: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_repository? = nil,
                    permission: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_permission? = nil,
                    last_used_before: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_before? = nil,
                    last_used_after: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_after? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.sort = sort
                    self.direction = direction
                    self.owner = owner
                    self.repository = repository
                    self.permission = permission
                    self.last_used_before = last_used_before
                    self.last_used_after = last_used_after
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Path,
                query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant_hyphen_request] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/get(orgs/list-pat-grant-requests)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_requests.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Review requests to access organization resources with fine-grained personal access tokens
    ///
    /// Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)`.
    public enum orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk {
        public static let id: Swift.String = "orgs/review-pat-grant-requests-in-bulk"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/json/pat_request_ids`.
                    public var pat_request_ids: [Swift.Int]?
                    /// Action to apply to the requests.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/json/action`.
                    @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                        case approve = "approve"
                        case deny = "deny"
                    }
                    /// Action to apply to the requests.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/json/action`.
                    public var action: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body.jsonPayload.actionPayload
                    /// Reason for approving or denying the requests. Max 1024 characters.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/json/reason`.
                    public var reason: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - pat_request_ids: Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
                    ///   - action: Action to apply to the requests.
                    ///   - reason: Reason for approving or denying the requests. Max 1024 characters.
                    public init(
                        pat_request_ids: [Swift.Int]? = nil,
                        action: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body.jsonPayload.actionPayload,
                        reason: Swift.String? = nil
                    ) {
                        self.pat_request_ids = pat_request_ids
                        self.action = action
                        self.reason = reason
                    }
                    public enum CodingKeys: String, CodingKey {
                        case pat_request_ids
                        case action
                        case reason
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Path,
                headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Headers = .init(),
                body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_requests_hyphen_in_hyphen_bulk.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/post(orgs/review-pat-grant-requests-in-bulk)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Review a request to access organization resources with a fine-grained personal access token
    ///
    /// Approves or denies a pending request to access organization resources via a fine-grained personal access token.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-token-requests/{pat_request_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)`.
    public enum orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request {
        public static let id: Swift.String = "orgs/review-pat-grant-request"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the request for access via fine-grained personal access token.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/path/pat_request_id`.
                public var pat_request_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - pat_request_id: Unique identifier of the request for access via fine-grained personal access token.
                public init(
                    org: Components.Parameters.org,
                    pat_request_id: Swift.Int
                ) {
                    self.org = org
                    self.pat_request_id = pat_request_id
                }
            }
            public var path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Action to apply to the request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody/json/action`.
                    @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                        case approve = "approve"
                        case deny = "deny"
                    }
                    /// Action to apply to the request.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody/json/action`.
                    public var action: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body.jsonPayload.actionPayload
                    /// Reason for approving or denying the request. Max 1024 characters.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody/json/reason`.
                    public var reason: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Action to apply to the request.
                    ///   - reason: Reason for approving or denying the request. Max 1024 characters.
                    public init(
                        action: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body.jsonPayload.actionPayload,
                        reason: Swift.String? = nil
                    ) {
                        self.action = action
                        self.reason = reason
                    }
                    public enum CodingKeys: String, CodingKey {
                        case action
                        case reason
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Path,
                headers: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Headers = .init(),
                body: Operations.orgs_sol_review_hyphen_pat_hyphen_grant_hyphen_request.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/post(orgs/review-pat-grant-request)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories requested to be accessed by a fine-grained personal access token
    ///
    /// Lists the repositories a fine-grained personal access token request is requesting access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)`.
    public enum orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories {
        public static let id: Swift.String = "orgs/list-pat-grant-request-repositories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the request for access via fine-grained personal access token.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/path/pat_request_id`.
                public var pat_request_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - pat_request_id: Unique identifier of the request for access via fine-grained personal access token.
                public init(
                    org: Components.Parameters.org,
                    pat_request_id: Swift.Int
                ) {
                    self.org = org
                    self.pat_request_id = pat_request_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Path,
                query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories/get(orgs/list-pat-grant-request-repositories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_request_hyphen_repositories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List fine-grained personal access tokens with access to organization resources
    ///
    /// Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)`.
    public enum orgs_sol_list_hyphen_pat_hyphen_grants {
        public static let id: Swift.String = "orgs/list-pat-grants"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/page`.
                public var page: Components.Parameters.page?
                /// - Remark: Generated from `#/components/parameters/personal-access-token-sort`.
                @frozen public enum personal_hyphen_access_hyphen_token_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created_at = "created_at"
                }
                /// The property by which to sort the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/sort`.
                public var sort: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// A list of owner usernames to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/owner`.
                public var owner: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_owner?
                /// The name of the repository to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/repository`.
                public var repository: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_repository?
                /// The permission to use to filter the results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/permission`.
                public var permission: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_permission?
                /// Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/last_used_before`.
                public var last_used_before: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_before?
                /// Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/query/last_used_after`.
                public var last_used_after: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_after?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - sort: The property by which to sort the results.
                ///   - direction: The direction to sort the results by.
                ///   - owner: A list of owner usernames to use to filter the results.
                ///   - repository: The name of the repository to use to filter the results.
                ///   - permission: The permission to use to filter the results.
                ///   - last_used_before: Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - last_used_after: Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    sort: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    owner: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_owner? = nil,
                    repository: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_repository? = nil,
                    permission: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_permission? = nil,
                    last_used_before: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_before? = nil,
                    last_used_after: Components.Parameters.personal_hyphen_access_hyphen_token_hyphen_after? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.sort = sort
                    self.direction = direction
                    self.owner = owner
                    self.repository = repository
                    self.permission = permission
                    self.last_used_before = last_used_before
                    self.last_used_after = last_used_after
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grants.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grants.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Path,
                query: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_programmatic_hyphen_access_hyphen_grant] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/get(orgs/list-pat-grants)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_pat_hyphen_grants.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update the access to organization resources via fine-grained personal access tokens
    ///
    /// Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)`.
    public enum orgs_sol_update_hyphen_pat_hyphen_accesses {
        public static let id: Swift.String = "orgs/update-pat-accesses"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Action to apply to the fine-grained personal access token.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody/json/action`.
                    @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                        case revoke = "revoke"
                    }
                    /// Action to apply to the fine-grained personal access token.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody/json/action`.
                    public var action: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body.jsonPayload.actionPayload
                    /// The IDs of the fine-grained personal access tokens.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody/json/pat_ids`.
                    public var pat_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Action to apply to the fine-grained personal access token.
                    ///   - pat_ids: The IDs of the fine-grained personal access tokens.
                    public init(
                        action: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body.jsonPayload.actionPayload,
                        pat_ids: [Swift.Int]
                    ) {
                        self.action = action
                        self.pat_ids = pat_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case action
                        case pat_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Path,
                headers: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Headers = .init(),
                body: Operations.orgs_sol_update_hyphen_pat_hyphen_accesses.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/post(orgs/update-pat-accesses)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update the access a fine-grained personal access token has to organization resources
    ///
    /// Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/personal-access-tokens/{pat_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)`.
    public enum orgs_sol_update_hyphen_pat_hyphen_access {
        public static let id: Swift.String = "orgs/update-pat-access"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/path/org`.
                public var org: Components.Parameters.org
                /// The unique identifier of the fine-grained personal access token.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/path/pat_id`.
                public var pat_id: Components.Parameters.fine_hyphen_grained_hyphen_personal_hyphen_access_hyphen_token_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - pat_id: The unique identifier of the fine-grained personal access token.
                public init(
                    org: Components.Parameters.org,
                    pat_id: Components.Parameters.fine_hyphen_grained_hyphen_personal_hyphen_access_hyphen_token_hyphen_id
                ) {
                    self.org = org
                    self.pat_id = pat_id
                }
            }
            public var path: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_pat_hyphen_access.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_pat_hyphen_access.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Action to apply to the fine-grained personal access token.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/requestBody/json/action`.
                    @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                        case revoke = "revoke"
                    }
                    /// Action to apply to the fine-grained personal access token.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/requestBody/json/action`.
                    public var action: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body.jsonPayload.actionPayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Action to apply to the fine-grained personal access token.
                    public init(action: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body.jsonPayload.actionPayload) {
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Path,
                headers: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Headers = .init(),
                body: Operations.orgs_sol_update_hyphen_pat_hyphen_access.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/post(orgs/update-pat-access)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories a fine-grained personal access token has access to
    ///
    /// Lists the repositories a fine-grained personal access token has access to.
    ///
    /// Only GitHub Apps can use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)`.
    public enum orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories {
        public static let id: Swift.String = "orgs/list-pat-grant-repositories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// Unique identifier of the fine-grained personal access token.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/path/pat_id`.
                public var pat_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - pat_id: Unique identifier of the fine-grained personal access token.
                public init(
                    org: Components.Parameters.org,
                    pat_id: Swift.Int
                ) {
                    self.org = org
                    self.pat_id = pat_id
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Path,
                query: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.internal_error)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.internal_error {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/personal-access-tokens/{pat_id}/repositories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/personal-access-tokens/{pat_id}/repositories/get(orgs/list-pat-grant-repositories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_pat_hyphen_grant_hyphen_repositories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all custom properties for an organization
    ///
    /// Gets all custom properties defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)`.
    public enum orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties {
        public static let id: Swift.String = "orgs/get-all-custom-properties"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.org_hyphen_custom_hyphen_property])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.org_hyphen_custom_hyphen_property] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_all_hyphen_custom_hyphen_properties.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/get(orgs/get-all-custom-properties)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update custom properties for an organization
    ///
    /// Creates new or updates existing custom properties defined for an organization in a batch.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/schema`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)`.
    public enum orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties {
        public static let id: Swift.String = "orgs/create-or-update-custom-properties"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The array of custom properties to create or update.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/requestBody/json/properties`.
                    public var properties: [Components.Schemas.org_hyphen_custom_hyphen_property]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - properties: The array of custom properties to create or update.
                    public init(properties: [Components.Schemas.org_hyphen_custom_hyphen_property]) {
                        self.properties = properties
                    }
                    public enum CodingKeys: String, CodingKey {
                        case properties
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/PATCH/responses/200/content/application\/json`.
                    case json([Components.Schemas.org_hyphen_custom_hyphen_property])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.org_hyphen_custom_hyphen_property] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/patch(orgs/create-or-update-custom-properties)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a custom property for an organization
    ///
    /// Gets a custom property that is defined for an organization.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)`.
    public enum orgs_sol_get_hyphen_custom_hyphen_property {
        public static let id: Swift.String = "orgs/get-custom-property"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The custom property name. The name is case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/path/custom_property_name`.
                public var custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - custom_property_name: The custom property name. The name is case sensitive.
                public init(
                    org: Components.Parameters.org,
                    custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                ) {
                    self.org = org
                    self.custom_property_name = custom_property_name
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_custom_hyphen_property.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_custom_hyphen_property.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_custom_hyphen_property)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_custom_hyphen_property {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_custom_hyphen_property.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/get(orgs/get-custom-property)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update a custom property for an organization
    ///
    /// Creates a new or updates an existing custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    /// - An administrator for the organization.
    /// - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)`.
    public enum orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property {
        public static let id: Swift.String = "orgs/create-or-update-custom-property"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The custom property name. The name is case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/path/custom_property_name`.
                public var custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - custom_property_name: The custom property name. The name is case sensitive.
                public init(
                    org: Components.Parameters.org,
                    custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                ) {
                    self.org = org
                    self.custom_property_name = custom_property_name
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The type of the value for the property
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/value_type`.
                    @frozen public enum value_typePayload: String, Codable, Hashable, Sendable {
                        case string = "string"
                        case single_select = "single_select"
                    }
                    /// The type of the value for the property
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/value_type`.
                    public var value_type: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body.jsonPayload.value_typePayload
                    /// Whether the property is required.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/required`.
                    public var required: Swift.Bool?
                    /// Default value of the property
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/default_value`.
                    @frozen public enum default_valuePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/default_value/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/default_value/case2`.
                        case case2([Swift.String])
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// Default value of the property
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/default_value`.
                    public var default_value: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body.jsonPayload.default_valuePayload?
                    /// Short description of the property
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/description`.
                    public var description: Swift.String?
                    /// An ordered list of the allowed values of the property.
                    /// The property can have up to 200 allowed values.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/json/allowed_values`.
                    public var allowed_values: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - value_type: The type of the value for the property
                    ///   - required: Whether the property is required.
                    ///   - default_value: Default value of the property
                    ///   - description: Short description of the property
                    ///   - allowed_values: An ordered list of the allowed values of the property.
                    public init(
                        value_type: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body.jsonPayload.value_typePayload,
                        required: Swift.Bool? = nil,
                        default_value: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body.jsonPayload.default_valuePayload? = nil,
                        description: Swift.String? = nil,
                        allowed_values: [Swift.String]? = nil
                    ) {
                        self.value_type = value_type
                        self.required = required
                        self.default_value = default_value
                        self.description = description
                        self.allowed_values = allowed_values
                    }
                    public enum CodingKeys: String, CodingKey {
                        case value_type
                        case required
                        case default_value
                        case description
                        case allowed_values
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_custom_hyphen_property)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_custom_hyphen_property {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_property.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/put(orgs/create-or-update-custom-property)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a custom property for an organization
    ///
    /// Removes a custom property that is defined for an organization.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/properties/schema/{custom_property_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)`.
    public enum orgs_sol_remove_hyphen_custom_hyphen_property {
        public static let id: Swift.String = "orgs/remove-custom-property"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The custom property name. The name is case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/DELETE/path/custom_property_name`.
                public var custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - custom_property_name: The custom property name. The name is case sensitive.
                public init(
                    org: Components.Parameters.org,
                    custom_property_name: Components.Parameters.custom_hyphen_property_hyphen_name
                ) {
                    self.org = org
                    self.custom_property_name = custom_property_name
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/schema/{custom_property_name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_custom_hyphen_property.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_remove_hyphen_custom_hyphen_property.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Path,
                headers: Operations.orgs_sol_remove_hyphen_custom_hyphen_property.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// A header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.no_content)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.no_content {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/schema/{custom_property_name}/delete(orgs/remove-custom-property)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List custom property values for organization repositories
    ///
    /// Lists organization repositories with all of their custom property values.
    /// Organization members can read these properties.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)`.
    public enum orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos {
        public static let id: Swift.String = "orgs/list-custom-properties-values-for-repos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/query/repository_query`.
                public var repository_query: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - repository_query: Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    repository_query: Swift.String? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.repository_query = repository_query
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path,
                query: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.org_hyphen_repo_hyphen_custom_hyphen_property_hyphen_values])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.org_hyphen_repo_hyphen_custom_hyphen_property_hyphen_values] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/get(orgs/list-custom-properties-values-for-repos)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update custom property values for organization repositories
    ///
    /// Create new or update existing custom property values for repositories in a batch that belong to an organization.
    /// Each target repository will have its custom property values updated to match the values provided in the request.
    ///
    /// A maximum of 30 repositories can be updated in a single request.
    ///
    /// Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
    ///
    /// To use this endpoint, the authenticated user must be one of:
    ///   - An administrator for the organization.
    ///   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/properties/values`.
    /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)`.
    public enum orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos {
        public static let id: Swift.String = "orgs/create-or-update-custom-properties-values-for-repos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The names of repositories that the custom property values will be applied to.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/requestBody/json/repository_names`.
                    public var repository_names: [Swift.String]
                    /// List of custom property names and associated values to apply to the repositories.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/requestBody/json/properties`.
                    public var properties: [Components.Schemas.custom_hyphen_property_hyphen_value]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repository_names: The names of repositories that the custom property values will be applied to.
                    ///   - properties: List of custom property names and associated values to apply to the repositories.
                    public init(
                        repository_names: [Swift.String],
                        properties: [Components.Schemas.custom_hyphen_property_hyphen_value]
                    ) {
                        self.repository_names = repository_names
                        self.properties = properties
                    }
                    public enum CodingKeys: String, CodingKey {
                        case repository_names
                        case properties
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/properties/values/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Path,
                headers: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Headers = .init(),
                body: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when custom property values are successfully created or updated
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_create_hyphen_or_hyphen_update_hyphen_custom_hyphen_properties_hyphen_values_hyphen_for_hyphen_repos.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/properties/values/patch(orgs/create-or-update-custom-properties-values-for-repos)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public organization members
    ///
    /// Members of an organization can choose to have their membership publicized or not.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/get(orgs/list-public-members)`.
    public enum orgs_sol_list_hyphen_public_hyphen_members {
        public static let id: Swift.String = "orgs/list-public-members"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_public_hyphen_members.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_public_hyphen_members.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Path,
                query: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_public_hyphen_members.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/public_members/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/get(orgs/list-public-members)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_public_hyphen_members.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check public organization membership for a user
    ///
    /// Check if the provided user is a public member of the organization.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/get(orgs/check-public-membership-for-user)`.
    public enum orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/check-public-membership-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if user is a public member
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/get(orgs/check-public-membership-for-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if user is not a public member
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/get(orgs/check-public-membership-for-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.orgs_sol_check_hyphen_public_hyphen_membership_hyphen_for_hyphen_user.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Set public organization membership for the authenticated user
    ///
    /// The user can publicize their own membership. (A user cannot publicize the membership for another user.)
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/put(orgs/set-public-membership-for-authenticated-user)`.
    public enum orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/set-public-membership-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/put(orgs/set-public-membership-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_set_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/put(orgs/set-public-membership-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove public organization membership for the authenticated user
    ///
    /// Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/public_members/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/delete(orgs/remove-public-membership-for-authenticated-user)`.
    public enum orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/remove-public-membership-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/public_members/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/public_members/{username}/delete(orgs/remove-public-membership-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_remove_hyphen_public_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List security manager teams
    ///
    /// Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an administrator or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-managers`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/get(orgs/list-security-manager-teams)`.
    public enum orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams {
        public static let id: Swift.String = "orgs/list-security-manager-teams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Path,
                headers: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/get(orgs/list-security-manager-teams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_security_hyphen_manager_hyphen_teams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a security manager team
    ///
    /// Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/put(orgs/add-security-manager-team)`.
    public enum orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team {
        public static let id: Swift.String = "orgs/add-security-manager-team"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/PUT/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/put(orgs/add-security-manager-team)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// The organization has reached the maximum number of security manager teams.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/put(orgs/add-security-manager-team)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.orgs_sol_add_hyphen_security_hyphen_manager_hyphen_team.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove a security manager team
    ///
    /// Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
    ///
    /// The authenticated user must be an administrator for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/security-managers/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/delete(orgs/remove-security-manager-team)`.
    public enum orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team {
        public static let id: Swift.String = "orgs/remove-security-manager-team"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-managers/teams/{team_slug}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-managers/teams/{team_slug}/delete(orgs/remove-security-manager-team)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_remove_hyphen_security_hyphen_manager_hyphen_team.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Enable or disable a security feature for an organization
    ///
    /// Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/{security_product}/{enablement}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/{security_product}/{enablement}/post(orgs/enable-or-disable-security-product-on-all-org-repos)`.
    public enum orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos {
        public static let id: Swift.String = "orgs/enable-or-disable-security-product-on-all-org-repos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/path/org`.
                public var org: Components.Parameters.org
                /// - Remark: Generated from `#/components/parameters/security-product`.
                @frozen public enum security_hyphen_product: String, Codable, Hashable, Sendable {
                    case dependency_graph = "dependency_graph"
                    case dependabot_alerts = "dependabot_alerts"
                    case dependabot_security_updates = "dependabot_security_updates"
                    case advanced_security = "advanced_security"
                    case code_scanning_default_setup = "code_scanning_default_setup"
                    case secret_scanning = "secret_scanning"
                    case secret_scanning_push_protection = "secret_scanning_push_protection"
                }
                /// The security feature to enable or disable.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/path/security_product`.
                public var security_product: Components.Parameters.security_hyphen_product
                /// - Remark: Generated from `#/components/parameters/org-security-product-enablement`.
                @frozen public enum org_hyphen_security_hyphen_product_hyphen_enablement: String, Codable, Hashable, Sendable {
                    case enable_all = "enable_all"
                    case disable_all = "disable_all"
                }
                /// The action to take.
                ///
                /// `enable_all` means to enable the specified security feature for all repositories in the organization.
                /// `disable_all` means to disable the specified security feature for all repositories in the organization.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/path/enablement`.
                public var enablement: Components.Parameters.org_hyphen_security_hyphen_product_hyphen_enablement
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - security_product: The security feature to enable or disable.
                ///   - enablement: The action to take.
                public init(
                    org: Components.Parameters.org,
                    security_product: Components.Parameters.security_hyphen_product,
                    enablement: Components.Parameters.org_hyphen_security_hyphen_product_hyphen_enablement
                ) {
                    self.org = org
                    self.security_product = security_product
                    self.enablement = enablement
                }
            }
            public var path: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
                    /// If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/requestBody/json/query_suite`.
                    @frozen public enum query_suitePayload: String, Codable, Hashable, Sendable {
                        case _default = "default"
                        case extended = "extended"
                    }
                    /// CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
                    /// If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/requestBody/json/query_suite`.
                    public var query_suite: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body.jsonPayload.query_suitePayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - query_suite: CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
                    public init(query_suite: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body.jsonPayload.query_suitePayload? = nil) {
                        self.query_suite = query_suite
                    }
                    public enum CodingKeys: String, CodingKey {
                        case query_suite
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/{security_product}/{enablement}/POST/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Path,
                body: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Input.Body? = nil
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Action started
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/{security_product}/{enablement}/post(orgs/enable-or-disable-security-product-on-all-org-repos)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// The action could not be taken due to an in progress enablement, or a policy is preventing enablement
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/{security_product}/{enablement}/post(orgs/enable-or-disable-security-product-on-all-org-repos)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.orgs_sol_enable_hyphen_or_hyphen_disable_hyphen_security_hyphen_product_hyphen_on_hyphen_all_hyphen_org_hyphen_repos.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List organization memberships for the authenticated user
    ///
    /// Lists all of the authenticated user's organization memberships.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)`.
    public enum orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/list-memberships-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case active = "active"
                    case pending = "pending"
                }
                /// Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
                ///
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/query/state`.
                public var state: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.statePayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    state: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.statePayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.state = state
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.org_hyphen_membership])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.org_hyphen_membership] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_memberships_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/get(orgs/list-memberships-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization membership for the authenticated user
    ///
    /// If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
    ///
    /// - Remark: HTTP `GET /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)`.
    public enum orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/get-membership-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_get_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/get(orgs/get-membership-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an organization membership for the authenticated user
    ///
    /// Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
    ///
    /// - Remark: HTTP `PATCH /user/memberships/orgs/{org}`.
    /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)`.
    public enum orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/update-membership-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The state that the membership should be in. Only `"active"` will be accepted.
                    ///
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case active = "active"
                    }
                    /// The state that the membership should be in. Only `"active"` will be accepted.
                    ///
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/requestBody/json/state`.
                    public var state: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.statePayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - state: The state that the membership should be in. Only `"active"` will be accepted.
                    public init(state: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload.statePayload) {
                        self.state = state
                    }
                    public enum CodingKeys: String, CodingKey {
                        case state
                    }
                }
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/requestBody/content/application\/json`.
                case json(Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body.jsonPayload)
            }
            public var body: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init(),
                body: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/memberships/orgs/{org}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.org_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.org_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_update_hyphen_membership_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//user/memberships/orgs/{org}/patch(orgs/update-membership-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organizations for the authenticated user
    ///
    /// List organizations for the authenticated user.
    ///
    /// For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
    ///
    /// - Remark: HTTP `GET /user/orgs`.
    /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)`.
    public enum orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "orgs/list-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/orgs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/orgs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/orgs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/orgs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/orgs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/orgs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/orgs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/orgs/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/orgs/get(orgs/list-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organizations for a user
    ///
    /// List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
    ///
    /// This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
    ///
    /// - Remark: HTTP `GET /users/{username}/orgs`.
    /// - Remark: Generated from `#/paths//users/{username}/orgs/get(orgs/list-for-user)`.
    public enum orgs_sol_list_hyphen_for_hyphen_user {
        public static let id: Swift.String = "orgs/list-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orgs_sol_list_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Path,
                query: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.orgs_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/orgs/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/orgs/get(orgs/list-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orgs_sol_list_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
