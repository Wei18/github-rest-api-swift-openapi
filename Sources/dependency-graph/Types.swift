// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get a diff of the dependencies between commits
    ///
    /// Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)`.
    func dependency_hyphen_graph_sol_diff_hyphen_range(_ input: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input) async throws -> Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output
    /// Export a software bill of materials (SBOM) for a repository.
    ///
    /// Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/sbom`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)`.
    func dependency_hyphen_graph_sol_export_hyphen_sbom(_ input: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input) async throws -> Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output
    /// Create a snapshot of dependencies for a repository
    ///
    /// Create a new snapshot of a repository's dependencies.
    ///
    /// The authenticated user must have access to the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dependency-graph/snapshots`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/snapshots/post(dependency-graph/create-repository-snapshot)`.
    func dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot(_ input: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input) async throws -> Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get a diff of the dependencies between commits
    ///
    /// Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)`.
    public func dependency_hyphen_graph_sol_diff_hyphen_range(
        path: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Path,
        query: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Query = .init(),
        headers: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Headers = .init()
    ) async throws -> Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output {
        try await dependency_hyphen_graph_sol_diff_hyphen_range(Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Export a software bill of materials (SBOM) for a repository.
    ///
    /// Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/sbom`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)`.
    public func dependency_hyphen_graph_sol_export_hyphen_sbom(
        path: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Path,
        headers: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Headers = .init()
    ) async throws -> Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output {
        try await dependency_hyphen_graph_sol_export_hyphen_sbom(Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a snapshot of dependencies for a repository
    ///
    /// Create a new snapshot of a repository's dependencies.
    ///
    /// The authenticated user must have access to the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dependency-graph/snapshots`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/snapshots/post(dependency-graph/create-repository-snapshot)`.
    public func dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot(
        path: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Path,
        headers: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Headers = .init(),
        body: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Body
    ) async throws -> Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output {
        try await dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot(Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff`.
        public struct dependency_hyphen_graph_hyphen_diffPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/change_type`.
            @frozen public enum change_typePayload: String, Codable, Hashable, Sendable {
                case added = "added"
                case removed = "removed"
            }
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/change_type`.
            public var change_type: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.change_typePayload
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/manifest`.
            public var manifest: Swift.String
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/ecosystem`.
            public var ecosystem: Swift.String
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/version`.
            public var version: Swift.String
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/package_url`.
            public var package_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/license`.
            public var license: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/source_repository_url`.
            public var source_repository_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilitiesPayload`.
            public struct vulnerabilitiesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilitiesPayload/severity`.
                public var severity: Swift.String
                /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilitiesPayload/advisory_ghsa_id`.
                public var advisory_ghsa_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilitiesPayload/advisory_summary`.
                public var advisory_summary: Swift.String
                /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilitiesPayload/advisory_url`.
                public var advisory_url: Swift.String
                /// Creates a new `vulnerabilitiesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - severity:
                ///   - advisory_ghsa_id:
                ///   - advisory_summary:
                ///   - advisory_url:
                public init(
                    severity: Swift.String,
                    advisory_ghsa_id: Swift.String,
                    advisory_summary: Swift.String,
                    advisory_url: Swift.String
                ) {
                    self.severity = severity
                    self.advisory_ghsa_id = advisory_ghsa_id
                    self.advisory_summary = advisory_summary
                    self.advisory_url = advisory_url
                }
                public enum CodingKeys: String, CodingKey {
                    case severity
                    case advisory_ghsa_id
                    case advisory_summary
                    case advisory_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilities`.
            public typealias vulnerabilitiesPayload = [Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.vulnerabilitiesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/vulnerabilities`.
            public var vulnerabilities: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.vulnerabilitiesPayload
            /// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/scope`.
            @frozen public enum scopePayload: String, Codable, Hashable, Sendable {
                case unknown = "unknown"
                case runtime = "runtime"
                case development = "development"
            }
            /// Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency_hyphen_graph_hyphen_diff/scope`.
            public var scope: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.scopePayload
            /// Creates a new `dependency_hyphen_graph_hyphen_diffPayload`.
            ///
            /// - Parameters:
            ///   - change_type:
            ///   - manifest:
            ///   - ecosystem:
            ///   - name:
            ///   - version:
            ///   - package_url:
            ///   - license:
            ///   - source_repository_url:
            ///   - vulnerabilities:
            ///   - scope: Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
            public init(
                change_type: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.change_typePayload,
                manifest: Swift.String,
                ecosystem: Swift.String,
                name: Swift.String,
                version: Swift.String,
                package_url: Swift.String? = nil,
                license: Swift.String? = nil,
                source_repository_url: Swift.String? = nil,
                vulnerabilities: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.vulnerabilitiesPayload,
                scope: Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload.scopePayload
            ) {
                self.change_type = change_type
                self.manifest = manifest
                self.ecosystem = ecosystem
                self.name = name
                self.version = version
                self.package_url = package_url
                self.license = license
                self.source_repository_url = source_repository_url
                self.vulnerabilities = vulnerabilities
                self.scope = scope
            }
            public enum CodingKeys: String, CodingKey {
                case change_type
                case manifest
                case ecosystem
                case name
                case version
                case package_url
                case license
                case source_repository_url
                case vulnerabilities
                case scope
            }
        }
        /// A diff of the dependencies between two commits.
        ///
        /// - Remark: Generated from `#/components/schemas/dependency-graph-diff`.
        public typealias dependency_hyphen_graph_hyphen_diff = [Components.Schemas.dependency_hyphen_graph_hyphen_diffPayload]
        /// A schema for the SPDX JSON format returned by the Dependency Graph.
        ///
        /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom`.
        public struct dependency_hyphen_graph_hyphen_spdx_hyphen_sbom: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom`.
            public struct sbomPayload: Codable, Hashable, Sendable {
                /// The SPDX identifier for the SPDX document.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/SPDXID`.
                public var SPDXID: Swift.String
                /// The version of the SPDX specification that this document conforms to.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/spdxVersion`.
                public var spdxVersion: Swift.String
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/creationInfo`.
                public struct creationInfoPayload: Codable, Hashable, Sendable {
                    /// The date and time the SPDX document was created.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/creationInfo/created`.
                    public var created: Swift.String
                    /// The tools that were used to generate the SPDX document.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/creationInfo/creators`.
                    public var creators: [Swift.String]
                    /// Creates a new `creationInfoPayload`.
                    ///
                    /// - Parameters:
                    ///   - created: The date and time the SPDX document was created.
                    ///   - creators: The tools that were used to generate the SPDX document.
                    public init(
                        created: Swift.String,
                        creators: [Swift.String]
                    ) {
                        self.created = created
                        self.creators = creators
                    }
                    public enum CodingKeys: String, CodingKey {
                        case created
                        case creators
                    }
                }
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/creationInfo`.
                public var creationInfo: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.creationInfoPayload
                /// The name of the SPDX document.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/name`.
                public var name: Swift.String
                /// The license under which the SPDX document is licensed.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/dataLicense`.
                public var dataLicense: Swift.String
                /// The name of the repository that the SPDX document describes.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/documentDescribes`.
                public var documentDescribes: [Swift.String]
                /// The namespace for the SPDX document.
                ///
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/documentNamespace`.
                public var documentNamespace: Swift.String
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload`.
                public struct packagesPayloadPayload: Codable, Hashable, Sendable {
                    /// A unique SPDX identifier for the package.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/SPDXID`.
                    public var SPDXID: Swift.String?
                    /// The name of the package.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/name`.
                    public var name: Swift.String?
                    /// The version of the package. If the package does not have an exact version specified,
                    /// a version range is given.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/versionInfo`.
                    public var versionInfo: Swift.String?
                    /// The location where the package can be downloaded,
                    /// or NOASSERTION if this has not been determined.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/downloadLocation`.
                    public var downloadLocation: Swift.String?
                    /// Whether the package's file content has been subjected to
                    /// analysis during the creation of the SPDX document.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/filesAnalyzed`.
                    public var filesAnalyzed: Swift.Bool?
                    /// The license of the package as determined while creating the SPDX document.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/licenseConcluded`.
                    public var licenseConcluded: Swift.String?
                    /// The license of the package as declared by its author, or NOASSERTION if this information
                    /// was not available when the SPDX document was created.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/licenseDeclared`.
                    public var licenseDeclared: Swift.String?
                    /// The distribution source of this package, or NOASSERTION if this was not determined.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/supplier`.
                    public var supplier: Swift.String?
                    /// The copyright holders of the package, and any dates present with those notices, if available.
                    ///
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/copyrightText`.
                    public var copyrightText: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefsPayload`.
                    public struct externalRefsPayloadPayload: Codable, Hashable, Sendable {
                        /// The category of reference to an external resource this reference refers to.
                        ///
                        /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefsPayload/referenceCategory`.
                        public var referenceCategory: Swift.String
                        /// A locator for the particular external resource this reference refers to.
                        ///
                        /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefsPayload/referenceLocator`.
                        public var referenceLocator: Swift.String
                        /// The category of reference to an external resource this reference refers to.
                        ///
                        /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefsPayload/referenceType`.
                        public var referenceType: Swift.String
                        /// Creates a new `externalRefsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - referenceCategory: The category of reference to an external resource this reference refers to.
                        ///   - referenceLocator: A locator for the particular external resource this reference refers to.
                        ///   - referenceType: The category of reference to an external resource this reference refers to.
                        public init(
                            referenceCategory: Swift.String,
                            referenceLocator: Swift.String,
                            referenceType: Swift.String
                        ) {
                            self.referenceCategory = referenceCategory
                            self.referenceLocator = referenceLocator
                            self.referenceType = referenceType
                        }
                        public enum CodingKeys: String, CodingKey {
                            case referenceCategory
                            case referenceLocator
                            case referenceType
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefs`.
                    public typealias externalRefsPayload = [Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayloadPayload.externalRefsPayloadPayload]
                    /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packagesPayload/externalRefs`.
                    public var externalRefs: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayloadPayload.externalRefsPayload?
                    /// Creates a new `packagesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - SPDXID: A unique SPDX identifier for the package.
                    ///   - name: The name of the package.
                    ///   - versionInfo: The version of the package. If the package does not have an exact version specified,
                    ///   - downloadLocation: The location where the package can be downloaded,
                    ///   - filesAnalyzed: Whether the package's file content has been subjected to
                    ///   - licenseConcluded: The license of the package as determined while creating the SPDX document.
                    ///   - licenseDeclared: The license of the package as declared by its author, or NOASSERTION if this information
                    ///   - supplier: The distribution source of this package, or NOASSERTION if this was not determined.
                    ///   - copyrightText: The copyright holders of the package, and any dates present with those notices, if available.
                    ///   - externalRefs:
                    public init(
                        SPDXID: Swift.String? = nil,
                        name: Swift.String? = nil,
                        versionInfo: Swift.String? = nil,
                        downloadLocation: Swift.String? = nil,
                        filesAnalyzed: Swift.Bool? = nil,
                        licenseConcluded: Swift.String? = nil,
                        licenseDeclared: Swift.String? = nil,
                        supplier: Swift.String? = nil,
                        copyrightText: Swift.String? = nil,
                        externalRefs: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayloadPayload.externalRefsPayload? = nil
                    ) {
                        self.SPDXID = SPDXID
                        self.name = name
                        self.versionInfo = versionInfo
                        self.downloadLocation = downloadLocation
                        self.filesAnalyzed = filesAnalyzed
                        self.licenseConcluded = licenseConcluded
                        self.licenseDeclared = licenseDeclared
                        self.supplier = supplier
                        self.copyrightText = copyrightText
                        self.externalRefs = externalRefs
                    }
                    public enum CodingKeys: String, CodingKey {
                        case SPDXID
                        case name
                        case versionInfo
                        case downloadLocation
                        case filesAnalyzed
                        case licenseConcluded
                        case licenseDeclared
                        case supplier
                        case copyrightText
                        case externalRefs
                    }
                }
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packages`.
                public typealias packagesPayload = [Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom/packages`.
                public var packages: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayload
                /// Creates a new `sbomPayload`.
                ///
                /// - Parameters:
                ///   - SPDXID: The SPDX identifier for the SPDX document.
                ///   - spdxVersion: The version of the SPDX specification that this document conforms to.
                ///   - creationInfo:
                ///   - name: The name of the SPDX document.
                ///   - dataLicense: The license under which the SPDX document is licensed.
                ///   - documentDescribes: The name of the repository that the SPDX document describes.
                ///   - documentNamespace: The namespace for the SPDX document.
                ///   - packages:
                public init(
                    SPDXID: Swift.String,
                    spdxVersion: Swift.String,
                    creationInfo: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.creationInfoPayload,
                    name: Swift.String,
                    dataLicense: Swift.String,
                    documentDescribes: [Swift.String],
                    documentNamespace: Swift.String,
                    packages: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload.packagesPayload
                ) {
                    self.SPDXID = SPDXID
                    self.spdxVersion = spdxVersion
                    self.creationInfo = creationInfo
                    self.name = name
                    self.dataLicense = dataLicense
                    self.documentDescribes = documentDescribes
                    self.documentNamespace = documentNamespace
                    self.packages = packages
                }
                public enum CodingKeys: String, CodingKey {
                    case SPDXID
                    case spdxVersion
                    case creationInfo
                    case name
                    case dataLicense
                    case documentDescribes
                    case documentNamespace
                    case packages
                }
            }
            /// - Remark: Generated from `#/components/schemas/dependency-graph-spdx-sbom/sbom`.
            public var sbom: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload
            /// Creates a new `dependency_hyphen_graph_hyphen_spdx_hyphen_sbom`.
            ///
            /// - Parameters:
            ///   - sbom:
            public init(sbom: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom.sbomPayload) {
                self.sbom = sbom
            }
            public enum CodingKeys: String, CodingKey {
                case sbom
            }
        }
        /// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
        ///
        /// - Remark: Generated from `#/components/schemas/metadata`.
        public struct metadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/metadata/additionalProperties`.
            public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/metadata/additionalProperties/value1`.
                public var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/metadata/additionalProperties/value2`.
                public var value2: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/metadata/additionalProperties/value3`.
                public var value3: Swift.Bool?
                /// Creates a new `additionalPropertiesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                ///   - value3:
                public init(
                    value1: Swift.String? = nil,
                    value2: Swift.Double? = nil,
                    value3: Swift.Bool? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                    self.value3 = value3
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value3 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2,
                            value3
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2,
                        value3
                    ])
                }
            }
            /// A container of undocumented properties.
            public var additionalProperties: [String: Components.Schemas.metadata.additionalPropertiesPayload?]
            /// Creates a new `metadata`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            public init(additionalProperties: [String: Components.Schemas.metadata.additionalPropertiesPayload?] = .init()) {
                self.additionalProperties = additionalProperties
            }
            public init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/dependency`.
        public struct dependency: Codable, Hashable, Sendable {
            /// Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/package_url`.
            public var package_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependency/metadata`.
            public var metadata: Components.Schemas.metadata?
            /// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/relationship`.
            @frozen public enum relationshipPayload: String, Codable, Hashable, Sendable {
                case direct = "direct"
                case indirect = "indirect"
            }
            /// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/relationship`.
            public var relationship: Components.Schemas.dependency.relationshipPayload?
            /// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/scope`.
            @frozen public enum scopePayload: String, Codable, Hashable, Sendable {
                case runtime = "runtime"
                case development = "development"
            }
            /// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/scope`.
            public var scope: Components.Schemas.dependency.scopePayload?
            /// Array of package-url (PURLs) of direct child dependencies.
            ///
            /// - Remark: Generated from `#/components/schemas/dependency/dependencies`.
            public var dependencies: [Swift.String]?
            /// Creates a new `dependency`.
            ///
            /// - Parameters:
            ///   - package_url: Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
            ///   - metadata:
            ///   - relationship: A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
            ///   - scope: A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
            ///   - dependencies: Array of package-url (PURLs) of direct child dependencies.
            public init(
                package_url: Swift.String? = nil,
                metadata: Components.Schemas.metadata? = nil,
                relationship: Components.Schemas.dependency.relationshipPayload? = nil,
                scope: Components.Schemas.dependency.scopePayload? = nil,
                dependencies: [Swift.String]? = nil
            ) {
                self.package_url = package_url
                self.metadata = metadata
                self.relationship = relationship
                self.scope = scope
                self.dependencies = dependencies
            }
            public enum CodingKeys: String, CodingKey {
                case package_url
                case metadata
                case relationship
                case scope
                case dependencies
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                package_url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .package_url
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.metadata.self,
                    forKey: .metadata
                )
                relationship = try container.decodeIfPresent(
                    Components.Schemas.dependency.relationshipPayload.self,
                    forKey: .relationship
                )
                scope = try container.decodeIfPresent(
                    Components.Schemas.dependency.scopePayload.self,
                    forKey: .scope
                )
                dependencies = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .dependencies
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package_url",
                    "metadata",
                    "relationship",
                    "scope",
                    "dependencies"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/manifest`.
        public struct manifest: Codable, Hashable, Sendable {
            /// The name of the manifest.
            ///
            /// - Remark: Generated from `#/components/schemas/manifest/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/manifest/file`.
            public struct filePayload: Codable, Hashable, Sendable {
                /// The path of the manifest file relative to the root of the Git repository.
                ///
                /// - Remark: Generated from `#/components/schemas/manifest/file/source_location`.
                public var source_location: Swift.String?
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - source_location: The path of the manifest file relative to the root of the Git repository.
                public init(source_location: Swift.String? = nil) {
                    self.source_location = source_location
                }
                public enum CodingKeys: String, CodingKey {
                    case source_location
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    source_location = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .source_location
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "source_location"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/manifest/file`.
            public var file: Components.Schemas.manifest.filePayload?
            /// - Remark: Generated from `#/components/schemas/manifest/metadata`.
            public var metadata: Components.Schemas.metadata?
            /// A collection of resolved package dependencies.
            ///
            /// - Remark: Generated from `#/components/schemas/manifest/resolved`.
            public struct resolvedPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.dependency]
                /// Creates a new `resolvedPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.dependency] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A collection of resolved package dependencies.
            ///
            /// - Remark: Generated from `#/components/schemas/manifest/resolved`.
            public var resolved: Components.Schemas.manifest.resolvedPayload?
            /// Creates a new `manifest`.
            ///
            /// - Parameters:
            ///   - name: The name of the manifest.
            ///   - file:
            ///   - metadata:
            ///   - resolved: A collection of resolved package dependencies.
            public init(
                name: Swift.String,
                file: Components.Schemas.manifest.filePayload? = nil,
                metadata: Components.Schemas.metadata? = nil,
                resolved: Components.Schemas.manifest.resolvedPayload? = nil
            ) {
                self.name = name
                self.file = file
                self.metadata = metadata
                self.resolved = resolved
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case file
                case metadata
                case resolved
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                file = try container.decodeIfPresent(
                    Components.Schemas.manifest.filePayload.self,
                    forKey: .file
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.metadata.self,
                    forKey: .metadata
                )
                resolved = try container.decodeIfPresent(
                    Components.Schemas.manifest.resolvedPayload.self,
                    forKey: .resolved
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name",
                    "file",
                    "metadata",
                    "resolved"
                ])
            }
        }
        /// Create a new snapshot of a repository's dependencies.
        ///
        /// - Remark: Generated from `#/components/schemas/snapshot`.
        public struct snapshot: Codable, Hashable, Sendable {
            /// The version of the repository snapshot submission.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/version`.
            public var version: Swift.Int
            /// - Remark: Generated from `#/components/schemas/snapshot/job`.
            public struct jobPayload: Codable, Hashable, Sendable {
                /// The external ID of the job.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/job/id`.
                public var id: Swift.String
                /// Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/job/correlator`.
                public var correlator: Swift.String
                /// The url for the job.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/job/html_url`.
                public var html_url: Swift.String?
                /// Creates a new `jobPayload`.
                ///
                /// - Parameters:
                ///   - id: The external ID of the job.
                ///   - correlator: Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
                ///   - html_url: The url for the job.
                public init(
                    id: Swift.String,
                    correlator: Swift.String,
                    html_url: Swift.String? = nil
                ) {
                    self.id = id
                    self.correlator = correlator
                    self.html_url = html_url
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case correlator
                    case html_url
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    id = try container.decode(
                        Swift.String.self,
                        forKey: .id
                    )
                    correlator = try container.decode(
                        Swift.String.self,
                        forKey: .correlator
                    )
                    html_url = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .html_url
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "id",
                        "correlator",
                        "html_url"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/snapshot/job`.
            public var job: Components.Schemas.snapshot.jobPayload
            /// The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/sha`.
            public var sha: Swift.String
            /// The repository branch that triggered this snapshot.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/ref`.
            public var ref: Swift.String
            /// A description of the detector used.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/detector`.
            public struct detectorPayload: Codable, Hashable, Sendable {
                /// The name of the detector used.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/detector/name`.
                public var name: Swift.String
                /// The version of the detector used.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/detector/version`.
                public var version: Swift.String
                /// The url of the detector used.
                ///
                /// - Remark: Generated from `#/components/schemas/snapshot/detector/url`.
                public var url: Swift.String
                /// Creates a new `detectorPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the detector used.
                ///   - version: The version of the detector used.
                ///   - url: The url of the detector used.
                public init(
                    name: Swift.String,
                    version: Swift.String,
                    url: Swift.String
                ) {
                    self.name = name
                    self.version = version
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case version
                    case url
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    name = try container.decode(
                        Swift.String.self,
                        forKey: .name
                    )
                    version = try container.decode(
                        Swift.String.self,
                        forKey: .version
                    )
                    url = try container.decode(
                        Swift.String.self,
                        forKey: .url
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "name",
                        "version",
                        "url"
                    ])
                }
            }
            /// A description of the detector used.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/detector`.
            public var detector: Components.Schemas.snapshot.detectorPayload
            /// - Remark: Generated from `#/components/schemas/snapshot/metadata`.
            public var metadata: Components.Schemas.metadata?
            /// A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/manifests`.
            public struct manifestsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.manifest]
                /// Creates a new `manifestsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.manifest] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/manifests`.
            public var manifests: Components.Schemas.snapshot.manifestsPayload?
            /// The time at which the snapshot was scanned.
            ///
            /// - Remark: Generated from `#/components/schemas/snapshot/scanned`.
            public var scanned: Foundation.Date
            /// Creates a new `snapshot`.
            ///
            /// - Parameters:
            ///   - version: The version of the repository snapshot submission.
            ///   - job:
            ///   - sha: The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
            ///   - ref: The repository branch that triggered this snapshot.
            ///   - detector: A description of the detector used.
            ///   - metadata:
            ///   - manifests: A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
            ///   - scanned: The time at which the snapshot was scanned.
            public init(
                version: Swift.Int,
                job: Components.Schemas.snapshot.jobPayload,
                sha: Swift.String,
                ref: Swift.String,
                detector: Components.Schemas.snapshot.detectorPayload,
                metadata: Components.Schemas.metadata? = nil,
                manifests: Components.Schemas.snapshot.manifestsPayload? = nil,
                scanned: Foundation.Date
            ) {
                self.version = version
                self.job = job
                self.sha = sha
                self.ref = ref
                self.detector = detector
                self.metadata = metadata
                self.manifests = manifests
                self.scanned = scanned
            }
            public enum CodingKeys: String, CodingKey {
                case version
                case job
                case sha
                case ref
                case detector
                case metadata
                case manifests
                case scanned
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                version = try container.decode(
                    Swift.Int.self,
                    forKey: .version
                )
                job = try container.decode(
                    Components.Schemas.snapshot.jobPayload.self,
                    forKey: .job
                )
                sha = try container.decode(
                    Swift.String.self,
                    forKey: .sha
                )
                ref = try container.decode(
                    Swift.String.self,
                    forKey: .ref
                )
                detector = try container.decode(
                    Components.Schemas.snapshot.detectorPayload.self,
                    forKey: .detector
                )
                metadata = try container.decodeIfPresent(
                    Components.Schemas.metadata.self,
                    forKey: .metadata
                )
                manifests = try container.decodeIfPresent(
                    Components.Schemas.snapshot.manifestsPayload.self,
                    forKey: .manifests
                )
                scanned = try container.decode(
                    Foundation.Date.self,
                    forKey: .scanned
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "version",
                    "job",
                    "sha",
                    "ref",
                    "detector",
                    "metadata",
                    "manifests",
                    "scanned"
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The full path, relative to the repository root, of the dependency manifest file.
        ///
        /// - Remark: Generated from `#/components/parameters/manifest-path`.
        public typealias manifest_hyphen_path = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct dependency_review_forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/dependency_review_forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/dependency_review_forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.dependency_review_forbidden.Body
            /// Creates a new `dependency_review_forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.dependency_review_forbidden.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get a diff of the dependencies between commits
    ///
    /// Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)`.
    public enum dependency_hyphen_graph_sol_diff_hyphen_range {
        public static let id: Swift.String = "dependency-graph/diff-range"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/path/basehead`.
                public var basehead: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - basehead: The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    basehead: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.basehead = basehead
                }
            }
            public var path: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The full path, relative to the repository root, of the dependency manifest file.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/query/name`.
                public var name: Components.Parameters.manifest_hyphen_path?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name: The full path, relative to the repository root, of the dependency manifest file.
                public init(name: Components.Parameters.manifest_hyphen_path? = nil) {
                    self.name = name
                }
            }
            public var query: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_diff_hyphen_range.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_diff_hyphen_range.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Path,
                query: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Query = .init(),
                headers: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/compare/{basehead}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependency_hyphen_graph_hyphen_diff)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependency_hyphen_graph_hyphen_diff {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok.Headers = .init(),
                    body: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependency_hyphen_graph_sol_diff_hyphen_range.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Response if GitHub Advanced Security is not enabled for this repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/compare/{basehead}/get(dependency-graph/diff-range)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.dependency_review_forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.dependency_review_forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Export a software bill of materials (SBOM) for a repository.
    ///
    /// Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependency-graph/sbom`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)`.
    public enum dependency_hyphen_graph_sol_export_hyphen_sbom {
        public static let id: Swift.String = "dependency-graph/export-sbom"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Path,
                headers: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/sbom/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependency_hyphen_graph_hyphen_spdx_hyphen_sbom {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok.Headers = .init(),
                    body: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependency_hyphen_graph_sol_export_hyphen_sbom.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/sbom/get(dependency-graph/export-sbom)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a snapshot of dependencies for a repository
    ///
    /// Create a new snapshot of a repository's dependencies.
    ///
    /// The authenticated user must have access to the repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/dependency-graph/snapshots`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/snapshots/post(dependency-graph/create-repository-snapshot)`.
    public enum dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot {
        public static let id: Swift.String = "dependency-graph/create-repository-snapshot"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.snapshot)
            }
            public var body: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Path,
                headers: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Headers = .init(),
                body: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// ID of the created snapshot.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/json/id`.
                        public var id: Swift.Int
                        /// The time at which the snapshot was created.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/json/created_at`.
                        public var created_at: Swift.String
                        /// Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/json/result`.
                        public var result: Swift.String
                        /// A message providing further details about the result, such as why the dependencies were not updated.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/json/message`.
                        public var message: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id: ID of the created snapshot.
                        ///   - created_at: The time at which the snapshot was created.
                        ///   - result: Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
                        ///   - message: A message providing further details about the result, such as why the dependencies were not updated.
                        public init(
                            id: Swift.Int,
                            created_at: Swift.String,
                            result: Swift.String,
                            message: Swift.String
                        ) {
                            self.id = id
                            self.created_at = created_at
                            self.result = result
                            self.message = message
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case created_at
                            case result
                            case message
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependency-graph/snapshots/POST/responses/201/content/application\/json`.
                    case json(Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependency-graph/snapshots/post(dependency-graph/create-repository-snapshot)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.dependency_hyphen_graph_sol_create_hyphen_repository_hyphen_snapshot.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
