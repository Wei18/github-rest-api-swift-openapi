// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List issues assigned to the authenticated user
    ///
    /// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
    /// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
    /// necessarily assigned to you.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /issues`.
    /// - Remark: Generated from `#/paths//issues/get(issues/list)`.
    func issues_sol_list(_ input: Operations.issues_sol_list.Input) async throws -> Operations.issues_sol_list.Output
    /// List organization issues assigned to the authenticated user
    ///
    /// List issues in an organization assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/issues`.
    /// - Remark: Generated from `#/paths//orgs/{org}/issues/get(issues/list-for-org)`.
    func issues_sol_list_hyphen_for_hyphen_org(_ input: Operations.issues_sol_list_hyphen_for_hyphen_org.Input) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_org.Output
    /// List assignees
    ///
    /// Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/get(issues/list-assignees)`.
    func issues_sol_list_hyphen_assignees(_ input: Operations.issues_sol_list_hyphen_assignees.Input) async throws -> Operations.issues_sol_list_hyphen_assignees.Output
    /// Check if a user can be assigned
    ///
    /// Checks if a user has permission to be assigned to an issue in this repository.
    ///
    /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/{assignee}/get(issues/check-user-can-be-assigned)`.
    func issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned(_ input: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input) async throws -> Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    func issues_sol_list_hyphen_for_hyphen_repo(_ input: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_repo.Output
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    func issues_sol_create(_ input: Operations.issues_sol_create.Input) async throws -> Operations.issues_sol_create.Output
    /// List issue comments for a repository
    ///
    /// You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// By default, issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)`.
    func issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo(_ input: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input) async throws -> Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output
    /// Get an issue comment
    ///
    /// You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/get(issues/get-comment)`.
    func issues_sol_get_hyphen_comment(_ input: Operations.issues_sol_get_hyphen_comment.Input) async throws -> Operations.issues_sol_get_hyphen_comment.Output
    /// Update an issue comment
    ///
    /// You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/patch(issues/update-comment)`.
    func issues_sol_update_hyphen_comment(_ input: Operations.issues_sol_update_hyphen_comment.Input) async throws -> Operations.issues_sol_update_hyphen_comment.Output
    /// Delete an issue comment
    ///
    /// You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/delete(issues/delete-comment)`.
    func issues_sol_delete_hyphen_comment(_ input: Operations.issues_sol_delete_hyphen_comment.Input) async throws -> Operations.issues_sol_delete_hyphen_comment.Output
    /// List issue events for a repository
    ///
    /// Lists events for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/get(issues/list-events-for-repo)`.
    func issues_sol_list_hyphen_events_hyphen_for_hyphen_repo(_ input: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input) async throws -> Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output
    /// Get an issue event
    ///
    /// Gets a single event by the event id.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events/{event_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)`.
    func issues_sol_get_hyphen_event(_ input: Operations.issues_sol_get_hyphen_event.Input) async throws -> Operations.issues_sol_get_hyphen_event.Output
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    func issues_sol_get(_ input: Operations.issues_sol_get.Input) async throws -> Operations.issues_sol_get.Output
    /// Update an issue
    ///
    /// Issue owners and users with push access or Triage role can edit an issue.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    func issues_sol_update(_ input: Operations.issues_sol_update.Input) async throws -> Operations.issues_sol_update.Output
    /// Add assignees to an issue
    ///
    /// Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/post(issues/add-assignees)`.
    func issues_sol_add_hyphen_assignees(_ input: Operations.issues_sol_add_hyphen_assignees.Input) async throws -> Operations.issues_sol_add_hyphen_assignees.Output
    /// Remove assignees from an issue
    ///
    /// Removes one or more assignees from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/delete(issues/remove-assignees)`.
    func issues_sol_remove_hyphen_assignees(_ input: Operations.issues_sol_remove_hyphen_assignees.Input) async throws -> Operations.issues_sol_remove_hyphen_assignees.Output
    /// Check if a user can be assigned to a issue
    ///
    /// Checks if a user has permission to be assigned to a specific issue.
    ///
    /// If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/get(issues/check-user-can-be-assigned-to-issue)`.
    func issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue(_ input: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input) async throws -> Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output
    /// List issue comments
    ///
    /// You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// Issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)`.
    func issues_sol_list_hyphen_comments(_ input: Operations.issues_sol_list_hyphen_comments.Input) async throws -> Operations.issues_sol_list_hyphen_comments.Output
    /// Create an issue comment
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    func issues_sol_create_hyphen_comment(_ input: Operations.issues_sol_create_hyphen_comment.Input) async throws -> Operations.issues_sol_create_hyphen_comment.Output
    /// List issue events
    ///
    /// Lists all events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/events/get(issues/list-events)`.
    func issues_sol_list_hyphen_events(_ input: Operations.issues_sol_list_hyphen_events.Input) async throws -> Operations.issues_sol_list_hyphen_events.Output
    /// List labels for an issue
    ///
    /// Lists all labels for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)`.
    func issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue(_ input: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output
    /// Add labels to an issue
    ///
    /// Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. 
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)`.
    func issues_sol_add_hyphen_labels(_ input: Operations.issues_sol_add_hyphen_labels.Input) async throws -> Operations.issues_sol_add_hyphen_labels.Output
    /// Set labels for an issue
    ///
    /// Removes any previous labels and sets the new labels for an issue.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)`.
    func issues_sol_set_hyphen_labels(_ input: Operations.issues_sol_set_hyphen_labels.Input) async throws -> Operations.issues_sol_set_hyphen_labels.Output
    /// Remove all labels from an issue
    ///
    /// Removes all labels from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)`.
    func issues_sol_remove_hyphen_all_hyphen_labels(_ input: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input) async throws -> Operations.issues_sol_remove_hyphen_all_hyphen_labels.Output
    /// Remove a label from an issue
    ///
    /// Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)`.
    func issues_sol_remove_hyphen_label(_ input: Operations.issues_sol_remove_hyphen_label.Input) async throws -> Operations.issues_sol_remove_hyphen_label.Output
    /// Lock an issue
    ///
    /// Users with push access can lock an issue or pull request's conversation.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)`.
    func issues_sol_lock(_ input: Operations.issues_sol_lock.Input) async throws -> Operations.issues_sol_lock.Output
    /// Unlock an issue
    ///
    /// Users with push access can unlock an issue's conversation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)`.
    func issues_sol_unlock(_ input: Operations.issues_sol_unlock.Input) async throws -> Operations.issues_sol_unlock.Output
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    func issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline(_ input: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input) async throws -> Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output
    /// List labels for a repository
    ///
    /// Lists all labels for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(issues/list-labels-for-repo)`.
    func issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo(_ input: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output
    /// Create a label
    ///
    /// Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)`.
    func issues_sol_create_hyphen_label(_ input: Operations.issues_sol_create_hyphen_label.Input) async throws -> Operations.issues_sol_create_hyphen_label.Output
    /// Get a label
    ///
    /// Gets a label using the given name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(issues/get-label)`.
    func issues_sol_get_hyphen_label(_ input: Operations.issues_sol_get_hyphen_label.Input) async throws -> Operations.issues_sol_get_hyphen_label.Output
    /// Update a label
    ///
    /// Updates a label using the given label name.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(issues/update-label)`.
    func issues_sol_update_hyphen_label(_ input: Operations.issues_sol_update_hyphen_label.Input) async throws -> Operations.issues_sol_update_hyphen_label.Output
    /// Delete a label
    ///
    /// Deletes a label using the given label name.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(issues/delete-label)`.
    func issues_sol_delete_hyphen_label(_ input: Operations.issues_sol_delete_hyphen_label.Input) async throws -> Operations.issues_sol_delete_hyphen_label.Output
    /// List milestones
    ///
    /// Lists milestones for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/get(issues/list-milestones)`.
    func issues_sol_list_hyphen_milestones(_ input: Operations.issues_sol_list_hyphen_milestones.Input) async throws -> Operations.issues_sol_list_hyphen_milestones.Output
    /// Create a milestone
    ///
    /// Creates a milestone.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)`.
    func issues_sol_create_hyphen_milestone(_ input: Operations.issues_sol_create_hyphen_milestone.Input) async throws -> Operations.issues_sol_create_hyphen_milestone.Output
    /// Get a milestone
    ///
    /// Gets a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/get(issues/get-milestone)`.
    func issues_sol_get_hyphen_milestone(_ input: Operations.issues_sol_get_hyphen_milestone.Input) async throws -> Operations.issues_sol_get_hyphen_milestone.Output
    /// Update a milestone
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/patch(issues/update-milestone)`.
    func issues_sol_update_hyphen_milestone(_ input: Operations.issues_sol_update_hyphen_milestone.Input) async throws -> Operations.issues_sol_update_hyphen_milestone.Output
    /// Delete a milestone
    ///
    /// Deletes a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/delete(issues/delete-milestone)`.
    func issues_sol_delete_hyphen_milestone(_ input: Operations.issues_sol_delete_hyphen_milestone.Input) async throws -> Operations.issues_sol_delete_hyphen_milestone.Output
    /// List labels for issues in a milestone
    ///
    /// Lists labels for issues in a milestone.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/labels/get(issues/list-labels-for-milestone)`.
    func issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone(_ input: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output
    /// List user account issues assigned to the authenticated user
    ///
    /// List issues across owned and member repositories assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /user/issues`.
    /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)`.
    func issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List issues assigned to the authenticated user
    ///
    /// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
    /// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
    /// necessarily assigned to you.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /issues`.
    /// - Remark: Generated from `#/paths//issues/get(issues/list)`.
    public func issues_sol_list(
        query: Operations.issues_sol_list.Input.Query = .init(),
        headers: Operations.issues_sol_list.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list.Output {
        try await issues_sol_list(Operations.issues_sol_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// List organization issues assigned to the authenticated user
    ///
    /// List issues in an organization assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/issues`.
    /// - Remark: Generated from `#/paths//orgs/{org}/issues/get(issues/list-for-org)`.
    public func issues_sol_list_hyphen_for_hyphen_org(
        path: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Path,
        query: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_org.Output {
        try await issues_sol_list_hyphen_for_hyphen_org(Operations.issues_sol_list_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List assignees
    ///
    /// Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/get(issues/list-assignees)`.
    public func issues_sol_list_hyphen_assignees(
        path: Operations.issues_sol_list_hyphen_assignees.Input.Path,
        query: Operations.issues_sol_list_hyphen_assignees.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_assignees.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_assignees.Output {
        try await issues_sol_list_hyphen_assignees(Operations.issues_sol_list_hyphen_assignees.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check if a user can be assigned
    ///
    /// Checks if a user has permission to be assigned to an issue in this repository.
    ///
    /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/{assignee}/get(issues/check-user-can-be-assigned)`.
    public func issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned(
        path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Path,
        headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output {
        try await issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    public func issues_sol_list_hyphen_for_hyphen_repo(
        path: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_repo.Output {
        try await issues_sol_list_hyphen_for_hyphen_repo(Operations.issues_sol_list_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    public func issues_sol_create(
        path: Operations.issues_sol_create.Input.Path,
        headers: Operations.issues_sol_create.Input.Headers = .init(),
        body: Operations.issues_sol_create.Input.Body
    ) async throws -> Operations.issues_sol_create.Output {
        try await issues_sol_create(Operations.issues_sol_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List issue comments for a repository
    ///
    /// You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// By default, issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)`.
    public func issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo(
        path: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output {
        try await issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo(Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an issue comment
    ///
    /// You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/get(issues/get-comment)`.
    public func issues_sol_get_hyphen_comment(
        path: Operations.issues_sol_get_hyphen_comment.Input.Path,
        headers: Operations.issues_sol_get_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_get_hyphen_comment.Output {
        try await issues_sol_get_hyphen_comment(Operations.issues_sol_get_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an issue comment
    ///
    /// You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/patch(issues/update-comment)`.
    public func issues_sol_update_hyphen_comment(
        path: Operations.issues_sol_update_hyphen_comment.Input.Path,
        headers: Operations.issues_sol_update_hyphen_comment.Input.Headers = .init(),
        body: Operations.issues_sol_update_hyphen_comment.Input.Body
    ) async throws -> Operations.issues_sol_update_hyphen_comment.Output {
        try await issues_sol_update_hyphen_comment(Operations.issues_sol_update_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an issue comment
    ///
    /// You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/delete(issues/delete-comment)`.
    public func issues_sol_delete_hyphen_comment(path: Operations.issues_sol_delete_hyphen_comment.Input.Path) async throws -> Operations.issues_sol_delete_hyphen_comment.Output {
        try await issues_sol_delete_hyphen_comment(Operations.issues_sol_delete_hyphen_comment.Input(path: path))
    }
    /// List issue events for a repository
    ///
    /// Lists events for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/get(issues/list-events-for-repo)`.
    public func issues_sol_list_hyphen_events_hyphen_for_hyphen_repo(
        path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output {
        try await issues_sol_list_hyphen_events_hyphen_for_hyphen_repo(Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an issue event
    ///
    /// Gets a single event by the event id.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events/{event_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)`.
    public func issues_sol_get_hyphen_event(
        path: Operations.issues_sol_get_hyphen_event.Input.Path,
        headers: Operations.issues_sol_get_hyphen_event.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_get_hyphen_event.Output {
        try await issues_sol_get_hyphen_event(Operations.issues_sol_get_hyphen_event.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    public func issues_sol_get(
        path: Operations.issues_sol_get.Input.Path,
        headers: Operations.issues_sol_get.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_get.Output {
        try await issues_sol_get(Operations.issues_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access or Triage role can edit an issue.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    public func issues_sol_update(
        path: Operations.issues_sol_update.Input.Path,
        headers: Operations.issues_sol_update.Input.Headers = .init(),
        body: Operations.issues_sol_update.Input.Body? = nil
    ) async throws -> Operations.issues_sol_update.Output {
        try await issues_sol_update(Operations.issues_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Add assignees to an issue
    ///
    /// Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/post(issues/add-assignees)`.
    public func issues_sol_add_hyphen_assignees(
        path: Operations.issues_sol_add_hyphen_assignees.Input.Path,
        headers: Operations.issues_sol_add_hyphen_assignees.Input.Headers = .init(),
        body: Operations.issues_sol_add_hyphen_assignees.Input.Body? = nil
    ) async throws -> Operations.issues_sol_add_hyphen_assignees.Output {
        try await issues_sol_add_hyphen_assignees(Operations.issues_sol_add_hyphen_assignees.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove assignees from an issue
    ///
    /// Removes one or more assignees from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/delete(issues/remove-assignees)`.
    public func issues_sol_remove_hyphen_assignees(
        path: Operations.issues_sol_remove_hyphen_assignees.Input.Path,
        headers: Operations.issues_sol_remove_hyphen_assignees.Input.Headers = .init(),
        body: Operations.issues_sol_remove_hyphen_assignees.Input.Body? = nil
    ) async throws -> Operations.issues_sol_remove_hyphen_assignees.Output {
        try await issues_sol_remove_hyphen_assignees(Operations.issues_sol_remove_hyphen_assignees.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Check if a user can be assigned to a issue
    ///
    /// Checks if a user has permission to be assigned to a specific issue.
    ///
    /// If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/get(issues/check-user-can-be-assigned-to-issue)`.
    public func issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue(
        path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Path,
        headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output {
        try await issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input(
            path: path,
            headers: headers
        ))
    }
    /// List issue comments
    ///
    /// You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// Issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)`.
    public func issues_sol_list_hyphen_comments(
        path: Operations.issues_sol_list_hyphen_comments.Input.Path,
        query: Operations.issues_sol_list_hyphen_comments.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_comments.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_comments.Output {
        try await issues_sol_list_hyphen_comments(Operations.issues_sol_list_hyphen_comments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an issue comment
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    public func issues_sol_create_hyphen_comment(
        path: Operations.issues_sol_create_hyphen_comment.Input.Path,
        headers: Operations.issues_sol_create_hyphen_comment.Input.Headers = .init(),
        body: Operations.issues_sol_create_hyphen_comment.Input.Body
    ) async throws -> Operations.issues_sol_create_hyphen_comment.Output {
        try await issues_sol_create_hyphen_comment(Operations.issues_sol_create_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List issue events
    ///
    /// Lists all events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/events/get(issues/list-events)`.
    public func issues_sol_list_hyphen_events(
        path: Operations.issues_sol_list_hyphen_events.Input.Path,
        query: Operations.issues_sol_list_hyphen_events.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_events.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_events.Output {
        try await issues_sol_list_hyphen_events(Operations.issues_sol_list_hyphen_events.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List labels for an issue
    ///
    /// Lists all labels for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)`.
    public func issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue(
        path: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Path,
        query: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output {
        try await issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue(Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add labels to an issue
    ///
    /// Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. 
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)`.
    public func issues_sol_add_hyphen_labels(
        path: Operations.issues_sol_add_hyphen_labels.Input.Path,
        headers: Operations.issues_sol_add_hyphen_labels.Input.Headers = .init(),
        body: Operations.issues_sol_add_hyphen_labels.Input.Body? = nil
    ) async throws -> Operations.issues_sol_add_hyphen_labels.Output {
        try await issues_sol_add_hyphen_labels(Operations.issues_sol_add_hyphen_labels.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Set labels for an issue
    ///
    /// Removes any previous labels and sets the new labels for an issue.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)`.
    public func issues_sol_set_hyphen_labels(
        path: Operations.issues_sol_set_hyphen_labels.Input.Path,
        headers: Operations.issues_sol_set_hyphen_labels.Input.Headers = .init(),
        body: Operations.issues_sol_set_hyphen_labels.Input.Body? = nil
    ) async throws -> Operations.issues_sol_set_hyphen_labels.Output {
        try await issues_sol_set_hyphen_labels(Operations.issues_sol_set_hyphen_labels.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove all labels from an issue
    ///
    /// Removes all labels from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)`.
    public func issues_sol_remove_hyphen_all_hyphen_labels(
        path: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Path,
        headers: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_remove_hyphen_all_hyphen_labels.Output {
        try await issues_sol_remove_hyphen_all_hyphen_labels(Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a label from an issue
    ///
    /// Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)`.
    public func issues_sol_remove_hyphen_label(
        path: Operations.issues_sol_remove_hyphen_label.Input.Path,
        headers: Operations.issues_sol_remove_hyphen_label.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_remove_hyphen_label.Output {
        try await issues_sol_remove_hyphen_label(Operations.issues_sol_remove_hyphen_label.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lock an issue
    ///
    /// Users with push access can lock an issue or pull request's conversation.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)`.
    public func issues_sol_lock(
        path: Operations.issues_sol_lock.Input.Path,
        headers: Operations.issues_sol_lock.Input.Headers = .init(),
        body: Operations.issues_sol_lock.Input.Body? = nil
    ) async throws -> Operations.issues_sol_lock.Output {
        try await issues_sol_lock(Operations.issues_sol_lock.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Unlock an issue
    ///
    /// Users with push access can unlock an issue's conversation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)`.
    public func issues_sol_unlock(
        path: Operations.issues_sol_unlock.Input.Path,
        headers: Operations.issues_sol_unlock.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_unlock.Output {
        try await issues_sol_unlock(Operations.issues_sol_unlock.Input(
            path: path,
            headers: headers
        ))
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    public func issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline(
        path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Path,
        query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output {
        try await issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline(Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List labels for a repository
    ///
    /// Lists all labels for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(issues/list-labels-for-repo)`.
    public func issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo(
        path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output {
        try await issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo(Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a label
    ///
    /// Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)`.
    public func issues_sol_create_hyphen_label(
        path: Operations.issues_sol_create_hyphen_label.Input.Path,
        headers: Operations.issues_sol_create_hyphen_label.Input.Headers = .init(),
        body: Operations.issues_sol_create_hyphen_label.Input.Body
    ) async throws -> Operations.issues_sol_create_hyphen_label.Output {
        try await issues_sol_create_hyphen_label(Operations.issues_sol_create_hyphen_label.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a label
    ///
    /// Gets a label using the given name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(issues/get-label)`.
    public func issues_sol_get_hyphen_label(
        path: Operations.issues_sol_get_hyphen_label.Input.Path,
        headers: Operations.issues_sol_get_hyphen_label.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_get_hyphen_label.Output {
        try await issues_sol_get_hyphen_label(Operations.issues_sol_get_hyphen_label.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a label
    ///
    /// Updates a label using the given label name.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(issues/update-label)`.
    public func issues_sol_update_hyphen_label(
        path: Operations.issues_sol_update_hyphen_label.Input.Path,
        headers: Operations.issues_sol_update_hyphen_label.Input.Headers = .init(),
        body: Operations.issues_sol_update_hyphen_label.Input.Body? = nil
    ) async throws -> Operations.issues_sol_update_hyphen_label.Output {
        try await issues_sol_update_hyphen_label(Operations.issues_sol_update_hyphen_label.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a label
    ///
    /// Deletes a label using the given label name.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(issues/delete-label)`.
    public func issues_sol_delete_hyphen_label(path: Operations.issues_sol_delete_hyphen_label.Input.Path) async throws -> Operations.issues_sol_delete_hyphen_label.Output {
        try await issues_sol_delete_hyphen_label(Operations.issues_sol_delete_hyphen_label.Input(path: path))
    }
    /// List milestones
    ///
    /// Lists milestones for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/get(issues/list-milestones)`.
    public func issues_sol_list_hyphen_milestones(
        path: Operations.issues_sol_list_hyphen_milestones.Input.Path,
        query: Operations.issues_sol_list_hyphen_milestones.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_milestones.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_milestones.Output {
        try await issues_sol_list_hyphen_milestones(Operations.issues_sol_list_hyphen_milestones.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a milestone
    ///
    /// Creates a milestone.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)`.
    public func issues_sol_create_hyphen_milestone(
        path: Operations.issues_sol_create_hyphen_milestone.Input.Path,
        headers: Operations.issues_sol_create_hyphen_milestone.Input.Headers = .init(),
        body: Operations.issues_sol_create_hyphen_milestone.Input.Body
    ) async throws -> Operations.issues_sol_create_hyphen_milestone.Output {
        try await issues_sol_create_hyphen_milestone(Operations.issues_sol_create_hyphen_milestone.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a milestone
    ///
    /// Gets a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/get(issues/get-milestone)`.
    public func issues_sol_get_hyphen_milestone(
        path: Operations.issues_sol_get_hyphen_milestone.Input.Path,
        headers: Operations.issues_sol_get_hyphen_milestone.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_get_hyphen_milestone.Output {
        try await issues_sol_get_hyphen_milestone(Operations.issues_sol_get_hyphen_milestone.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a milestone
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/patch(issues/update-milestone)`.
    public func issues_sol_update_hyphen_milestone(
        path: Operations.issues_sol_update_hyphen_milestone.Input.Path,
        headers: Operations.issues_sol_update_hyphen_milestone.Input.Headers = .init(),
        body: Operations.issues_sol_update_hyphen_milestone.Input.Body? = nil
    ) async throws -> Operations.issues_sol_update_hyphen_milestone.Output {
        try await issues_sol_update_hyphen_milestone(Operations.issues_sol_update_hyphen_milestone.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a milestone
    ///
    /// Deletes a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/delete(issues/delete-milestone)`.
    public func issues_sol_delete_hyphen_milestone(
        path: Operations.issues_sol_delete_hyphen_milestone.Input.Path,
        headers: Operations.issues_sol_delete_hyphen_milestone.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_delete_hyphen_milestone.Output {
        try await issues_sol_delete_hyphen_milestone(Operations.issues_sol_delete_hyphen_milestone.Input(
            path: path,
            headers: headers
        ))
    }
    /// List labels for issues in a milestone
    ///
    /// Lists labels for issues in a milestone.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/labels/get(issues/list-labels-for-milestone)`.
    public func issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone(
        path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Path,
        query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output {
        try await issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone(Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List user account issues assigned to the authenticated user
    ///
    /// List issues across owned and member repositories assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /user/issues`.
    /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)`.
    public func issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/integration`.
        public struct integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public var permissions: Components.Schemas.integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - client_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                client_id: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.client_id = client_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case client_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_hyphen_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `nullable_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_hyphen_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - client_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                client_id: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.client_id = client_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case client_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        public struct issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            public var node_id: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            public var html_url: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            public var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            public var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen public enum state_reasonPayload: String, Codable, Hashable, Sendable {
                case completed = "completed"
                case reopened = "reopened"
                case not_planned = "not_planned"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            public var state_reason: Components.Schemas.issue.state_reasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            public var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/labelsPayload`.
            @frozen public enum labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/id`.
                    public var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/color`.
                    public var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2/default`.
                    public var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    public init(
                        id: Swift.Int64? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/labelsPayload/case2`.
                case case2(Components.Schemas.issue.labelsPayloadPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public typealias labelsPayload = [Components.Schemas.issue.labelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            public var labels: Components.Schemas.issue.labelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public struct pull_requestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                public var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                public var diff_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                public var patch_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                public var url: Swift.String?
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                public init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    patch_url: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            public var pull_request: Components.Schemas.issue.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            public var closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            public var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            public var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the issue
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - state_reason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - comments:
            ///   - pull_request:
            ///   - closed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - draft:
            ///   - closed_by:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - repository:
            ///   - performed_via_github_app:
            ///   - author_association:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                state_reason: Components.Schemas.issue.state_reasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                labels: Components.Schemas.issue.labelsPayload,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                comments: Swift.Int,
                pull_request: Components.Schemas.issue.pull_requestPayload? = nil,
                closed_at: Foundation.Date? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                draft: Swift.Bool? = nil,
                closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                repository: Components.Schemas.repository? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                author_association: Components.Schemas.author_hyphen_association,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.number = number
                self.state = state
                self.state_reason = state_reason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.comments = comments
                self.pull_request = pull_request
                self.closed_at = closed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.draft = draft
                self.closed_by = closed_by
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.repository = repository
                self.performed_via_github_app = performed_via_github_app
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case number
                case state
                case state_reason
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case active_lock_reason
                case comments
                case pull_request
                case closed_at
                case created_at
                case updated_at
                case draft
                case closed_by
                case body_html
                case body_text
                case timeline_url
                case repository
                case performed_via_github_app
                case author_association
                case reactions
            }
        }
        /// Comments provide a way for people to collaborate on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/issue-comment`.
        public struct issue_hyphen_comment: Codable, Hashable, Sendable {
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-comment/node_id`.
            public var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/url`.
            public var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/issue-comment/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-comment/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/issue-comment/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/issue-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `issue_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// Commit Comment
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comment`.
        public struct commit_hyphen_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/path`.
            public var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/commit-comment/position`.
            public var position: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/line`.
            public var line: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/commit-comment/commit_id`.
            public var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/commit-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/commit-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/commit-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `commit_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - html_url:
            ///   - url:
            ///   - id:
            ///   - node_id:
            ///   - body:
            ///   - path:
            ///   - position:
            ///   - line:
            ///   - commit_id:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - author_association:
            ///   - reactions:
            public init(
                html_url: Swift.String,
                url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                body: Swift.String,
                path: Swift.String? = nil,
                position: Swift.Int? = nil,
                line: Swift.Int? = nil,
                commit_id: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                author_association: Components.Schemas.author_hyphen_association,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.html_url = html_url
                self.url = url
                self.id = id
                self.node_id = node_id
                self.body = body
                self.path = path
                self.position = position
                self.line = line
                self.commit_id = commit_id
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case html_url
                case url
                case id
                case node_id
                case body
                case path
                case position
                case line
                case commit_id
                case user
                case created_at
                case updated_at
                case author_association
                case reactions
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-issue`.
        public struct nullable_hyphen_issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-issue/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-issue/node_id`.
            public var node_id: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-issue/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-issue/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-issue/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-issue/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-issue/html_url`.
            public var html_url: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/number`.
            public var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/state`.
            public var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/state_reason`.
            @frozen public enum state_reasonPayload: String, Codable, Hashable, Sendable {
                case completed = "completed"
                case reopened = "reopened"
                case not_planned = "not_planned"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/state_reason`.
            public var state_reason: Components.Schemas.nullable_hyphen_issue.state_reasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/title`.
            public var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload`.
            @frozen public enum labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2`.
                public struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/id`.
                    public var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/description`.
                    public var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/color`.
                    public var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2/default`.
                    public var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - node_id:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    public init(
                        id: Swift.Int64? = nil,
                        node_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.node_id = node_id
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case node_id
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/nullable-issue/labelsPayload/case2`.
                case case2(Components.Schemas.nullable_hyphen_issue.labelsPayloadPayload.Case2Payload)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/labels`.
            public typealias labelsPayload = [Components.Schemas.nullable_hyphen_issue.labelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-issue/labels`.
            public var labels: Components.Schemas.nullable_hyphen_issue.labelsPayload
            /// - Remark: Generated from `#/components/schemas/nullable-issue/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-issue/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request`.
            public struct pull_requestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request/merged_at`.
                public var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request/diff_url`.
                public var diff_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request/patch_url`.
                public var patch_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request/url`.
                public var url: Swift.String?
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                public init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    patch_url: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-issue/pull_request`.
            public var pull_request: Components.Schemas.nullable_hyphen_issue.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-issue/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-issue/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/closed_by`.
            public var closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/timeline_url`.
            public var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/repository`.
            public var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/nullable-issue/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/nullable-issue/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `nullable_hyphen_issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url: URL for the issue
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - state_reason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - comments:
            ///   - pull_request:
            ///   - closed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - draft:
            ///   - closed_by:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - repository:
            ///   - performed_via_github_app:
            ///   - author_association:
            ///   - reactions:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                state_reason: Components.Schemas.nullable_hyphen_issue.state_reasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                labels: Components.Schemas.nullable_hyphen_issue.labelsPayload,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                comments: Swift.Int,
                pull_request: Components.Schemas.nullable_hyphen_issue.pull_requestPayload? = nil,
                closed_at: Foundation.Date? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                draft: Swift.Bool? = nil,
                closed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                repository: Components.Schemas.repository? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                author_association: Components.Schemas.author_hyphen_association,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.number = number
                self.state = state
                self.state_reason = state_reason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.comments = comments
                self.pull_request = pull_request
                self.closed_at = closed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.draft = draft
                self.closed_by = closed_by
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.repository = repository
                self.performed_via_github_app = performed_via_github_app
                self.author_association = author_association
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case number
                case state
                case state_reason
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case active_lock_reason
                case comments
                case pull_request
                case closed_at
                case created_at
                case updated_at
                case draft
                case closed_by
                case body_html
                case body_text
                case timeline_url
                case repository
                case performed_via_github_app
                case author_association
                case reactions
            }
        }
        /// Issue Event Label
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-label`.
        public struct issue_hyphen_event_hyphen_label: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-label/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-event-label/color`.
            public var color: Swift.String?
            /// Creates a new `issue_hyphen_event_hyphen_label`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - color:
            public init(
                name: Swift.String? = nil,
                color: Swift.String? = nil
            ) {
                self.name = name
                self.color = color
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case color
            }
        }
        /// - Remark: Generated from `#/components/schemas/issue-event-dismissed-review`.
        public struct issue_hyphen_event_hyphen_dismissed_hyphen_review: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-dismissed-review/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event-dismissed-review/review_id`.
            public var review_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue-event-dismissed-review/dismissal_message`.
            public var dismissal_message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-event-dismissed-review/dismissal_commit_id`.
            public var dismissal_commit_id: Swift.String?
            /// Creates a new `issue_hyphen_event_hyphen_dismissed_hyphen_review`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - review_id:
            ///   - dismissal_message:
            ///   - dismissal_commit_id:
            public init(
                state: Swift.String,
                review_id: Swift.Int,
                dismissal_message: Swift.String? = nil,
                dismissal_commit_id: Swift.String? = nil
            ) {
                self.state = state
                self.review_id = review_id
                self.dismissal_message = dismissal_message
                self.dismissal_commit_id = dismissal_commit_id
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case review_id
                case dismissal_message
                case dismissal_commit_id
            }
        }
        /// Issue Event Milestone
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-milestone`.
        public struct issue_hyphen_event_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-milestone/title`.
            public var title: Swift.String
            /// Creates a new `issue_hyphen_event_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - title:
            public init(title: Swift.String) {
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case title
            }
        }
        /// Issue Event Project Card
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-project-card`.
        public struct issue_hyphen_event_hyphen_project_hyphen_card: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/project_url`.
            public var project_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/project_id`.
            public var project_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/column_name`.
            public var column_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event-project-card/previous_column_name`.
            public var previous_column_name: Swift.String?
            /// Creates a new `issue_hyphen_event_hyphen_project_hyphen_card`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - project_url:
            ///   - project_id:
            ///   - column_name:
            ///   - previous_column_name:
            public init(
                url: Swift.String,
                id: Swift.Int,
                project_url: Swift.String,
                project_id: Swift.Int,
                column_name: Swift.String,
                previous_column_name: Swift.String? = nil
            ) {
                self.url = url
                self.id = id
                self.project_url = project_url
                self.project_id = project_id
                self.column_name = column_name
                self.previous_column_name = previous_column_name
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case project_url
                case project_id
                case column_name
                case previous_column_name
            }
        }
        /// Issue Event Rename
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-rename`.
        public struct issue_hyphen_event_hyphen_rename: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-rename/from`.
            public var from: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event-rename/to`.
            public var to: Swift.String
            /// Creates a new `issue_hyphen_event_hyphen_rename`.
            ///
            /// - Parameters:
            ///   - from:
            ///   - to:
            public init(
                from: Swift.String,
                to: Swift.String
            ) {
                self.from = from
                self.to = to
            }
            public enum CodingKeys: String, CodingKey {
                case from
                case to
            }
        }
        /// Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event`.
        public struct issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event/actor`.
            public var actor: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-event/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-event/issue`.
            public var issue: Components.Schemas.nullable_hyphen_issue?
            /// - Remark: Generated from `#/components/schemas/issue-event/label`.
            public var label: Components.Schemas.issue_hyphen_event_hyphen_label?
            /// - Remark: Generated from `#/components/schemas/issue-event/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-event/assigner`.
            public var assigner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-event/review_requester`.
            public var review_requester: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-event/requested_reviewer`.
            public var requested_reviewer: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-event/requested_team`.
            public var requested_team: Components.Schemas.team?
            /// - Remark: Generated from `#/components/schemas/issue-event/dismissed_review`.
            public var dismissed_review: Components.Schemas.issue_hyphen_event_hyphen_dismissed_hyphen_review?
            /// - Remark: Generated from `#/components/schemas/issue-event/milestone`.
            public var milestone: Components.Schemas.issue_hyphen_event_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/issue-event/project_card`.
            public var project_card: Components.Schemas.issue_hyphen_event_hyphen_project_hyphen_card?
            /// - Remark: Generated from `#/components/schemas/issue-event/rename`.
            public var rename: Components.Schemas.issue_hyphen_event_hyphen_rename?
            /// - Remark: Generated from `#/components/schemas/issue-event/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association?
            /// - Remark: Generated from `#/components/schemas/issue-event/lock_reason`.
            public var lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// Creates a new `issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - issue:
            ///   - label:
            ///   - assignee:
            ///   - assigner:
            ///   - review_requester:
            ///   - requested_reviewer:
            ///   - requested_team:
            ///   - dismissed_review:
            ///   - milestone:
            ///   - project_card:
            ///   - rename:
            ///   - author_association:
            ///   - lock_reason:
            ///   - performed_via_github_app:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Foundation.Date,
                issue: Components.Schemas.nullable_hyphen_issue? = nil,
                label: Components.Schemas.issue_hyphen_event_hyphen_label? = nil,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                assigner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                review_requester: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                requested_reviewer: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                requested_team: Components.Schemas.team? = nil,
                dismissed_review: Components.Schemas.issue_hyphen_event_hyphen_dismissed_hyphen_review? = nil,
                milestone: Components.Schemas.issue_hyphen_event_hyphen_milestone? = nil,
                project_card: Components.Schemas.issue_hyphen_event_hyphen_project_hyphen_card? = nil,
                rename: Components.Schemas.issue_hyphen_event_hyphen_rename? = nil,
                author_association: Components.Schemas.author_hyphen_association? = nil,
                lock_reason: Swift.String? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.issue = issue
                self.label = label
                self.assignee = assignee
                self.assigner = assigner
                self.review_requester = review_requester
                self.requested_reviewer = requested_reviewer
                self.requested_team = requested_team
                self.dismissed_review = dismissed_review
                self.milestone = milestone
                self.project_card = project_card
                self.rename = rename
                self.author_association = author_association
                self.lock_reason = lock_reason
                self.performed_via_github_app = performed_via_github_app
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case issue
                case label
                case assignee
                case assigner
                case review_requester
                case requested_reviewer
                case requested_team
                case dismissed_review
                case milestone
                case project_card
                case rename
                case author_association
                case lock_reason
                case performed_via_github_app
            }
        }
        /// Labeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/labeled-issue-event`.
        public struct labeled_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            public struct labelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label/color`.
                public var color: Swift.String
                /// Creates a new `labelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                public init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/labeled-issue-event/label`.
            public var label: Components.Schemas.labeled_hyphen_issue_hyphen_event.labelPayload
            /// Creates a new `labeled_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - label:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                label: Components.Schemas.labeled_hyphen_issue_hyphen_event.labelPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.label = label
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case label
            }
        }
        /// Unlabeled Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event`.
        public struct unlabeled_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            public struct labelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label/color`.
                public var color: Swift.String
                /// Creates a new `labelPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - color:
                public init(
                    name: Swift.String,
                    color: Swift.String
                ) {
                    self.name = name
                    self.color = color
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case color
                }
            }
            /// - Remark: Generated from `#/components/schemas/unlabeled-issue-event/label`.
            public var label: Components.Schemas.unlabeled_hyphen_issue_hyphen_event.labelPayload
            /// Creates a new `unlabeled_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - label:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                label: Components.Schemas.unlabeled_hyphen_issue_hyphen_event.labelPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.label = label
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case label
            }
        }
        /// Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/assigned-issue-event`.
        public struct assigned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.integration?
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assignee`.
            public var assignee: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/assigned-issue-event/assigner`.
            public var assigner: Components.Schemas.simple_hyphen_user
            /// Creates a new `assigned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            ///   - assigner:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.integration? = nil,
                assignee: Components.Schemas.simple_hyphen_user,
                assigner: Components.Schemas.simple_hyphen_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
                self.assigner = assigner
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
                case assigner
            }
        }
        /// Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/unassigned-issue-event`.
        public struct unassigned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assignee`.
            public var assignee: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/unassigned-issue-event/assigner`.
            public var assigner: Components.Schemas.simple_hyphen_user
            /// Creates a new `unassigned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            ///   - assigner:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                assignee: Components.Schemas.simple_hyphen_user,
                assigner: Components.Schemas.simple_hyphen_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
                self.assigner = assigner
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
                case assigner
            }
        }
        /// Milestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/milestoned-issue-event`.
        public struct milestoned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            public struct milestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone/title`.
                public var title: Swift.String
                /// Creates a new `milestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                public init(title: Swift.String) {
                    self.title = title
                }
                public enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/milestoned-issue-event/milestone`.
            public var milestone: Components.Schemas.milestoned_hyphen_issue_hyphen_event.milestonePayload
            /// Creates a new `milestoned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - milestone:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                milestone: Components.Schemas.milestoned_hyphen_issue_hyphen_event.milestonePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.milestone = milestone
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case milestone
            }
        }
        /// Demilestoned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event`.
        public struct demilestoned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            public struct milestonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone/title`.
                public var title: Swift.String
                /// Creates a new `milestonePayload`.
                ///
                /// - Parameters:
                ///   - title:
                public init(title: Swift.String) {
                    self.title = title
                }
                public enum CodingKeys: String, CodingKey {
                    case title
                }
            }
            /// - Remark: Generated from `#/components/schemas/demilestoned-issue-event/milestone`.
            public var milestone: Components.Schemas.demilestoned_hyphen_issue_hyphen_event.milestonePayload
            /// Creates a new `demilestoned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - milestone:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                milestone: Components.Schemas.demilestoned_hyphen_issue_hyphen_event.milestonePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.milestone = milestone
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case milestone
            }
        }
        /// Renamed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/renamed-issue-event`.
        public struct renamed_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            public struct renamePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/from`.
                public var from: Swift.String
                /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename/to`.
                public var to: Swift.String
                /// Creates a new `renamePayload`.
                ///
                /// - Parameters:
                ///   - from:
                ///   - to:
                public init(
                    from: Swift.String,
                    to: Swift.String
                ) {
                    self.from = from
                    self.to = to
                }
                public enum CodingKeys: String, CodingKey {
                    case from
                    case to
                }
            }
            /// - Remark: Generated from `#/components/schemas/renamed-issue-event/rename`.
            public var rename: Components.Schemas.renamed_hyphen_issue_hyphen_event.renamePayload
            /// Creates a new `renamed_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - rename:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                rename: Components.Schemas.renamed_hyphen_issue_hyphen_event.renamePayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.rename = rename
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case rename
            }
        }
        /// Review Requested Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-requested-issue-event`.
        public struct review_hyphen_requested_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/review_requester`.
            public var review_requester: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_team`.
            public var requested_team: Components.Schemas.team?
            /// - Remark: Generated from `#/components/schemas/review-requested-issue-event/requested_reviewer`.
            public var requested_reviewer: Components.Schemas.simple_hyphen_user?
            /// Creates a new `review_hyphen_requested_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - review_requester:
            ///   - requested_team:
            ///   - requested_reviewer:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                review_requester: Components.Schemas.simple_hyphen_user,
                requested_team: Components.Schemas.team? = nil,
                requested_reviewer: Components.Schemas.simple_hyphen_user? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.review_requester = review_requester
                self.requested_team = requested_team
                self.requested_reviewer = requested_reviewer
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case review_requester
                case requested_team
                case requested_reviewer
            }
        }
        /// Review Request Removed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event`.
        public struct review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/review_requester`.
            public var review_requester: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_team`.
            public var requested_team: Components.Schemas.team?
            /// - Remark: Generated from `#/components/schemas/review-request-removed-issue-event/requested_reviewer`.
            public var requested_reviewer: Components.Schemas.simple_hyphen_user?
            /// Creates a new `review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - review_requester:
            ///   - requested_team:
            ///   - requested_reviewer:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                review_requester: Components.Schemas.simple_hyphen_user,
                requested_team: Components.Schemas.team? = nil,
                requested_reviewer: Components.Schemas.simple_hyphen_user? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.review_requester = review_requester
                self.requested_team = requested_team
                self.requested_reviewer = requested_reviewer
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case review_requester
                case requested_team
                case requested_reviewer
            }
        }
        /// Review Dismissed Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event`.
        public struct review_hyphen_dismissed_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            public struct dismissed_reviewPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/state`.
                public var state: Swift.String
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/review_id`.
                public var review_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_message`.
                public var dismissal_message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review/dismissal_commit_id`.
                public var dismissal_commit_id: Swift.String?
                /// Creates a new `dismissed_reviewPayload`.
                ///
                /// - Parameters:
                ///   - state:
                ///   - review_id:
                ///   - dismissal_message:
                ///   - dismissal_commit_id:
                public init(
                    state: Swift.String,
                    review_id: Swift.Int,
                    dismissal_message: Swift.String? = nil,
                    dismissal_commit_id: Swift.String? = nil
                ) {
                    self.state = state
                    self.review_id = review_id
                    self.dismissal_message = dismissal_message
                    self.dismissal_commit_id = dismissal_commit_id
                }
                public enum CodingKeys: String, CodingKey {
                    case state
                    case review_id
                    case dismissal_message
                    case dismissal_commit_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/review-dismissed-issue-event/dismissed_review`.
            public var dismissed_review: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event.dismissed_reviewPayload
            /// Creates a new `review_hyphen_dismissed_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - dismissed_review:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                dismissed_review: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event.dismissed_reviewPayload
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.dismissed_review = dismissed_review
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case dismissed_review
            }
        }
        /// Locked Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/locked-issue-event`.
        public struct locked_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/locked-issue-event/lock_reason`.
            public var lock_reason: Swift.String?
            /// Creates a new `locked_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - lock_reason:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                lock_reason: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.lock_reason = lock_reason
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case lock_reason
            }
        }
        /// Added to Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event`.
        public struct added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            public struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_id`.
                public var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/project_url`.
                public var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/column_name`.
                public var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card/previous_column_name`.
                public var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                public init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/added-to-project-issue-event/project_card`.
            public var project_card: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload?
            /// Creates a new `added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                project_card: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Moved Column in Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event`.
        public struct moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            public struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_id`.
                public var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/project_url`.
                public var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/column_name`.
                public var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card/previous_column_name`.
                public var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                public init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/moved-column-in-project-issue-event/project_card`.
            public var project_card: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload?
            /// Creates a new `moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                project_card: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Removed from Project Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event`.
        public struct removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            public struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_id`.
                public var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/project_url`.
                public var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/column_name`.
                public var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card/previous_column_name`.
                public var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                public init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/removed-from-project-issue-event/project_card`.
            public var project_card: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload?
            /// Creates a new `removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                project_card: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Converted Note to Issue Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event`.
        public struct converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.integration?
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            public struct project_cardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/id`.
                public var id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_id`.
                public var project_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/project_url`.
                public var project_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/column_name`.
                public var column_name: Swift.String
                /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card/previous_column_name`.
                public var previous_column_name: Swift.String?
                /// Creates a new `project_cardPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - project_id:
                ///   - project_url:
                ///   - column_name:
                ///   - previous_column_name:
                public init(
                    id: Swift.Int,
                    url: Swift.String,
                    project_id: Swift.Int,
                    project_url: Swift.String,
                    column_name: Swift.String,
                    previous_column_name: Swift.String? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.project_id = project_id
                    self.project_url = project_url
                    self.column_name = column_name
                    self.previous_column_name = previous_column_name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case project_id
                    case project_url
                    case column_name
                    case previous_column_name
                }
            }
            /// - Remark: Generated from `#/components/schemas/converted-note-to-issue-issue-event/project_card`.
            public var project_card: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event.project_cardPayload?
            /// Creates a new `converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - project_card:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.integration? = nil,
                project_card: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event.project_cardPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.project_card = project_card
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case project_card
            }
        }
        /// Issue Event for Issue
        ///
        /// - Remark: Generated from `#/components/schemas/issue-event-for-issue`.
        public struct issue_hyphen_event_hyphen_for_hyphen_issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value1`.
            public var value1: Components.Schemas.labeled_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value2`.
            public var value2: Components.Schemas.unlabeled_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value3`.
            public var value3: Components.Schemas.assigned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value4`.
            public var value4: Components.Schemas.unassigned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value5`.
            public var value5: Components.Schemas.milestoned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value6`.
            public var value6: Components.Schemas.demilestoned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value7`.
            public var value7: Components.Schemas.renamed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value8`.
            public var value8: Components.Schemas.review_hyphen_requested_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value9`.
            public var value9: Components.Schemas.review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value10`.
            public var value10: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value11`.
            public var value11: Components.Schemas.locked_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value12`.
            public var value12: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value13`.
            public var value13: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value14`.
            public var value14: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/issue-event-for-issue/value15`.
            public var value15: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event?
            /// Creates a new `issue_hyphen_event_hyphen_for_hyphen_issue`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            public init(
                value1: Components.Schemas.labeled_hyphen_issue_hyphen_event? = nil,
                value2: Components.Schemas.unlabeled_hyphen_issue_hyphen_event? = nil,
                value3: Components.Schemas.assigned_hyphen_issue_hyphen_event? = nil,
                value4: Components.Schemas.unassigned_hyphen_issue_hyphen_event? = nil,
                value5: Components.Schemas.milestoned_hyphen_issue_hyphen_event? = nil,
                value6: Components.Schemas.demilestoned_hyphen_issue_hyphen_event? = nil,
                value7: Components.Schemas.renamed_hyphen_issue_hyphen_event? = nil,
                value8: Components.Schemas.review_hyphen_requested_hyphen_issue_hyphen_event? = nil,
                value9: Components.Schemas.review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event? = nil,
                value10: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event? = nil,
                value11: Components.Schemas.locked_hyphen_issue_hyphen_event? = nil,
                value12: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value13: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value14: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value15: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4,
                        value5,
                        value6,
                        value7,
                        value8,
                        value9,
                        value10,
                        value11,
                        value12,
                        value13,
                        value14,
                        value15
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
                try value3?.encode(to: encoder)
                try value4?.encode(to: encoder)
                try value5?.encode(to: encoder)
                try value6?.encode(to: encoder)
                try value7?.encode(to: encoder)
                try value8?.encode(to: encoder)
                try value9?.encode(to: encoder)
                try value10?.encode(to: encoder)
                try value11?.encode(to: encoder)
                try value12?.encode(to: encoder)
                try value13?.encode(to: encoder)
                try value14?.encode(to: encoder)
                try value15?.encode(to: encoder)
            }
        }
        /// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
        ///
        /// - Remark: Generated from `#/components/schemas/label`.
        public struct label: Codable, Hashable, Sendable {
            /// Unique identifier for the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/label/node_id`.
            public var node_id: Swift.String
            /// URL for the label
            ///
            /// - Remark: Generated from `#/components/schemas/label/url`.
            public var url: Swift.String
            /// The name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/name`.
            public var name: Swift.String
            /// Optional description of the label, such as its purpose.
            ///
            /// - Remark: Generated from `#/components/schemas/label/description`.
            public var description: Swift.String?
            /// 6-character hex code, without the leading #, identifying the color
            ///
            /// - Remark: Generated from `#/components/schemas/label/color`.
            public var color: Swift.String
            /// Whether this label comes by default in a new repository.
            ///
            /// - Remark: Generated from `#/components/schemas/label/default`.
            public var _default: Swift.Bool
            /// Creates a new `label`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the label.
            ///   - node_id:
            ///   - url: URL for the label
            ///   - name: The name of the label.
            ///   - description: Optional description of the label, such as its purpose.
            ///   - color: 6-character hex code, without the leading #, identifying the color
            ///   - _default: Whether this label comes by default in a new repository.
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                color: Swift.String,
                _default: Swift.Bool
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self._default = _default
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case name
                case description
                case color
                case _default = "default"
            }
        }
        /// Timeline Comment Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-comment-event`.
        public struct timeline_hyphen_comment_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// Unique identifier of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/node_id`.
            public var node_id: Swift.String
            /// URL for the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/url`.
            public var url: Swift.String
            /// Contents of the issue comment
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/issue_url`.
            public var issue_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-comment-event/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `timeline_hyphen_comment_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - id: Unique identifier of the issue comment
            ///   - node_id:
            ///   - url: URL for the issue comment
            ///   - body: Contents of the issue comment
            ///   - body_text:
            ///   - body_html:
            ///   - html_url:
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - issue_url:
            ///   - author_association:
            ///   - performed_via_github_app:
            ///   - reactions:
            public init(
                event: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                body_text: Swift.String? = nil,
                body_html: Swift.String? = nil,
                html_url: Swift.String,
                user: Components.Schemas.simple_hyphen_user,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                issue_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.event = event
                self.actor = actor
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.body_text = body_text
                self.body_html = body_html
                self.html_url = html_url
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.issue_url = issue_url
                self.author_association = author_association
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case actor
                case id
                case node_id
                case url
                case body
                case body_text
                case body_html
                case html_url
                case user
                case created_at
                case updated_at
                case issue_url
                case author_association
                case performed_via_github_app
                case reactions
            }
        }
        /// Timeline Cross Referenced Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event`.
        public struct timeline_hyphen_cross_hyphen_referenced_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            public struct sourcePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/type`.
                public var _type: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source/issue`.
                public var issue: Components.Schemas.issue?
                /// Creates a new `sourcePayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - issue:
                public init(
                    _type: Swift.String? = nil,
                    issue: Components.Schemas.issue? = nil
                ) {
                    self._type = _type
                    self.issue = issue
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case issue
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-cross-referenced-event/source`.
            public var source: Components.Schemas.timeline_hyphen_cross_hyphen_referenced_hyphen_event.sourcePayload
            /// Creates a new `timeline_hyphen_cross_hyphen_referenced_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - actor:
            ///   - created_at:
            ///   - updated_at:
            ///   - source:
            public init(
                event: Swift.String,
                actor: Components.Schemas.simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                source: Components.Schemas.timeline_hyphen_cross_hyphen_referenced_hyphen_event.sourcePayload
            ) {
                self.event = event
                self.actor = actor
                self.created_at = created_at
                self.updated_at = updated_at
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case actor
                case created_at
                case updated_at
                case source
            }
        }
        /// Timeline Committed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-committed-event`.
        public struct timeline_hyphen_committed_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/event`.
            public var event: Swift.String?
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/url`.
            public var url: Swift.String
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            public struct authorPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/date`.
                public var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/email`.
                public var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author/name`.
                public var name: Swift.String
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                public init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/author`.
            public var author: Components.Schemas.timeline_hyphen_committed_hyphen_event.authorPayload
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            public struct committerPayload: Codable, Hashable, Sendable {
                /// Timestamp of the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/date`.
                public var date: Foundation.Date
                /// Git email address of the user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/email`.
                public var email: Swift.String
                /// Name of the git user
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer/name`.
                public var name: Swift.String
                /// Creates a new `committerPayload`.
                ///
                /// - Parameters:
                ///   - date: Timestamp of the commit
                ///   - email: Git email address of the user
                ///   - name: Name of the git user
                public init(
                    date: Foundation.Date,
                    email: Swift.String,
                    name: Swift.String
                ) {
                    self.date = date
                    self.email = email
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case date
                    case email
                    case name
                }
            }
            /// Identifying information for the git-user
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/committer`.
            public var committer: Components.Schemas.timeline_hyphen_committed_hyphen_event.committerPayload
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            public struct treePayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree/url`.
                public var url: Swift.String
                /// Creates a new `treePayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                public init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/tree`.
            public var tree: Components.Schemas.timeline_hyphen_committed_hyphen_event.treePayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload`.
            public struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// SHA for the commit
                ///
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/sha`.
                public var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parentsPayload/html_url`.
                public var html_url: Swift.String
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha: SHA for the commit
                ///   - url:
                ///   - html_url:
                public init(
                    sha: Swift.String,
                    url: Swift.String,
                    html_url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                    self.html_url = html_url
                }
                public enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case html_url
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            public typealias parentsPayload = [Components.Schemas.timeline_hyphen_committed_hyphen_event.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/parents`.
            public var parents: Components.Schemas.timeline_hyphen_committed_hyphen_event.parentsPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            public struct verificationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/verified`.
                public var verified: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/reason`.
                public var reason: Swift.String
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/signature`.
                public var signature: Swift.String?
                /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification/payload`.
                public var payload: Swift.String?
                /// Creates a new `verificationPayload`.
                ///
                /// - Parameters:
                ///   - verified:
                ///   - reason:
                ///   - signature:
                ///   - payload:
                public init(
                    verified: Swift.Bool,
                    reason: Swift.String,
                    signature: Swift.String? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.verified = verified
                    self.reason = reason
                    self.signature = signature
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case verified
                    case reason
                    case signature
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/verification`.
            public var verification: Components.Schemas.timeline_hyphen_committed_hyphen_event.verificationPayload
            /// - Remark: Generated from `#/components/schemas/timeline-committed-event/html_url`.
            public var html_url: Swift.String
            /// Creates a new `timeline_hyphen_committed_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - sha: SHA for the commit
            ///   - node_id:
            ///   - url:
            ///   - author: Identifying information for the git-user
            ///   - committer: Identifying information for the git-user
            ///   - message: Message describing the purpose of the commit
            ///   - tree:
            ///   - parents:
            ///   - verification:
            ///   - html_url:
            public init(
                event: Swift.String? = nil,
                sha: Swift.String,
                node_id: Swift.String,
                url: Swift.String,
                author: Components.Schemas.timeline_hyphen_committed_hyphen_event.authorPayload,
                committer: Components.Schemas.timeline_hyphen_committed_hyphen_event.committerPayload,
                message: Swift.String,
                tree: Components.Schemas.timeline_hyphen_committed_hyphen_event.treePayload,
                parents: Components.Schemas.timeline_hyphen_committed_hyphen_event.parentsPayload,
                verification: Components.Schemas.timeline_hyphen_committed_hyphen_event.verificationPayload,
                html_url: Swift.String
            ) {
                self.event = event
                self.sha = sha
                self.node_id = node_id
                self.url = url
                self.author = author
                self.committer = committer
                self.message = message
                self.tree = tree
                self.parents = parents
                self.verification = verification
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case sha
                case node_id
                case url
                case author
                case committer
                case message
                case tree
                case parents
                case verification
                case html_url
            }
        }
        /// Timeline Reviewed Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event`.
        public struct timeline_hyphen_reviewed_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/event`.
            public var event: Swift.String
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                public struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html/href`.
                    public var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/html`.
                public var html: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                public struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request/href`.
                    public var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links/pull_request`.
                public var pull_request: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pull_request:
                public init(
                    html: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload.pull_requestPayload
                ) {
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/_links`.
            public var _links: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/submitted_at`.
            public var submitted_at: Foundation.Date?
            /// A commit SHA for the review.
            ///
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/commit_id`.
            public var commit_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-reviewed-event/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// Creates a new `timeline_hyphen_reviewed_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - id: Unique identifier of the review
            ///   - node_id:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - html_url:
            ///   - pull_request_url:
            ///   - _links:
            ///   - submitted_at:
            ///   - commit_id: A commit SHA for the review.
            ///   - body_html:
            ///   - body_text:
            ///   - author_association:
            public init(
                event: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                user: Components.Schemas.simple_hyphen_user,
                body: Swift.String? = nil,
                state: Swift.String,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                _links: Components.Schemas.timeline_hyphen_reviewed_hyphen_event._linksPayload,
                submitted_at: Foundation.Date? = nil,
                commit_id: Swift.String,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                author_association: Components.Schemas.author_hyphen_association
            ) {
                self.event = event
                self.id = id
                self.node_id = node_id
                self.user = user
                self.body = body
                self.state = state
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self._links = _links
                self.submitted_at = submitted_at
                self.commit_id = commit_id
                self.body_html = body_html
                self.body_text = body_text
                self.author_association = author_association
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case id
                case node_id
                case user
                case body
                case state
                case html_url
                case pull_request_url
                case _links
                case submitted_at
                case commit_id
                case body_html
                case body_text
                case author_association
            }
        }
        /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review-comment`.
        public struct pull_hyphen_request_hyphen_review_hyphen_comment: Codable, Hashable, Sendable {
            /// URL for the pull request review comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/url`.
            public var url: Swift.String
            /// The ID of the pull request review to which the comment belongs.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_review_id`.
            public var pull_request_review_id: Swift.Int64?
            /// The ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/id`.
            public var id: Swift.Int64
            /// The node ID of the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/node_id`.
            public var node_id: Swift.String
            /// The diff of the line that the comment refers to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/diff_hunk`.
            public var diff_hunk: Swift.String
            /// The relative path of the file to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/path`.
            public var path: Swift.String
            /// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/position`.
            public var position: Swift.Int?
            /// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_position`.
            public var original_position: Swift.Int?
            /// The SHA of the commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/commit_id`.
            public var commit_id: Swift.String
            /// The SHA of the original commit to which the comment applies.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_commit_id`.
            public var original_commit_id: Swift.String
            /// The comment ID to reply to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/in_reply_to_id`.
            public var in_reply_to_id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// The text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// HTML URL for the pull request review comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/html_url`.
            public var html_url: Swift.String
            /// URL for the pull request that the review comment belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/pull_request_url`.
            public var pull_request_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public struct _linksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public struct _selfPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self/href`.
                    public var href: Swift.String
                    /// Creates a new `_selfPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/self`.
                public var _self: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload._selfPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public struct htmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html/href`.
                    public var href: Swift.String
                    /// Creates a new `htmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/html`.
                public var html: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.htmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public struct pull_requestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request/href`.
                    public var href: Swift.String
                    /// Creates a new `pull_requestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    public init(href: Swift.String) {
                        self.href = href
                    }
                    public enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links/pull_request`.
                public var pull_request: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.pull_requestPayload
                /// Creates a new `_linksPayload`.
                ///
                /// - Parameters:
                ///   - _self:
                ///   - html:
                ///   - pull_request:
                public init(
                    _self: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload._selfPayload,
                    html: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.htmlPayload,
                    pull_request: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload.pull_requestPayload
                ) {
                    self._self = _self
                    self.html = html
                    self.pull_request = pull_request
                }
                public enum CodingKeys: String, CodingKey {
                    case _self = "self"
                    case html
                    case pull_request
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/_links`.
            public var _links: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_line`.
            public var start_line: Swift.Int?
            /// The first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_start_line`.
            public var original_start_line: Swift.Int?
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            @frozen public enum start_sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the first line of the range for a multi-line comment.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/start_side`.
            public var start_side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.start_sidePayload?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/line`.
            public var line: Swift.Int?
            /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/original_line`.
            public var original_line: Swift.Int?
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            @frozen public enum sidePayload: String, Codable, Hashable, Sendable {
                case LEFT = "LEFT"
                case RIGHT = "RIGHT"
            }
            /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/side`.
            public var side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.sidePayload?
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            @frozen public enum subject_typePayload: String, Codable, Hashable, Sendable {
                case line = "line"
                case file = "file"
            }
            /// The level at which the comment is targeted, can be a diff line or a file.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/subject_type`.
            public var subject_type: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.subject_typePayload?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review-comment/body_text`.
            public var body_text: Swift.String?
            /// Creates a new `pull_hyphen_request_hyphen_review_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - url: URL for the pull request review comment
            ///   - pull_request_review_id: The ID of the pull request review to which the comment belongs.
            ///   - id: The ID of the pull request review comment.
            ///   - node_id: The node ID of the pull request review comment.
            ///   - diff_hunk: The diff of the line that the comment refers to.
            ///   - path: The relative path of the file to which the comment applies.
            ///   - position: The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
            ///   - original_position: The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
            ///   - commit_id: The SHA of the commit to which the comment applies.
            ///   - original_commit_id: The SHA of the original commit to which the comment applies.
            ///   - in_reply_to_id: The comment ID to reply to.
            ///   - user:
            ///   - body: The text of the comment.
            ///   - created_at:
            ///   - updated_at:
            ///   - html_url: HTML URL for the pull request review comment.
            ///   - pull_request_url: URL for the pull request that the review comment belongs to.
            ///   - author_association:
            ///   - _links:
            ///   - start_line: The first line of the range for a multi-line comment.
            ///   - original_start_line: The first line of the range for a multi-line comment.
            ///   - start_side: The side of the first line of the range for a multi-line comment.
            ///   - line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - original_line: The line of the blob to which the comment applies. The last line of the range for a multi-line comment
            ///   - side: The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
            ///   - subject_type: The level at which the comment is targeted, can be a diff line or a file.
            ///   - reactions:
            ///   - body_html:
            ///   - body_text:
            public init(
                url: Swift.String,
                pull_request_review_id: Swift.Int64? = nil,
                id: Swift.Int64,
                node_id: Swift.String,
                diff_hunk: Swift.String,
                path: Swift.String,
                position: Swift.Int? = nil,
                original_position: Swift.Int? = nil,
                commit_id: Swift.String,
                original_commit_id: Swift.String,
                in_reply_to_id: Swift.Int? = nil,
                user: Components.Schemas.simple_hyphen_user,
                body: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                html_url: Swift.String,
                pull_request_url: Swift.String,
                author_association: Components.Schemas.author_hyphen_association,
                _links: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment._linksPayload,
                start_line: Swift.Int? = nil,
                original_start_line: Swift.Int? = nil,
                start_side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.start_sidePayload? = nil,
                line: Swift.Int? = nil,
                original_line: Swift.Int? = nil,
                side: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.sidePayload? = nil,
                subject_type: Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment.subject_typePayload? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil
            ) {
                self.url = url
                self.pull_request_review_id = pull_request_review_id
                self.id = id
                self.node_id = node_id
                self.diff_hunk = diff_hunk
                self.path = path
                self.position = position
                self.original_position = original_position
                self.commit_id = commit_id
                self.original_commit_id = original_commit_id
                self.in_reply_to_id = in_reply_to_id
                self.user = user
                self.body = body
                self.created_at = created_at
                self.updated_at = updated_at
                self.html_url = html_url
                self.pull_request_url = pull_request_url
                self.author_association = author_association
                self._links = _links
                self.start_line = start_line
                self.original_start_line = original_start_line
                self.start_side = start_side
                self.line = line
                self.original_line = original_line
                self.side = side
                self.subject_type = subject_type
                self.reactions = reactions
                self.body_html = body_html
                self.body_text = body_text
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case pull_request_review_id
                case id
                case node_id
                case diff_hunk
                case path
                case position
                case original_position
                case commit_id
                case original_commit_id
                case in_reply_to_id
                case user
                case body
                case created_at
                case updated_at
                case html_url
                case pull_request_url
                case author_association
                case _links
                case start_line
                case original_start_line
                case start_side
                case line
                case original_line
                case side
                case subject_type
                case reactions
                case body_html
                case body_text
            }
        }
        /// Timeline Line Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event`.
        public struct timeline_hyphen_line_hyphen_commented_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/event`.
            public var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-line-commented-event/comments`.
            public var comments: [Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment]?
            /// Creates a new `timeline_hyphen_line_hyphen_commented_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - node_id:
            ///   - comments:
            public init(
                event: Swift.String? = nil,
                node_id: Swift.String? = nil,
                comments: [Components.Schemas.pull_hyphen_request_hyphen_review_hyphen_comment]? = nil
            ) {
                self.event = event
                self.node_id = node_id
                self.comments = comments
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case node_id
                case comments
            }
        }
        /// Timeline Commit Commented Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event`.
        public struct timeline_hyphen_commit_hyphen_commented_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/event`.
            public var event: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-commit-commented-event/comments`.
            public var comments: [Components.Schemas.commit_hyphen_comment]?
            /// Creates a new `timeline_hyphen_commit_hyphen_commented_hyphen_event`.
            ///
            /// - Parameters:
            ///   - event:
            ///   - node_id:
            ///   - commit_id:
            ///   - comments:
            public init(
                event: Swift.String? = nil,
                node_id: Swift.String? = nil,
                commit_id: Swift.String? = nil,
                comments: [Components.Schemas.commit_hyphen_comment]? = nil
            ) {
                self.event = event
                self.node_id = node_id
                self.commit_id = commit_id
                self.comments = comments
            }
            public enum CodingKeys: String, CodingKey {
                case event
                case node_id
                case commit_id
                case comments
            }
        }
        /// Timeline Assigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event`.
        public struct timeline_hyphen_assigned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-assigned-issue-event/assignee`.
            public var assignee: Components.Schemas.simple_hyphen_user
            /// Creates a new `timeline_hyphen_assigned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                assignee: Components.Schemas.simple_hyphen_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
            }
        }
        /// Timeline Unassigned Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event`.
        public struct timeline_hyphen_unassigned_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/timeline-unassigned-issue-event/assignee`.
            public var assignee: Components.Schemas.simple_hyphen_user
            /// Creates a new `timeline_hyphen_unassigned_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - assignee:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                assignee: Components.Schemas.simple_hyphen_user
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.assignee = assignee
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case assignee
            }
        }
        /// State Change Issue Event
        ///
        /// - Remark: Generated from `#/components/schemas/state-change-issue-event`.
        public struct state_hyphen_change_hyphen_issue_hyphen_event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/actor`.
            public var actor: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/event`.
            public var event: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_id`.
            public var commit_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/commit_url`.
            public var commit_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/state-change-issue-event/state_reason`.
            public var state_reason: Swift.String?
            /// Creates a new `state_hyphen_change_hyphen_issue_hyphen_event`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - actor:
            ///   - event:
            ///   - commit_id:
            ///   - commit_url:
            ///   - created_at:
            ///   - performed_via_github_app:
            ///   - state_reason:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                actor: Components.Schemas.simple_hyphen_user,
                event: Swift.String,
                commit_id: Swift.String? = nil,
                commit_url: Swift.String? = nil,
                created_at: Swift.String,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                state_reason: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.actor = actor
                self.event = event
                self.commit_id = commit_id
                self.commit_url = commit_url
                self.created_at = created_at
                self.performed_via_github_app = performed_via_github_app
                self.state_reason = state_reason
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case actor
                case event
                case commit_id
                case commit_url
                case created_at
                case performed_via_github_app
                case state_reason
            }
        }
        /// Timeline Event
        ///
        /// - Remark: Generated from `#/components/schemas/timeline-issue-events`.
        public struct timeline_hyphen_issue_hyphen_events: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value1`.
            public var value1: Components.Schemas.labeled_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value2`.
            public var value2: Components.Schemas.unlabeled_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value3`.
            public var value3: Components.Schemas.milestoned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value4`.
            public var value4: Components.Schemas.demilestoned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value5`.
            public var value5: Components.Schemas.renamed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value6`.
            public var value6: Components.Schemas.review_hyphen_requested_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value7`.
            public var value7: Components.Schemas.review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value8`.
            public var value8: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value9`.
            public var value9: Components.Schemas.locked_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value10`.
            public var value10: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value11`.
            public var value11: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value12`.
            public var value12: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value13`.
            public var value13: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value14`.
            public var value14: Components.Schemas.timeline_hyphen_comment_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value15`.
            public var value15: Components.Schemas.timeline_hyphen_cross_hyphen_referenced_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value16`.
            public var value16: Components.Schemas.timeline_hyphen_committed_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value17`.
            public var value17: Components.Schemas.timeline_hyphen_reviewed_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value18`.
            public var value18: Components.Schemas.timeline_hyphen_line_hyphen_commented_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value19`.
            public var value19: Components.Schemas.timeline_hyphen_commit_hyphen_commented_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value20`.
            public var value20: Components.Schemas.timeline_hyphen_assigned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value21`.
            public var value21: Components.Schemas.timeline_hyphen_unassigned_hyphen_issue_hyphen_event?
            /// - Remark: Generated from `#/components/schemas/timeline-issue-events/value22`.
            public var value22: Components.Schemas.state_hyphen_change_hyphen_issue_hyphen_event?
            /// Creates a new `timeline_hyphen_issue_hyphen_events`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            ///   - value7:
            ///   - value8:
            ///   - value9:
            ///   - value10:
            ///   - value11:
            ///   - value12:
            ///   - value13:
            ///   - value14:
            ///   - value15:
            ///   - value16:
            ///   - value17:
            ///   - value18:
            ///   - value19:
            ///   - value20:
            ///   - value21:
            ///   - value22:
            public init(
                value1: Components.Schemas.labeled_hyphen_issue_hyphen_event? = nil,
                value2: Components.Schemas.unlabeled_hyphen_issue_hyphen_event? = nil,
                value3: Components.Schemas.milestoned_hyphen_issue_hyphen_event? = nil,
                value4: Components.Schemas.demilestoned_hyphen_issue_hyphen_event? = nil,
                value5: Components.Schemas.renamed_hyphen_issue_hyphen_event? = nil,
                value6: Components.Schemas.review_hyphen_requested_hyphen_issue_hyphen_event? = nil,
                value7: Components.Schemas.review_hyphen_request_hyphen_removed_hyphen_issue_hyphen_event? = nil,
                value8: Components.Schemas.review_hyphen_dismissed_hyphen_issue_hyphen_event? = nil,
                value9: Components.Schemas.locked_hyphen_issue_hyphen_event? = nil,
                value10: Components.Schemas.added_hyphen_to_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value11: Components.Schemas.moved_hyphen_column_hyphen_in_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value12: Components.Schemas.removed_hyphen_from_hyphen_project_hyphen_issue_hyphen_event? = nil,
                value13: Components.Schemas.converted_hyphen_note_hyphen_to_hyphen_issue_hyphen_issue_hyphen_event? = nil,
                value14: Components.Schemas.timeline_hyphen_comment_hyphen_event? = nil,
                value15: Components.Schemas.timeline_hyphen_cross_hyphen_referenced_hyphen_event? = nil,
                value16: Components.Schemas.timeline_hyphen_committed_hyphen_event? = nil,
                value17: Components.Schemas.timeline_hyphen_reviewed_hyphen_event? = nil,
                value18: Components.Schemas.timeline_hyphen_line_hyphen_commented_hyphen_event? = nil,
                value19: Components.Schemas.timeline_hyphen_commit_hyphen_commented_hyphen_event? = nil,
                value20: Components.Schemas.timeline_hyphen_assigned_hyphen_issue_hyphen_event? = nil,
                value21: Components.Schemas.timeline_hyphen_unassigned_hyphen_issue_hyphen_event? = nil,
                value22: Components.Schemas.state_hyphen_change_hyphen_issue_hyphen_event? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
                self.value7 = value7
                self.value8 = value8
                self.value9 = value9
                self.value10 = value10
                self.value11 = value11
                self.value12 = value12
                self.value13 = value13
                self.value14 = value14
                self.value15 = value15
                self.value16 = value16
                self.value17 = value17
                self.value18 = value18
                self.value19 = value19
                self.value20 = value20
                self.value21 = value21
                self.value22 = value22
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value7 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value8 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value9 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value10 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value11 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value12 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value13 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value14 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value15 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value16 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value17 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value18 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value19 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value20 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value21 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    value22 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        value1,
                        value2,
                        value3,
                        value4,
                        value5,
                        value6,
                        value7,
                        value8,
                        value9,
                        value10,
                        value11,
                        value12,
                        value13,
                        value14,
                        value15,
                        value16,
                        value17,
                        value18,
                        value19,
                        value20,
                        value21,
                        value22
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try value1?.encode(to: encoder)
                try value2?.encode(to: encoder)
                try value3?.encode(to: encoder)
                try value4?.encode(to: encoder)
                try value5?.encode(to: encoder)
                try value6?.encode(to: encoder)
                try value7?.encode(to: encoder)
                try value8?.encode(to: encoder)
                try value9?.encode(to: encoder)
                try value10?.encode(to: encoder)
                try value11?.encode(to: encoder)
                try value12?.encode(to: encoder)
                try value13?.encode(to: encoder)
                try value14?.encode(to: encoder)
                try value15?.encode(to: encoder)
                try value16?.encode(to: encoder)
                try value17?.encode(to: encoder)
                try value18?.encode(to: encoder)
                try value19?.encode(to: encoder)
                try value20?.encode(to: encoder)
                try value21?.encode(to: encoder)
                try value22?.encode(to: encoder)
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/milestone`.
        public struct milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/milestone/state`.
            public var state: Components.Schemas.milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        public typealias comment_hyphen_id = Swift.Int64
        /// A list of comma separated label names. Example: `bug,ui,@high`
        ///
        /// - Remark: Generated from `#/components/parameters/labels`.
        public typealias labels = Swift.String
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen public enum sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The number that identifies the issue.
        ///
        /// - Remark: Generated from `#/components/parameters/issue-number`.
        public typealias issue_hyphen_number = Swift.Int
        /// The number that identifies the milestone.
        ///
        /// - Remark: Generated from `#/components/parameters/milestone-number`.
        public typealias milestone_hyphen_number = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
        public struct moved_permanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.moved_permanently.Body) {
                self.body = body
            }
        }
        public struct gone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/gone/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/gone/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.gone.Body
            /// Creates a new `gone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.gone.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List issues assigned to the authenticated user
    ///
    /// List issues assigned to the authenticated user across all visible repositories including owned repositories, member
    /// repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
    /// necessarily assigned to you.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /issues`.
    /// - Remark: Generated from `#/paths//issues/get(issues/list)`.
    public enum issues_sol_list {
        public static let id: Swift.String = "issues/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/issues/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case assigned = "assigned"
                    case created = "created"
                    case mentioned = "mentioned"
                    case subscribed = "subscribed"
                    case repos = "repos"
                    case all = "all"
                }
                /// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/filter`.
                public var filter: Operations.issues_sol_list.Input.Query.filterPayload?
                /// - Remark: Generated from `#/paths/issues/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/state`.
                public var state: Operations.issues_sol_list.Input.Query.statePayload?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/labels`.
                public var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/issues/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/sort`.
                public var sort: Operations.issues_sol_list.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/since`.
                public var since: Components.Parameters.since?
                /// - Remark: Generated from `#/paths/issues/GET/query/collab`.
                public var collab: Swift.Bool?
                /// - Remark: Generated from `#/paths/issues/GET/query/orgs`.
                public var orgs: Swift.Bool?
                /// - Remark: Generated from `#/paths/issues/GET/query/owned`.
                public var owned: Swift.Bool?
                /// - Remark: Generated from `#/paths/issues/GET/query/pulls`.
                public var pulls: Swift.Bool?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/issues/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///   - state: Indicates the state of the issues to return.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - collab:
                ///   - orgs:
                ///   - owned:
                ///   - pulls:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.issues_sol_list.Input.Query.filterPayload? = nil,
                    state: Operations.issues_sol_list.Input.Query.statePayload? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_sol_list.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    collab: Swift.Bool? = nil,
                    orgs: Swift.Bool? = nil,
                    owned: Swift.Bool? = nil,
                    pulls: Swift.Bool? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.state = state
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.collab = collab
                    self.orgs = orgs
                    self.owned = owned
                    self.pulls = pulls
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/issues/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.issues_sol_list.Input.Query = .init(),
                headers: Operations.issues_sol_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/issues/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/issues/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/issues/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//issues/get(issues/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//issues/get(issues/list)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//issues/get(issues/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//issues/get(issues/list)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List organization issues assigned to the authenticated user
    ///
    /// List issues in an organization assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/issues`.
    /// - Remark: Generated from `#/paths//orgs/{org}/issues/get(issues/list-for-org)`.
    public enum issues_sol_list_hyphen_for_hyphen_org {
        public static let id: Swift.String = "issues/list-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case assigned = "assigned"
                    case created = "created"
                    case mentioned = "mentioned"
                    case subscribed = "subscribed"
                    case repos = "repos"
                    case all = "all"
                }
                /// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/filter`.
                public var filter: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.filterPayload?
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/state`.
                public var state: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.statePayload?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/labels`.
                public var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/sort`.
                public var sort: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///   - state: Indicates the state of the issues to return.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.filterPayload? = nil,
                    state: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.statePayload? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.state = state
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Path,
                query: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/issues/get(issues/list-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/issues/get(issues/list-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List assignees
    ///
    /// Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/get(issues/list-assignees)`.
    public enum issues_sol_list_hyphen_assignees {
        public static let id: Swift.String = "issues/list-assignees"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_assignees.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_assignees.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_assignees.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_assignees.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_assignees.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_assignees.Input.Path,
                query: Operations.issues_sol_list_hyphen_assignees.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_assignees.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_assignees.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_assignees.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_assignees.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_assignees.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/get(issues/list-assignees)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_assignees.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_assignees.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/get(issues/list-assignees)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user can be assigned
    ///
    /// Checks if a user has permission to be assigned to an issue in this repository.
    ///
    /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/{assignee}/get(issues/check-user-can-be-assigned)`.
    public enum issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned {
        public static let id: Swift.String = "issues/check-user-can-be-assigned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/path/assignee`.
                public var assignee: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - assignee:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    assignee: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.assignee = assignee
                }
            }
            public var path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Path,
                headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/{assignee}/get(issues/check-user-can-be-assigned)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/assignees/{assignee}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Otherwise a `404` status code is returned.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/assignees/{assignee}/get(issues/check-user-can-be-assigned)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository issues
    ///
    /// List issues in a repository. Only open issues will be listed.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)`.
    public enum issues_sol_list_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "issues/list-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/milestone`.
                public var milestone: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/state`.
                public var state: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query.statePayload?
                /// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/assignee`.
                public var assignee: Swift.String?
                /// The user that created the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/creator`.
                public var creator: Swift.String?
                /// A user that's mentioned in the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/mentioned`.
                public var mentioned: Swift.String?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/labels`.
                public var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/sort`.
                public var sort: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - milestone: If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
                ///   - state: Indicates the state of the issues to return.
                ///   - assignee: Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
                ///   - creator: The user that created the issue.
                ///   - mentioned: A user that's mentioned in the issue.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    milestone: Swift.String? = nil,
                    state: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query.statePayload? = nil,
                    assignee: Swift.String? = nil,
                    creator: Swift.String? = nil,
                    mentioned: Swift.String? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.milestone = milestone
                    self.state = state
                    self.assignee = assignee
                    self.creator = creator
                    self.mentioned = mentioned
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/get(issues/list-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    public enum issues_sol_create {
        public static let id: Swift.String = "issues/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_create.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    @frozen public enum titlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    public var title: Operations.issues_sol_create.Input.Body.jsonPayload.titlePayload
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/body`.
                    public var body: Swift.String?
                    /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignee`.
                    public var assignee: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    @frozen public enum milestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    public var milestone: Operations.issues_sol_create.Input.Body.jsonPayload.milestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload`.
                    @frozen public enum labelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2`.
                        public struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/description`.
                            public var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2/color`.
                            public var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            public init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labelsPayload/case2`.
                        case case2(Operations.issues_sol_create.Input.Body.jsonPayload.labelsPayloadPayload.Case2Payload)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    public typealias labelsPayload = [Operations.issues_sol_create.Input.Body.jsonPayload.labelsPayloadPayload]
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    public var labels: Operations.issues_sol_create.Input.Body.jsonPayload.labelsPayload?
                    /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignees`.
                    public var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///   - assignees: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    public init(
                        title: Operations.issues_sol_create.Input.Body.jsonPayload.titlePayload,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        milestone: Operations.issues_sol_create.Input.Body.jsonPayload.milestonePayload? = nil,
                        labels: Operations.issues_sol_create.Input.Body.jsonPayload.labelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_create.Input.Path,
                headers: Operations.issues_sol_create.Input.Headers = .init(),
                body: Operations.issues_sol_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_create.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_create.Output.Created.Headers = .init(),
                    body: Operations.issues_sol_create.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_sol_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.issues_sol_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List issue comments for a repository
    ///
    /// You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// By default, issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)`.
    public enum issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "issues/list-comments-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen public enum sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/sort`.
                public var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// Either `asc` or `desc`. Ignored without the `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/direction`.
                public var direction: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.directionPayload?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: Either `asc` or `desc`. Ignored without the `sort` parameter.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Query.directionPayload? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_comments_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/get(issues/list-comments-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an issue comment
    ///
    /// You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/get(issues/get-comment)`.
    public enum issues_sol_get_hyphen_comment {
        public static let id: Swift.String = "issues/get-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.issues_sol_get_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_get_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_get_hyphen_comment.Input.Path,
                headers: Operations.issues_sol_get_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_get_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_get_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/get(issues/get-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_get_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_get_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/get(issues/get-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an issue comment
    ///
    /// You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/patch(issues/update-comment)`.
    public enum issues_sol_update_hyphen_comment {
        public static let id: Swift.String = "issues/update-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.issues_sol_update_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_update_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.issues_sol_update_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_update_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_update_hyphen_comment.Input.Path,
                headers: Operations.issues_sol_update_hyphen_comment.Input.Headers = .init(),
                body: Operations.issues_sol_update_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_update_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_update_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/patch(issues/update-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_update_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_update_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/patch(issues/update-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an issue comment
    ///
    /// You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/delete(issues/delete-comment)`.
    public enum issues_sol_delete_hyphen_comment {
        public static let id: Swift.String = "issues/delete-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/comments/{comment_id}/DELETE/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.issues_sol_delete_hyphen_comment.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.issues_sol_delete_hyphen_comment.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/comments/{comment_id}/delete(issues/delete-comment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_delete_hyphen_comment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_delete_hyphen_comment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List issue events for a repository
    ///
    /// Lists events for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/get(issues/list-events-for-repo)`.
    public enum issues_sol_list_hyphen_events_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "issues/list-events-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue_hyphen_event])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue_hyphen_event] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/get(issues/list-events-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/get(issues/list-events-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an issue event
    ///
    /// Gets a single event by the event id.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/events/{event_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)`.
    public enum issues_sol_get_hyphen_event {
        public static let id: Swift.String = "issues/get-event"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/path/event_id`.
                public var event_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - event_id:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    event_id: Swift.Int
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.event_id = event_id
                }
            }
            public var path: Operations.issues_sol_get_hyphen_event.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_event.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_event.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_get_hyphen_event.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_get_hyphen_event.Input.Path,
                headers: Operations.issues_sol_get_hyphen_event.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/events/{event_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue_hyphen_event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue_hyphen_event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_get_hyphen_event.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_get_hyphen_event.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_get_hyphen_event.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_get_hyphen_event.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/events/{event_id}/get(issues/get-event)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    public enum issues_sol_get {
        public static let id: Swift.String = "issues/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_get.Input.Path,
                headers: Operations.issues_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update an issue
    ///
    /// Issue owners and users with push access or Triage role can edit an issue.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)`.
    public enum issues_sol_update {
        public static let id: Swift.String = "issues/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    @frozen public enum titlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/title`.
                    public var title: Operations.issues_sol_update.Input.Body.jsonPayload.titlePayload?
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String?
                    /// Username to assign to this issue. **This field is deprecated.**
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignee`.
                    public var assignee: Swift.String?
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The open or closed state of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state`.
                    public var state: Operations.issues_sol_update.Input.Body.jsonPayload.statePayload?
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    @frozen public enum state_reasonPayload: String, Codable, Hashable, Sendable {
                        case completed = "completed"
                        case not_planned = "not_planned"
                        case reopened = "reopened"
                    }
                    /// The reason for the state change. Ignored unless `state` is changed.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/state_reason`.
                    public var state_reason: Operations.issues_sol_update.Input.Body.jsonPayload.state_reasonPayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    @frozen public enum milestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/milestone`.
                    public var milestone: Operations.issues_sol_update.Input.Body.jsonPayload.milestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload`.
                    @frozen public enum labelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2`.
                        public struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/id`.
                            public var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/name`.
                            public var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/description`.
                            public var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2/color`.
                            public var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            public init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labelsPayload/case2`.
                        case case2(Operations.issues_sol_update.Input.Body.jsonPayload.labelsPayloadPayload.Case2Payload)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    public typealias labelsPayload = [Operations.issues_sol_update.Input.Body.jsonPayload.labelsPayloadPayload]
                    /// Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/labels`.
                    public var labels: Operations.issues_sol_update.Input.Body.jsonPayload.labelsPayload?
                    /// Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/json/assignees`.
                    public var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Username to assign to this issue. **This field is deprecated.**
                    ///   - state: The open or closed state of the issue.
                    ///   - state_reason: The reason for the state change. Ignored unless `state` is changed.
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
                    ///   - assignees: Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
                    public init(
                        title: Operations.issues_sol_update.Input.Body.jsonPayload.titlePayload? = nil,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        state: Operations.issues_sol_update.Input.Body.jsonPayload.statePayload? = nil,
                        state_reason: Operations.issues_sol_update.Input.Body.jsonPayload.state_reasonPayload? = nil,
                        milestone: Operations.issues_sol_update.Input.Body.jsonPayload.milestonePayload? = nil,
                        labels: Operations.issues_sol_update.Input.Body.jsonPayload.labelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.state = state
                        self.state_reason = state_reason
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case state
                        case state_reason
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.issues_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_update.Input.Path,
                headers: Operations.issues_sol_update.Input.Headers = .init(),
                body: Operations.issues_sol_update.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/patch(issues/update)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add assignees to an issue
    ///
    /// Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/post(issues/add-assignees)`.
    public enum issues_sol_add_hyphen_assignees {
        public static let id: Swift.String = "issues/add-assignees"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_add_hyphen_assignees.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_add_hyphen_assignees.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_add_hyphen_assignees.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_add_hyphen_assignees.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/requestBody/json/assignees`.
                    public var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - assignees: Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
                    public init(assignees: [Swift.String]? = nil) {
                        self.assignees = assignees
                    }
                    public enum CodingKeys: String, CodingKey {
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_add_hyphen_assignees.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_add_hyphen_assignees.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_add_hyphen_assignees.Input.Path,
                headers: Operations.issues_sol_add_hyphen_assignees.Input.Headers = .init(),
                body: Operations.issues_sol_add_hyphen_assignees.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_add_hyphen_assignees.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_add_hyphen_assignees.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/post(issues/add-assignees)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_sol_add_hyphen_assignees.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.issues_sol_add_hyphen_assignees.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove assignees from an issue
    ///
    /// Removes one or more assignees from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/delete(issues/remove-assignees)`.
    public enum issues_sol_remove_hyphen_assignees {
        public static let id: Swift.String = "issues/remove-assignees"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_remove_hyphen_assignees.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_assignees.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_assignees.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_remove_hyphen_assignees.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/requestBody/json/assignees`.
                    public var assignees: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - assignees: Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
                    public init(assignees: [Swift.String]? = nil) {
                        self.assignees = assignees
                    }
                    public enum CodingKeys: String, CodingKey {
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/requestBody/content/application\/json`.
                case json(Operations.issues_sol_remove_hyphen_assignees.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_remove_hyphen_assignees.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_remove_hyphen_assignees.Input.Path,
                headers: Operations.issues_sol_remove_hyphen_assignees.Input.Headers = .init(),
                body: Operations.issues_sol_remove_hyphen_assignees.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_remove_hyphen_assignees.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_remove_hyphen_assignees.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/delete(issues/remove-assignees)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_remove_hyphen_assignees.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_remove_hyphen_assignees.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a user can be assigned to a issue
    ///
    /// Checks if a user has permission to be assigned to a specific issue.
    ///
    /// If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
    ///
    /// Otherwise a `404` status code is returned.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/get(issues/check-user-can-be-assigned-to-issue)`.
    public enum issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue {
        public static let id: Swift.String = "issues/check-user-can-be-assigned-to-issue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/path/assignee`.
                public var assignee: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                ///   - assignee:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number,
                    assignee: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                    self.assignee = assignee
                }
            }
            public var path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Path,
                headers: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if `assignee` can be assigned to `issue_number`
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/get(issues/check-user-can-be-assigned-to-issue)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Response if `assignee` can not be assigned to `issue_number`
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}/get(issues/check-user-can-be-assigned-to-issue)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.issues_sol_check_hyphen_user_hyphen_can_hyphen_be_hyphen_assigned_hyphen_to_hyphen_issue.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List issue comments
    ///
    /// You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// Issue comments are ordered by ascending ID.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)`.
    public enum issues_sol_list_hyphen_comments {
        public static let id: Swift.String = "issues/list-comments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_list_hyphen_comments.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_comments.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_comments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_comments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_comments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_comments.Input.Path,
                query: Operations.issues_sol_list_hyphen_comments.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_comments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_comments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_comments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_comments.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_comments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_comments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_comments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/get(issues/list-comments)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue comment
    ///
    /// You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    /// Creating content too quickly using this endpoint may result in secondary rate limiting.
    /// For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/comments`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)`.
    public enum issues_sol_create_hyphen_comment {
        public static let id: Swift.String = "issues/create-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_create_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_create_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The contents of the comment.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The contents of the comment.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_create_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_create_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_create_hyphen_comment.Input.Path,
                headers: Operations.issues_sol_create_hyphen_comment.Input.Headers = .init(),
                body: Operations.issues_sol_create_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_create_hyphen_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.issue_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.issue_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_create_hyphen_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_create_hyphen_comment.Output.Created.Headers = .init(),
                    body: Operations.issues_sol_create_hyphen_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_sol_create_hyphen_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.issues_sol_create_hyphen_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/comments/post(issues/create-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List issue events
    ///
    /// Lists all events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/events`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/events/get(issues/list-events)`.
    public enum issues_sol_list_hyphen_events {
        public static let id: Swift.String = "issues/list-events"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_list_hyphen_events.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_events.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_events.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_events.Input.Path,
                query: Operations.issues_sol_list_hyphen_events.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_events.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_events.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/events/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue_hyphen_event_hyphen_for_hyphen_issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue_hyphen_event_hyphen_for_hyphen_issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_events.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_events.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_events.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/events/get(issues/list-events)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_events.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_events.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/events/get(issues/list-events)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List labels for an issue
    ///
    /// Lists all labels for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)`.
    public enum issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue {
        public static let id: Swift.String = "issues/list-labels-on-issue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Path,
                query: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_labels_hyphen_on_hyphen_issue.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/get(issues/list-labels-on-issue)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add labels to an issue
    ///
    /// Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. 
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)`.
    public enum issues_sol_add_hyphen_labels {
        public static let id: Swift.String = "issues/add-labels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_add_hyphen_labels.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_add_hyphen_labels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_add_hyphen_labels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_add_hyphen_labels.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case1/labels`.
                        public var labels: [Swift.String]?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - labels: The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
                        public init(labels: [Swift.String]? = nil) {
                            self.labels = labels
                        }
                        public enum CodingKeys: String, CodingKey {
                            case labels
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case1`.
                    case case1(Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case2`.
                    case case2([Swift.String])
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3`.
                    public struct Case3Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3/labelsPayload`.
                        public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3/labelsPayload/name`.
                            public var name: Swift.String
                            /// Creates a new `labelsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - name:
                            public init(name: Swift.String) {
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3/labels`.
                        public typealias labelsPayload = [Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayloadPayload]
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3/labels`.
                        public var labels: Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayload?
                        /// Creates a new `Case3Payload`.
                        ///
                        /// - Parameters:
                        ///   - labels:
                        public init(labels: Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayload? = nil) {
                            self.labels = labels
                        }
                        public enum CodingKeys: String, CodingKey {
                            case labels
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case3`.
                    case case3(Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case3Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/Case4Payload`.
                    public struct Case4PayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/Case4Payload/name`.
                        public var name: Swift.String
                        /// Creates a new `Case4PayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - name:
                        public init(name: Swift.String) {
                            self.name = name
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case4`.
                    public typealias Case4Payload = [Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case4PayloadPayload]
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case4`.
                    case case4(Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload.Case4Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/json/case5`.
                    case case5(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case4(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case5(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try value.encode(to: encoder)
                        case let .case4(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case5(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_add_hyphen_labels.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_add_hyphen_labels.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_add_hyphen_labels.Input.Path,
                headers: Operations.issues_sol_add_hyphen_labels.Input.Headers = .init(),
                body: Operations.issues_sol_add_hyphen_labels.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/POST/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_add_hyphen_labels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_add_hyphen_labels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_add_hyphen_labels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_add_hyphen_labels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/post(issues/add-labels)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set labels for an issue
    ///
    /// Removes any previous labels and sets the new labels for an issue.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)`.
    public enum issues_sol_set_hyphen_labels {
        public static let id: Swift.String = "issues/set-labels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_set_hyphen_labels.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_set_hyphen_labels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_set_hyphen_labels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_set_hyphen_labels.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json`.
                @frozen public enum jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case1`.
                    public struct Case1Payload: Codable, Hashable, Sendable {
                        /// The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case1/labels`.
                        public var labels: [Swift.String]?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - labels: The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
                        public init(labels: [Swift.String]? = nil) {
                            self.labels = labels
                        }
                        public enum CodingKeys: String, CodingKey {
                            case labels
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case1`.
                    case case1(Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case2`.
                    case case2([Swift.String])
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3`.
                    public struct Case3Payload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3/labelsPayload`.
                        public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3/labelsPayload/name`.
                            public var name: Swift.String
                            /// Creates a new `labelsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - name:
                            public init(name: Swift.String) {
                                self.name = name
                            }
                            public enum CodingKeys: String, CodingKey {
                                case name
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3/labels`.
                        public typealias labelsPayload = [Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayloadPayload]
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3/labels`.
                        public var labels: Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayload?
                        /// Creates a new `Case3Payload`.
                        ///
                        /// - Parameters:
                        ///   - labels:
                        public init(labels: Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case3Payload.labelsPayload? = nil) {
                            self.labels = labels
                        }
                        public enum CodingKeys: String, CodingKey {
                            case labels
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case3`.
                    case case3(Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case3Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/Case4Payload`.
                    public struct Case4PayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/Case4Payload/name`.
                        public var name: Swift.String
                        /// Creates a new `Case4PayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - name:
                        public init(name: Swift.String) {
                            self.name = name
                        }
                        public enum CodingKeys: String, CodingKey {
                            case name
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case4`.
                    public typealias Case4Payload = [Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case4PayloadPayload]
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case4`.
                    case case4(Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload.Case4Payload)
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/json/case5`.
                    case case5(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case4(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case5(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try value.encode(to: encoder)
                        case let .case4(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case5(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/requestBody/content/application\/json`.
                case json(Operations.issues_sol_set_hyphen_labels.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_set_hyphen_labels.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_set_hyphen_labels.Input.Path,
                headers: Operations.issues_sol_set_hyphen_labels.Input.Headers = .init(),
                body: Operations.issues_sol_set_hyphen_labels.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/PUT/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_set_hyphen_labels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_set_hyphen_labels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_set_hyphen_labels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_set_hyphen_labels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/put(issues/set-labels)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove all labels from an issue
    ///
    /// Removes all labels from an issue.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)`.
    public enum issues_sol_remove_hyphen_all_hyphen_labels {
        public static let id: Swift.String = "issues/remove-all-labels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/DELETE/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_all_hyphen_labels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_all_hyphen_labels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Path,
                headers: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_remove_hyphen_all_hyphen_labels.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_remove_hyphen_all_hyphen_labels.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/delete(issues/remove-all-labels)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a label from an issue
    ///
    /// Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)`.
    public enum issues_sol_remove_hyphen_label {
        public static let id: Swift.String = "issues/remove-label"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/path/name`.
                public var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                ///   - name:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                    self.name = name
                }
            }
            public var path: Operations.issues_sol_remove_hyphen_label.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_label.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_remove_hyphen_label.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_remove_hyphen_label.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_remove_hyphen_label.Input.Path,
                headers: Operations.issues_sol_remove_hyphen_label.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/DELETE/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_remove_hyphen_label.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_remove_hyphen_label.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_remove_hyphen_label.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_remove_hyphen_label.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/labels/{name}/delete(issues/remove-label)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lock an issue
    ///
    /// Users with push access can lock an issue or pull request's conversation.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)`.
    public enum issues_sol_lock {
        public static let id: Swift.String = "issues/lock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_lock.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_lock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_lock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_lock.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
                    ///  * `off-topic`  
                    ///  * `too heated`  
                    ///  * `resolved`  
                    ///  * `spam`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/requestBody/json/lock_reason`.
                    @frozen public enum lock_reasonPayload: String, Codable, Hashable, Sendable {
                        case off_hyphen_topic = "off-topic"
                        case too_space_heated = "too heated"
                        case resolved = "resolved"
                        case spam = "spam"
                    }
                    /// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
                    ///  * `off-topic`  
                    ///  * `too heated`  
                    ///  * `resolved`  
                    ///  * `spam`
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/requestBody/json/lock_reason`.
                    public var lock_reason: Operations.issues_sol_lock.Input.Body.jsonPayload.lock_reasonPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - lock_reason: The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
                    public init(lock_reason: Operations.issues_sol_lock.Input.Body.jsonPayload.lock_reasonPayload? = nil) {
                        self.lock_reason = lock_reason
                    }
                    public enum CodingKeys: String, CodingKey {
                        case lock_reason
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/PUT/requestBody/content/application\/json`.
                case json(Operations.issues_sol_lock.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_lock.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_lock.Input.Path,
                headers: Operations.issues_sol_lock.Input.Headers = .init(),
                body: Operations.issues_sol_lock.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_lock.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_lock.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/put(issues/lock)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unlock an issue
    ///
    /// Users with push access can unlock an issue's conversation.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)`.
    public enum issues_sol_unlock {
        public static let id: Swift.String = "issues/unlock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/DELETE/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_unlock.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/lock/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_unlock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_unlock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_unlock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_unlock.Input.Path,
                headers: Operations.issues_sol_unlock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_unlock.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_unlock.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/lock/delete(issues/unlock)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List timeline events for an issue
    ///
    /// List all timeline events for an issue.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)`.
    public enum issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline {
        public static let id: Swift.String = "issues/list-events-for-timeline"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/path/issue_number`.
                public var issue_number: Components.Parameters.issue_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issue_number: The number that identifies the issue.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    issue_number: Components.Parameters.issue_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issue_number = issue_number
                }
            }
            public var path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Path,
                query: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/timeline/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.timeline_hyphen_issue_hyphen_events])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.timeline_hyphen_issue_hyphen_events] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_events_hyphen_for_hyphen_timeline.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/timeline/get(issues/list-events-for-timeline)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            public var gone: Components.Responses.gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List labels for a repository
    ///
    /// Lists all labels for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(issues/list-labels-for-repo)`.
    public enum issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "issues/list-labels-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(issues/list-labels-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(issues/list-labels-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a label
    ///
    /// Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)`.
    public enum issues_sol_create_hyphen_label {
        public static let id: Swift.String = "issues/create-label"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_create_hyphen_label.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_label.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_label.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_create_hyphen_label.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json/color`.
                    public var color: Swift.String?
                    /// A short description of the label. Must be 100 characters or fewer.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                    ///   - color: The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
                    ///   - description: A short description of the label. Must be 100 characters or fewer.
                    public init(
                        name: Swift.String,
                        color: Swift.String? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.name = name
                        self.color = color
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case color
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_create_hyphen_label.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_create_hyphen_label.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_create_hyphen_label.Input.Path,
                headers: Operations.issues_sol_create_hyphen_label.Input.Headers = .init(),
                body: Operations.issues_sol_create_hyphen_label.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_create_hyphen_label.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_create_hyphen_label.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_create_hyphen_label.Output.Created.Headers = .init(),
                    body: Operations.issues_sol_create_hyphen_label.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_sol_create_hyphen_label.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.issues_sol_create_hyphen_label.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(issues/create-label)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a label
    ///
    /// Gets a label using the given name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(issues/get-label)`.
    public enum issues_sol_get_hyphen_label {
        public static let id: Swift.String = "issues/get-label"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/name`.
                public var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.issues_sol_get_hyphen_label.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_label.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_label.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_get_hyphen_label.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_get_hyphen_label.Input.Path,
                headers: Operations.issues_sol_get_hyphen_label.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_get_hyphen_label.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_get_hyphen_label.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(issues/get-label)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_get_hyphen_label.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_get_hyphen_label.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(issues/get-label)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a label
    ///
    /// Updates a label using the given label name.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(issues/update-label)`.
    public enum issues_sol_update_hyphen_label {
        public static let id: Swift.String = "issues/update-label"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/name`.
                public var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.issues_sol_update_hyphen_label.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_label.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_label.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_update_hyphen_label.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json/new_name`.
                    public var new_name: Swift.String?
                    /// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json/color`.
                    public var color: Swift.String?
                    /// A short description of the label. Must be 100 characters or fewer.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - new_name: The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
                    ///   - color: The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
                    ///   - description: A short description of the label. Must be 100 characters or fewer.
                    public init(
                        new_name: Swift.String? = nil,
                        color: Swift.String? = nil,
                        description: Swift.String? = nil
                    ) {
                        self.new_name = new_name
                        self.color = color
                        self.description = description
                    }
                    public enum CodingKeys: String, CodingKey {
                        case new_name
                        case color
                        case description
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.issues_sol_update_hyphen_label.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_update_hyphen_label.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_update_hyphen_label.Input.Path,
                headers: Operations.issues_sol_update_hyphen_label.Input.Headers = .init(),
                body: Operations.issues_sol_update_hyphen_label.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_update_hyphen_label.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_update_hyphen_label.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(issues/update-label)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_update_hyphen_label.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_update_hyphen_label.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a label
    ///
    /// Deletes a label using the given label name.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(issues/delete-label)`.
    public enum issues_sol_delete_hyphen_label {
        public static let id: Swift.String = "issues/delete-label"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/name`.
                public var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - name:
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            public var path: Operations.issues_sol_delete_hyphen_label.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.issues_sol_delete_hyphen_label.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(issues/delete-label)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_delete_hyphen_label.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_delete_hyphen_label.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List milestones
    ///
    /// Lists milestones for a repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/get(issues/list-milestones)`.
    public enum issues_sol_list_hyphen_milestones {
        public static let id: Swift.String = "issues/list-milestones"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_list_hyphen_milestones.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// The state of the milestone. Either `open`, `closed`, or `all`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/state`.
                public var state: Operations.issues_sol_list_hyphen_milestones.Input.Query.statePayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case due_on = "due_on"
                    case completeness = "completeness"
                }
                /// What to sort results by. Either `due_on` or `completeness`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/sort`.
                public var sort: Operations.issues_sol_list_hyphen_milestones.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction of the sort. Either `asc` or `desc`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/direction`.
                public var direction: Operations.issues_sol_list_hyphen_milestones.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: The state of the milestone. Either `open`, `closed`, or `all`.
                ///   - sort: What to sort results by. Either `due_on` or `completeness`.
                ///   - direction: The direction of the sort. Either `asc` or `desc`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    state: Operations.issues_sol_list_hyphen_milestones.Input.Query.statePayload? = nil,
                    sort: Operations.issues_sol_list_hyphen_milestones.Input.Query.sortPayload? = nil,
                    direction: Operations.issues_sol_list_hyphen_milestones.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.state = state
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_milestones.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_milestones.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_milestones.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_milestones.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_milestones.Input.Path,
                query: Operations.issues_sol_list_hyphen_milestones.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_milestones.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_milestones.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.milestone])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.milestone] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_milestones.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_milestones.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_milestones.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/get(issues/list-milestones)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_milestones.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_milestones.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/get(issues/list-milestones)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a milestone
    ///
    /// Creates a milestone.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/milestones`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)`.
    public enum issues_sol_create_hyphen_milestone {
        public static let id: Swift.String = "issues/create-milestone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.issues_sol_create_hyphen_milestone.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_milestone.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_create_hyphen_milestone.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_create_hyphen_milestone.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// The state of the milestone. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json/state`.
                    public var state: Operations.issues_sol_create_hyphen_milestone.Input.Body.jsonPayload.statePayload?
                    /// A description of the milestone.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/json/due_on`.
                    public var due_on: Foundation.Date?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the milestone.
                    ///   - state: The state of the milestone. Either `open` or `closed`.
                    ///   - description: A description of the milestone.
                    ///   - due_on: The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                    public init(
                        title: Swift.String,
                        state: Operations.issues_sol_create_hyphen_milestone.Input.Body.jsonPayload.statePayload? = nil,
                        description: Swift.String? = nil,
                        due_on: Foundation.Date? = nil
                    ) {
                        self.title = title
                        self.state = state
                        self.description = description
                        self.due_on = due_on
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case state
                        case description
                        case due_on
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/requestBody/content/application\/json`.
                case json(Operations.issues_sol_create_hyphen_milestone.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_create_hyphen_milestone.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_create_hyphen_milestone.Input.Path,
                headers: Operations.issues_sol_create_hyphen_milestone.Input.Headers = .init(),
                body: Operations.issues_sol_create_hyphen_milestone.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_create_hyphen_milestone.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.milestone)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.milestone {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_create_hyphen_milestone.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_create_hyphen_milestone.Output.Created.Headers = .init(),
                    body: Operations.issues_sol_create_hyphen_milestone.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.issues_sol_create_hyphen_milestone.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.issues_sol_create_hyphen_milestone.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/post(issues/create-milestone)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a milestone
    ///
    /// Gets a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/get(issues/get-milestone)`.
    public enum issues_sol_get_hyphen_milestone {
        public static let id: Swift.String = "issues/get-milestone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the milestone.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/path/milestone_number`.
                public var milestone_number: Components.Parameters.milestone_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - milestone_number: The number that identifies the milestone.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    milestone_number: Components.Parameters.milestone_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.milestone_number = milestone_number
                }
            }
            public var path: Operations.issues_sol_get_hyphen_milestone.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_milestone.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_get_hyphen_milestone.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_get_hyphen_milestone.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_get_hyphen_milestone.Input.Path,
                headers: Operations.issues_sol_get_hyphen_milestone.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.milestone)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.milestone {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_get_hyphen_milestone.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_get_hyphen_milestone.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/get(issues/get-milestone)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_get_hyphen_milestone.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_get_hyphen_milestone.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/get(issues/get-milestone)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a milestone
    ///
    ///
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/patch(issues/update-milestone)`.
    public enum issues_sol_update_hyphen_milestone {
        public static let id: Swift.String = "issues/update-milestone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the milestone.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/path/milestone_number`.
                public var milestone_number: Components.Parameters.milestone_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - milestone_number: The number that identifies the milestone.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    milestone_number: Components.Parameters.milestone_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.milestone_number = milestone_number
                }
            }
            public var path: Operations.issues_sol_update_hyphen_milestone.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_milestone.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_update_hyphen_milestone.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_update_hyphen_milestone.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The title of the milestone.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The state of the milestone. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// The state of the milestone. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json/state`.
                    public var state: Operations.issues_sol_update_hyphen_milestone.Input.Body.jsonPayload.statePayload?
                    /// A description of the milestone.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/json/due_on`.
                    public var due_on: Foundation.Date?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the milestone.
                    ///   - state: The state of the milestone. Either `open` or `closed`.
                    ///   - description: A description of the milestone.
                    ///   - due_on: The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                    public init(
                        title: Swift.String? = nil,
                        state: Operations.issues_sol_update_hyphen_milestone.Input.Body.jsonPayload.statePayload? = nil,
                        description: Swift.String? = nil,
                        due_on: Foundation.Date? = nil
                    ) {
                        self.title = title
                        self.state = state
                        self.description = description
                        self.due_on = due_on
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case state
                        case description
                        case due_on
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.issues_sol_update_hyphen_milestone.Input.Body.jsonPayload)
            }
            public var body: Operations.issues_sol_update_hyphen_milestone.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.issues_sol_update_hyphen_milestone.Input.Path,
                headers: Operations.issues_sol_update_hyphen_milestone.Input.Headers = .init(),
                body: Operations.issues_sol_update_hyphen_milestone.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.milestone)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.milestone {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_update_hyphen_milestone.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.issues_sol_update_hyphen_milestone.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/patch(issues/update-milestone)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_update_hyphen_milestone.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_update_hyphen_milestone.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a milestone
    ///
    /// Deletes a milestone using the given milestone number.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/milestones/{milestone_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/delete(issues/delete-milestone)`.
    public enum issues_sol_delete_hyphen_milestone {
        public static let id: Swift.String = "issues/delete-milestone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the milestone.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/DELETE/path/milestone_number`.
                public var milestone_number: Components.Parameters.milestone_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - milestone_number: The number that identifies the milestone.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    milestone_number: Components.Parameters.milestone_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.milestone_number = milestone_number
                }
            }
            public var path: Operations.issues_sol_delete_hyphen_milestone.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_delete_hyphen_milestone.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_delete_hyphen_milestone.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_delete_hyphen_milestone.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.issues_sol_delete_hyphen_milestone.Input.Path,
                headers: Operations.issues_sol_delete_hyphen_milestone.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/delete(issues/delete-milestone)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.issues_sol_delete_hyphen_milestone.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.issues_sol_delete_hyphen_milestone.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/delete(issues/delete-milestone)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List labels for issues in a milestone
    ///
    /// Lists labels for issues in a milestone.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/labels/get(issues/list-labels-for-milestone)`.
    public enum issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone {
        public static let id: Swift.String = "issues/list-labels-for-milestone"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies the milestone.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/path/milestone_number`.
                public var milestone_number: Components.Parameters.milestone_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - milestone_number: The number that identifies the milestone.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    milestone_number: Components.Parameters.milestone_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.milestone_number = milestone_number
                }
            }
            public var path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Path,
                query: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/milestones/{milestone_number}/labels/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.label])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.label] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/milestones/{milestone_number}/labels/get(issues/list-labels-for-milestone)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_labels_hyphen_for_hyphen_milestone.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List user account issues assigned to the authenticated user
    ///
    /// List issues across owned and member repositories assigned to the authenticated user.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /user/issues`.
    /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)`.
    public enum issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "issues/list-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/issues/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/issues/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable {
                    case assigned = "assigned"
                    case created = "created"
                    case mentioned = "mentioned"
                    case subscribed = "subscribed"
                    case repos = "repos"
                    case all = "all"
                }
                /// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/filter`.
                public var filter: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.filterPayload?
                /// - Remark: Generated from `#/paths/user/issues/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case closed = "closed"
                    case all = "all"
                }
                /// Indicates the state of the issues to return.
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/state`.
                public var state: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.statePayload?
                /// A list of comma separated label names. Example: `bug,ui,@high`
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/labels`.
                public var labels: Components.Parameters.labels?
                /// - Remark: Generated from `#/paths/user/issues/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case comments = "comments"
                }
                /// What to sort results by.
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/sort`.
                public var sort: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/issues/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
                ///   - state: Indicates the state of the issues to return.
                ///   - labels: A list of comma separated label names. Example: `bug,ui,@high`
                ///   - sort: What to sort results by.
                ///   - direction: The direction to sort the results by.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    filter: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.filterPayload? = nil,
                    state: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.statePayload? = nil,
                    labels: Components.Parameters.labels? = nil,
                    sort: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query.sortPayload? = nil,
                    direction: Components.Parameters.direction? = nil,
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.filter = filter
                    self.state = state
                    self.labels = labels
                    self.sort = sort
                    self.direction = direction
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/issues/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/issues/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/issues/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/issues/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/issues/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.issue])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.issue] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.issues_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/issues/get(issues/list-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
