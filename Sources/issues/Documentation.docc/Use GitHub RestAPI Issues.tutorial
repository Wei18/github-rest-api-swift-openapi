@Tutorials(time: 10) {
    
    @XcodeRequirement(title: "Swift 5.9 ", destination: "https://developer.apple.com/download/applications/")

    @Intro(title: "Use a client in a Swift package") {
        This tutorial guides you use GithubAPI Swift client, from scratch!

        Your Swift package will make use of the Swift OpenAPI Generator plugin to generate the code you'll use to call this API.
    }
    
    @Section(title: "Configuring your project to use GitHubRestAPISwiftOpenAPI") {
        Let's extend this sample package to call `GitHub API`.
        @Steps {
            @Step {
                Update the `Package.swift` by adding the package dependencies.
                @Code(name: "Package.swift", file: client.Package.1.swift, previousFile: client.Package.0.swift)
            }
            @Step {
                Finally, we need to declare the runtime dependencies for our target.
                @Code(name: "Package.swift", file: client.Package.2.swift)
            }
            @Step {
                Build the project now to ensure it's configured correctly.
                @Code(name: "Package.swift", file: client.Package.3.swift)
            }
        }
    }
    
    @Section(title: "Using the code in your target") {

        Now we're ready to use the Github API Swift code.
        
        @Steps {
            @Step {
                Create a File.swift 
                
                We'll make changes to this file to make use of the code to call the `GitHubRestAPIIssues` API.
                @Code(name: "File.swift", file: client.file.0.swift)
            }
            @Step {
                First we'll need to import our 5 runtime dependencies.
                @Code(name: "File.swift", file: client.file.1.swift)
            }
            @Step {
                Next we'll create an instance of our client.

                Note: `Servers.server1()` is the github service, defined in the OpenAPI document.
                @Code(name: "File.swift", file: client.file.2.swift)
            }
            @Step {
                Finally, we can use the client to make a request and print the response.
                @Code(name: "File.swift", file: client.file.3.swift)
            }
        }
    }

    @Section(title: "Pattern matching on the response") {
        Often we'd want to do a bit more than just print the high-level response
        value. For example, we might like to branch our code based on the response we
        received from the server.
        
        @Steps {
            @Step {
                Add a `switch` statement to handle the different possible responses from the server.
                
                Something's missing here, and if you recompile your package you'll see that the compiler helpfully tells you that your `switch` statement didn't cover all scenarios.
                @Code(name: "File.swift", file: client.file.4.swift, previousFile: client.file.3.swift)
            }
            @Step {
                In the event the server provides a response that doesn't conform to the API specification, you still have an opportunity as a client to handle it gracefully. We'll do so by printing a helpful message, indicating that our client doesn't know what to do with this because it hasn't been updated to handle this kind of response.
                
                Everything should now compile again.
                @Code(name: "File.swift", file: client.file.5.swift)
            }
            @Step {
                Finally, let's extract and print the content from the response body.
                
                The `switch` statement over the body allows you to handle the different content types that are specified for the API operation.
                @Code(name: "File.swift", file: client.file.6.swift)
            }
        }
    }
