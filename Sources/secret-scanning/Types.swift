// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List secret scanning alerts for an enterprise
    ///
    /// Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
    /// To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)`.
    func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(_ input: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output
    /// List secret scanning alerts for an organization
    ///
    /// Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
    /// To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)`.
    func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org(_ input: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output
    /// List secret scanning alerts for a repository
    ///
    /// Lists secret scanning alerts for an eligible repository, from newest to oldest.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)`.
    func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(_ input: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output
    /// Get a secret scanning alert
    ///
    /// Gets a single secret scanning alert detected in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)`.
    func secret_hyphen_scanning_sol_get_hyphen_alert(_ input: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input) async throws -> Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output
    /// Update a secret scanning alert
    ///
    /// Updates the status of a secret scanning alert in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)`.
    func secret_hyphen_scanning_sol_update_hyphen_alert(_ input: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input) async throws -> Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output
    /// List locations for a secret scanning alert
    ///
    /// Lists all locations for a given secret scanning alert for an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)`.
    func secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert(_ input: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List secret scanning alerts for an enterprise
    ///
    /// Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
    /// To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)`.
    public func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(
        path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path,
        query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query = .init(),
        headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers = .init()
    ) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output {
        try await secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List secret scanning alerts for an organization
    ///
    /// Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
    /// To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)`.
    public func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org(
        path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path,
        query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output {
        try await secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List secret scanning alerts for a repository
    ///
    /// Lists secret scanning alerts for an eligible repository, from newest to oldest.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)`.
    public func secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(
        path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output {
        try await secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a secret scanning alert
    ///
    /// Gets a single secret scanning alert detected in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)`.
    public func secret_hyphen_scanning_sol_get_hyphen_alert(
        path: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Path,
        headers: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Headers = .init()
    ) async throws -> Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output {
        try await secret_hyphen_scanning_sol_get_hyphen_alert(Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a secret scanning alert
    ///
    /// Updates the status of a secret scanning alert in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)`.
    public func secret_hyphen_scanning_sol_update_hyphen_alert(
        path: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Path,
        headers: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Headers = .init(),
        body: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Body
    ) async throws -> Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output {
        try await secret_hyphen_scanning_sol_update_hyphen_alert(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List locations for a secret scanning alert
    ///
    /// Lists all locations for a given secret scanning alert for an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)`.
    public func secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert(
        path: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Path,
        query: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Query = .init(),
        headers: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Headers = .init()
    ) async throws -> Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output {
        try await secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert(Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// The security alert number.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-number`.
        public typealias alert_hyphen_number = Swift.Int
        /// The REST API URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-url`.
        public typealias alert_hyphen_url = Swift.String
        /// The GitHub URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-html-url`.
        public typealias alert_hyphen_html_hyphen_url = Swift.String
        /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-created-at`.
        public typealias alert_hyphen_created_hyphen_at = Foundation.Date
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        public struct simple_hyphen_repository: Codable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            public var id: Swift.Int
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            public var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            public var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            public var html_url: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            public var description: Swift.String?
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            public var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            public var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            public var archive_url: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            public var branches_url: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            public var comments_url: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            public var commits_url: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            public var compare_url: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            public var contents_url: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            public var events_url: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            public var forks_url: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            public var issues_url: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            public var keys_url: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            public var labels_url: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            public var languages_url: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            public var merges_url: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            public var releases_url: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            public var tags_url: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            public var teams_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            public var trees_url: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// Creates a new `simple_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - node_id: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - full_name: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - html_url: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archive_url: A template for the API URL to download the repository as an archive.
            ///   - assignees_url: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobs_url: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branches_url: A template for the API URL to get information about branches in the repository.
            ///   - collaborators_url: A template for the API URL to get information about collaborators of the repository.
            ///   - comments_url: A template for the API URL to get information about comments on the repository.
            ///   - commits_url: A template for the API URL to get information about commits on the repository.
            ///   - compare_url: A template for the API URL to compare two commits or refs.
            ///   - contents_url: A template for the API URL to get the contents of the repository.
            ///   - contributors_url: A template for the API URL to list the contributors to the repository.
            ///   - deployments_url: The API URL to list the deployments of the repository.
            ///   - downloads_url: The API URL to list the downloads on the repository.
            ///   - events_url: The API URL to list the events of the repository.
            ///   - forks_url: The API URL to list the forks of the repository.
            ///   - git_commits_url: A template for the API URL to get information about Git commits of the repository.
            ///   - git_refs_url: A template for the API URL to get information about Git refs of the repository.
            ///   - git_tags_url: A template for the API URL to get information about Git tags of the repository.
            ///   - issue_comment_url: A template for the API URL to get information about issue comments on the repository.
            ///   - issue_events_url: A template for the API URL to get information about issue events on the repository.
            ///   - issues_url: A template for the API URL to get information about issues on the repository.
            ///   - keys_url: A template for the API URL to get information about deploy keys on the repository.
            ///   - labels_url: A template for the API URL to get information about labels of the repository.
            ///   - languages_url: The API URL to get information about the languages of the repository.
            ///   - merges_url: The API URL to merge branches in the repository.
            ///   - milestones_url: A template for the API URL to get information about milestones of the repository.
            ///   - notifications_url: A template for the API URL to get information about notifications on the repository.
            ///   - pulls_url: A template for the API URL to get information about pull requests on the repository.
            ///   - releases_url: A template for the API URL to get information about releases on the repository.
            ///   - stargazers_url: The API URL to list the stargazers on the repository.
            ///   - statuses_url: A template for the API URL to get information about statuses of a commit.
            ///   - subscribers_url: The API URL to list the subscribers on the repository.
            ///   - subscription_url: The API URL to subscribe to notifications for this repository.
            ///   - tags_url: The API URL to get information about tags on the repository.
            ///   - teams_url: The API URL to list the teams on the repository.
            ///   - trees_url: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooks_url: The API URL to list the hooks on the repository.
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                hooks_url: Swift.String
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.hooks_url = hooks_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case hooks_url
            }
        }
        /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-alert-updated-at`.
        public typealias nullable_hyphen_alert_hyphen_updated_hyphen_at = Foundation.Date
        /// Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-alert-state`.
        @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_state: String, Codable, Hashable, Sendable {
            case open = "open"
            case resolved = "resolved"
        }
        /// **Required when the `state` is `resolved`.** The reason for resolving the alert.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-alert-resolution`.
        @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_resolution: String, Codable, Hashable, Sendable {
            case false_positive = "false_positive"
            case wont_fix = "wont_fix"
            case revoked = "revoked"
            case used_in_tests = "used_in_tests"
        }
        /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert`.
        public struct organization_hyphen_secret_hyphen_scanning_hyphen_alert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/number`.
            public var number: Components.Schemas.alert_hyphen_number?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/created_at`.
            public var created_at: Components.Schemas.alert_hyphen_created_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/updated_at`.
            public var updated_at: Components.Schemas.nullable_hyphen_alert_hyphen_updated_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/url`.
            public var url: Components.Schemas.alert_hyphen_url?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/html_url`.
            public var html_url: Components.Schemas.alert_hyphen_html_hyphen_url?
            /// The REST API URL of the code locations for this alert.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/locations_url`.
            public var locations_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/state`.
            public var state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/resolution`.
            public var resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
            /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/resolved_at`.
            public var resolved_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/resolved_by`.
            public var resolved_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The type of secret that secret scanning detected.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/secret_type`.
            public var secret_type: Swift.String?
            /// User-friendly name for the detected secret, matching the `secret_type`.
            /// For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/secret_type_display_name`.
            public var secret_type_display_name: Swift.String?
            /// The secret that was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/secret`.
            public var secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/repository`.
            public var repository: Components.Schemas.simple_hyphen_repository?
            /// Whether push protection was bypassed for the detected secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/push_protection_bypassed`.
            public var push_protection_bypassed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/push_protection_bypassed_by`.
            public var push_protection_bypassed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/push_protection_bypassed_at`.
            public var push_protection_bypassed_at: Foundation.Date?
            /// The comment that was optionally added when this alert was closed
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/resolution_comment`.
            public var resolution_comment: Swift.String?
            /// The token status as of the latest validity check.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/validity`.
            @frozen public enum validityPayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case inactive = "inactive"
                case unknown = "unknown"
            }
            /// The token status as of the latest validity check.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-secret-scanning-alert/validity`.
            public var validity: Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert.validityPayload?
            /// Creates a new `organization_hyphen_secret_hyphen_scanning_hyphen_alert`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - created_at:
            ///   - updated_at:
            ///   - url:
            ///   - html_url:
            ///   - locations_url: The REST API URL of the code locations for this alert.
            ///   - state:
            ///   - resolution:
            ///   - resolved_at: The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - resolved_by:
            ///   - secret_type: The type of secret that secret scanning detected.
            ///   - secret_type_display_name: User-friendly name for the detected secret, matching the `secret_type`.
            ///   - secret: The secret that was detected.
            ///   - repository:
            ///   - push_protection_bypassed: Whether push protection was bypassed for the detected secret.
            ///   - push_protection_bypassed_by:
            ///   - push_protection_bypassed_at: The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - resolution_comment: The comment that was optionally added when this alert was closed
            ///   - validity: The token status as of the latest validity check.
            public init(
                number: Components.Schemas.alert_hyphen_number? = nil,
                created_at: Components.Schemas.alert_hyphen_created_hyphen_at? = nil,
                updated_at: Components.Schemas.nullable_hyphen_alert_hyphen_updated_hyphen_at? = nil,
                url: Components.Schemas.alert_hyphen_url? = nil,
                html_url: Components.Schemas.alert_hyphen_html_hyphen_url? = nil,
                locations_url: Swift.String? = nil,
                state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state? = nil,
                resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                resolved_at: Foundation.Date? = nil,
                resolved_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                secret_type: Swift.String? = nil,
                secret_type_display_name: Swift.String? = nil,
                secret: Swift.String? = nil,
                repository: Components.Schemas.simple_hyphen_repository? = nil,
                push_protection_bypassed: Swift.Bool? = nil,
                push_protection_bypassed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                push_protection_bypassed_at: Foundation.Date? = nil,
                resolution_comment: Swift.String? = nil,
                validity: Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert.validityPayload? = nil
            ) {
                self.number = number
                self.created_at = created_at
                self.updated_at = updated_at
                self.url = url
                self.html_url = html_url
                self.locations_url = locations_url
                self.state = state
                self.resolution = resolution
                self.resolved_at = resolved_at
                self.resolved_by = resolved_by
                self.secret_type = secret_type
                self.secret_type_display_name = secret_type_display_name
                self.secret = secret
                self.repository = repository
                self.push_protection_bypassed = push_protection_bypassed
                self.push_protection_bypassed_by = push_protection_bypassed_by
                self.push_protection_bypassed_at = push_protection_bypassed_at
                self.resolution_comment = resolution_comment
                self.validity = validity
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case created_at
                case updated_at
                case url
                case html_url
                case locations_url
                case state
                case resolution
                case resolved_at
                case resolved_by
                case secret_type
                case secret_type_display_name
                case secret
                case repository
                case push_protection_bypassed
                case push_protection_bypassed_by
                case push_protection_bypassed_at
                case resolution_comment
                case validity
            }
        }
        /// - Remark: Generated from `#/components/schemas/secret-scanning-alert`.
        public struct secret_hyphen_scanning_hyphen_alert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/number`.
            public var number: Components.Schemas.alert_hyphen_number?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/created_at`.
            public var created_at: Components.Schemas.alert_hyphen_created_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/updated_at`.
            public var updated_at: Components.Schemas.nullable_hyphen_alert_hyphen_updated_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/url`.
            public var url: Components.Schemas.alert_hyphen_url?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/html_url`.
            public var html_url: Components.Schemas.alert_hyphen_html_hyphen_url?
            /// The REST API URL of the code locations for this alert.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/locations_url`.
            public var locations_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/state`.
            public var state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/resolution`.
            public var resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
            /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/resolved_at`.
            public var resolved_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/resolved_by`.
            public var resolved_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// An optional comment to resolve an alert.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/resolution_comment`.
            public var resolution_comment: Swift.String?
            /// The type of secret that secret scanning detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/secret_type`.
            public var secret_type: Swift.String?
            /// User-friendly name for the detected secret, matching the `secret_type`.
            /// For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/secret_type_display_name`.
            public var secret_type_display_name: Swift.String?
            /// The secret that was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/secret`.
            public var secret: Swift.String?
            /// Whether push protection was bypassed for the detected secret.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/push_protection_bypassed`.
            public var push_protection_bypassed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/push_protection_bypassed_by`.
            public var push_protection_bypassed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/push_protection_bypassed_at`.
            public var push_protection_bypassed_at: Foundation.Date?
            /// The token status as of the latest validity check.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/validity`.
            @frozen public enum validityPayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case inactive = "inactive"
                case unknown = "unknown"
            }
            /// The token status as of the latest validity check.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-alert/validity`.
            public var validity: Components.Schemas.secret_hyphen_scanning_hyphen_alert.validityPayload?
            /// Creates a new `secret_hyphen_scanning_hyphen_alert`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - created_at:
            ///   - updated_at:
            ///   - url:
            ///   - html_url:
            ///   - locations_url: The REST API URL of the code locations for this alert.
            ///   - state:
            ///   - resolution:
            ///   - resolved_at: The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - resolved_by:
            ///   - resolution_comment: An optional comment to resolve an alert.
            ///   - secret_type: The type of secret that secret scanning detected.
            ///   - secret_type_display_name: User-friendly name for the detected secret, matching the `secret_type`.
            ///   - secret: The secret that was detected.
            ///   - push_protection_bypassed: Whether push protection was bypassed for the detected secret.
            ///   - push_protection_bypassed_by:
            ///   - push_protection_bypassed_at: The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - validity: The token status as of the latest validity check.
            public init(
                number: Components.Schemas.alert_hyphen_number? = nil,
                created_at: Components.Schemas.alert_hyphen_created_hyphen_at? = nil,
                updated_at: Components.Schemas.nullable_hyphen_alert_hyphen_updated_hyphen_at? = nil,
                url: Components.Schemas.alert_hyphen_url? = nil,
                html_url: Components.Schemas.alert_hyphen_html_hyphen_url? = nil,
                locations_url: Swift.String? = nil,
                state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state? = nil,
                resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                resolved_at: Foundation.Date? = nil,
                resolved_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                resolution_comment: Swift.String? = nil,
                secret_type: Swift.String? = nil,
                secret_type_display_name: Swift.String? = nil,
                secret: Swift.String? = nil,
                push_protection_bypassed: Swift.Bool? = nil,
                push_protection_bypassed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                push_protection_bypassed_at: Foundation.Date? = nil,
                validity: Components.Schemas.secret_hyphen_scanning_hyphen_alert.validityPayload? = nil
            ) {
                self.number = number
                self.created_at = created_at
                self.updated_at = updated_at
                self.url = url
                self.html_url = html_url
                self.locations_url = locations_url
                self.state = state
                self.resolution = resolution
                self.resolved_at = resolved_at
                self.resolved_by = resolved_by
                self.resolution_comment = resolution_comment
                self.secret_type = secret_type
                self.secret_type_display_name = secret_type_display_name
                self.secret = secret
                self.push_protection_bypassed = push_protection_bypassed
                self.push_protection_bypassed_by = push_protection_bypassed_by
                self.push_protection_bypassed_at = push_protection_bypassed_at
                self.validity = validity
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case created_at
                case updated_at
                case url
                case html_url
                case locations_url
                case state
                case resolution
                case resolved_at
                case resolved_by
                case resolution_comment
                case secret_type
                case secret_type_display_name
                case secret
                case push_protection_bypassed
                case push_protection_bypassed_by
                case push_protection_bypassed_at
                case validity
            }
        }
        /// An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-alert-resolution-comment`.
        public typealias secret_hyphen_scanning_hyphen_alert_hyphen_resolution_hyphen_comment = Swift.String
        /// Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_commit: Codable, Hashable, Sendable {
            /// The file path in the repository
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/path`.
            public var path: Swift.String
            /// Line number at which the secret starts in the file
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/start_line`.
            public var start_line: Swift.Double
            /// Line number at which the secret ends in the file
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/end_line`.
            public var end_line: Swift.Double
            /// The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/start_column`.
            public var start_column: Swift.Double
            /// The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/end_column`.
            public var end_column: Swift.Double
            /// SHA-1 hash ID of the associated blob
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/blob_sha`.
            public var blob_sha: Swift.String
            /// The API URL to get the associated blob resource
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/blob_url`.
            public var blob_url: Swift.String
            /// SHA-1 hash ID of the associated commit
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/commit_sha`.
            public var commit_sha: Swift.String
            /// The API URL to get the associated commit resource
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-commit/commit_url`.
            public var commit_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_commit`.
            ///
            /// - Parameters:
            ///   - path: The file path in the repository
            ///   - start_line: Line number at which the secret starts in the file
            ///   - end_line: Line number at which the secret ends in the file
            ///   - start_column: The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
            ///   - end_column: The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
            ///   - blob_sha: SHA-1 hash ID of the associated blob
            ///   - blob_url: The API URL to get the associated blob resource
            ///   - commit_sha: SHA-1 hash ID of the associated commit
            ///   - commit_url: The API URL to get the associated commit resource
            public init(
                path: Swift.String,
                start_line: Swift.Double,
                end_line: Swift.Double,
                start_column: Swift.Double,
                end_column: Swift.Double,
                blob_sha: Swift.String,
                blob_url: Swift.String,
                commit_sha: Swift.String,
                commit_url: Swift.String
            ) {
                self.path = path
                self.start_line = start_line
                self.end_line = end_line
                self.start_column = start_column
                self.end_column = end_column
                self.blob_sha = blob_sha
                self.blob_url = blob_url
                self.commit_sha = commit_sha
                self.commit_url = commit_url
            }
            public enum CodingKeys: String, CodingKey {
                case path
                case start_line
                case end_line
                case start_column
                case end_column
                case blob_sha
                case blob_url
                case commit_sha
                case commit_url
            }
        }
        /// Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-title`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title: Codable, Hashable, Sendable {
            /// The API URL to get the issue where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-title/issue_title_url`.
            public var issue_title_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title`.
            ///
            /// - Parameters:
            ///   - issue_title_url: The API URL to get the issue where the secret was detected.
            public init(issue_title_url: Swift.String) {
                self.issue_title_url = issue_title_url
            }
            public enum CodingKeys: String, CodingKey {
                case issue_title_url
            }
        }
        /// Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-body`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body: Codable, Hashable, Sendable {
            /// The API URL to get the issue where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-body/issue_body_url`.
            public var issue_body_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body`.
            ///
            /// - Parameters:
            ///   - issue_body_url: The API URL to get the issue where the secret was detected.
            public init(issue_body_url: Swift.String) {
                self.issue_body_url = issue_body_url
            }
            public enum CodingKeys: String, CodingKey {
                case issue_body_url
            }
        }
        /// Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-comment`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment: Codable, Hashable, Sendable {
            /// The API URL to get the issue comment where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-issue-comment/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - issue_comment_url: The API URL to get the issue comment where the secret was detected.
            public init(issue_comment_url: Swift.String) {
                self.issue_comment_url = issue_comment_url
            }
            public enum CodingKeys: String, CodingKey {
                case issue_comment_url
            }
        }
        /// Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-title`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title: Codable, Hashable, Sendable {
            /// The URL to the discussion where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-title/discussion_title_url`.
            public var discussion_title_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title`.
            ///
            /// - Parameters:
            ///   - discussion_title_url: The URL to the discussion where the secret was detected.
            public init(discussion_title_url: Swift.String) {
                self.discussion_title_url = discussion_title_url
            }
            public enum CodingKeys: String, CodingKey {
                case discussion_title_url
            }
        }
        /// Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-body`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body: Codable, Hashable, Sendable {
            /// The URL to the discussion where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-body/discussion_body_url`.
            public var discussion_body_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body`.
            ///
            /// - Parameters:
            ///   - discussion_body_url: The URL to the discussion where the secret was detected.
            public init(discussion_body_url: Swift.String) {
                self.discussion_body_url = discussion_body_url
            }
            public enum CodingKeys: String, CodingKey {
                case discussion_body_url
            }
        }
        /// Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-comment`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment: Codable, Hashable, Sendable {
            /// The API URL to get the discussion comment where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-discussion-comment/discussion_comment_url`.
            public var discussion_comment_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - discussion_comment_url: The API URL to get the discussion comment where the secret was detected.
            public init(discussion_comment_url: Swift.String) {
                self.discussion_comment_url = discussion_comment_url
            }
            public enum CodingKeys: String, CodingKey {
                case discussion_comment_url
            }
        }
        /// Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-title`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title: Codable, Hashable, Sendable {
            /// The API URL to get the pull request where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-title/pull_request_title_url`.
            public var pull_request_title_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title`.
            ///
            /// - Parameters:
            ///   - pull_request_title_url: The API URL to get the pull request where the secret was detected.
            public init(pull_request_title_url: Swift.String) {
                self.pull_request_title_url = pull_request_title_url
            }
            public enum CodingKeys: String, CodingKey {
                case pull_request_title_url
            }
        }
        /// Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-body`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body: Codable, Hashable, Sendable {
            /// The API URL to get the pull request where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-body/pull_request_body_url`.
            public var pull_request_body_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body`.
            ///
            /// - Parameters:
            ///   - pull_request_body_url: The API URL to get the pull request where the secret was detected.
            public init(pull_request_body_url: Swift.String) {
                self.pull_request_body_url = pull_request_body_url
            }
            public enum CodingKeys: String, CodingKey {
                case pull_request_body_url
            }
        }
        /// Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-comment`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment: Codable, Hashable, Sendable {
            /// The API URL to get the pull request comment where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-comment/pull_request_comment_url`.
            public var pull_request_comment_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - pull_request_comment_url: The API URL to get the pull request comment where the secret was detected.
            public init(pull_request_comment_url: Swift.String) {
                self.pull_request_comment_url = pull_request_comment_url
            }
            public enum CodingKeys: String, CodingKey {
                case pull_request_comment_url
            }
        }
        /// Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-review`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review: Codable, Hashable, Sendable {
            /// The API URL to get the pull request review where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-review/pull_request_review_url`.
            public var pull_request_review_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review`.
            ///
            /// - Parameters:
            ///   - pull_request_review_url: The API URL to get the pull request review where the secret was detected.
            public init(pull_request_review_url: Swift.String) {
                self.pull_request_review_url = pull_request_review_url
            }
            public enum CodingKeys: String, CodingKey {
                case pull_request_review_url
            }
        }
        /// Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-review-comment`.
        public struct secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment: Codable, Hashable, Sendable {
            /// The API URL to get the pull request review comment where the secret was detected.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location-pull-request-review-comment/pull_request_review_comment_url`.
            public var pull_request_review_comment_url: Swift.String
            /// Creates a new `secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - pull_request_review_comment_url: The API URL to get the pull request review comment where the secret was detected.
            public init(pull_request_review_comment_url: Swift.String) {
                self.pull_request_review_comment_url = pull_request_review_comment_url
            }
            public enum CodingKeys: String, CodingKey {
                case pull_request_review_comment_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/secret-scanning-location`.
        public struct secret_hyphen_scanning_hyphen_location: Codable, Hashable, Sendable {
            /// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case commit = "commit"
                case issue_title = "issue_title"
                case issue_body = "issue_body"
                case issue_comment = "issue_comment"
                case discussion_title = "discussion_title"
                case discussion_body = "discussion_body"
                case discussion_comment = "discussion_comment"
                case pull_request_title = "pull_request_title"
                case pull_request_body = "pull_request_body"
                case pull_request_comment = "pull_request_comment"
                case pull_request_review = "pull_request_review"
                case pull_request_review_comment = "pull_request_review_comment"
            }
            /// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
            ///
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location/type`.
            public var _type: Components.Schemas.secret_hyphen_scanning_hyphen_location._typePayload
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details`.
            @frozen public enum detailsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case1`.
                case secret_hyphen_scanning_hyphen_location_hyphen_commit(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_commit)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case2`.
                case secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case3`.
                case secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case4`.
                case secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case5`.
                case secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case6`.
                case secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case7`.
                case secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case8`.
                case secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case9`.
                case secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case10`.
                case secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case11`.
                case secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review)
                /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details/case12`.
                case secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment(Components.Schemas.secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_commit(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_commit(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_title(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_body(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_issue_hyphen_comment(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_title(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_body(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_discussion_hyphen_comment(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_title(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_body(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_comment(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review(value):
                        try value.encode(to: encoder)
                    case let .secret_hyphen_scanning_hyphen_location_hyphen_pull_hyphen_request_hyphen_review_hyphen_comment(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/secret-scanning-location/details`.
            public var details: Components.Schemas.secret_hyphen_scanning_hyphen_location.detailsPayload
            /// Creates a new `secret_hyphen_scanning_hyphen_location`.
            ///
            /// - Parameters:
            ///   - _type: The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
            ///   - details:
            public init(
                _type: Components.Schemas.secret_hyphen_scanning_hyphen_location._typePayload,
                details: Components.Schemas.secret_hyphen_scanning_hyphen_location.detailsPayload
            ) {
                self._type = _type
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case details
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_hyphen_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_hyphen_after = Swift.String
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100).
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// Page number of the results to fetch.
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        public typealias enterprise = Swift.String
        /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
        @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_state: String, Codable, Hashable, Sendable {
            case open = "open"
            case resolved = "resolved"
        }
        /// A comma-separated list of secret types to return. By default all secret types are returned.
        /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
        /// for a complete list of secret types.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-secret-type`.
        public typealias secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type = Swift.String
        /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-resolution`.
        public typealias secret_hyphen_scanning_hyphen_alert_hyphen_resolution = Swift.String
        /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
        @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-validity`.
        public typealias secret_hyphen_scanning_hyphen_alert_hyphen_validity = Swift.String
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-before-org-repo`.
        public typealias secret_hyphen_scanning_hyphen_pagination_hyphen_before_hyphen_org_hyphen_repo = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-scanning-pagination-after-org-repo`.
        public typealias secret_hyphen_scanning_hyphen_pagination_hyphen_after_hyphen_org_hyphen_repo = Swift.String
        /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/alert-number`.
        public typealias alert_hyphen_number = Components.Schemas.alert_hyphen_number
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List secret scanning alerts for an enterprise
    ///
    /// Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
    /// To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)`.
    public enum secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise {
        public static let id: Swift.String = "secret-scanning/list-alerts-for-enterprise"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/path/enterprise`.
                public var enterprise: Components.Parameters.enterprise
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - enterprise: The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                public init(enterprise: Components.Parameters.enterprise) {
                    self.enterprise = enterprise
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_state: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case resolved = "resolved"
                }
                /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/state`.
                public var state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state?
                /// A comma-separated list of secret types to return. By default all secret types are returned.
                /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
                /// for a complete list of secret types.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/secret_type`.
                public var secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type?
                /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/resolution`.
                public var resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/sort`.
                public var sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/query/validity`.
                public var validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///   - secret_type: A comma-separated list of secret types to return. By default all secret types are returned.
                ///   - resolution: A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///   - sort: The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100).
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.
                ///   - validity: A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                public init(
                    state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state? = nil,
                    secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type? = nil,
                    resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                    sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity? = nil
                ) {
                    self.state = state
                    self.secret_type = secret_type
                    self.resolution = resolution
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                    self.validity = validity
                }
            }
            public var query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path,
                query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query = .init(),
                headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enterprises/{enterprise}/secret-scanning/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Headers = .init(),
                    body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-enterprise)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List secret scanning alerts for an organization
    ///
    /// Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
    /// To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)`.
    public enum secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org {
        public static let id: Swift.String = "secret-scanning/list-alerts-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_state: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case resolved = "resolved"
                }
                /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/state`.
                public var state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state?
                /// A comma-separated list of secret types to return. By default all secret types are returned.
                /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
                /// for a complete list of secret types.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/secret_type`.
                public var secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type?
                /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/resolution`.
                public var resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/sort`.
                public var sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/before`.
                public var before: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_before_hyphen_org_hyphen_repo?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/after`.
                public var after: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_after_hyphen_org_hyphen_repo?
                /// A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/query/validity`.
                public var validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///   - secret_type: A comma-separated list of secret types to return. By default all secret types are returned.
                ///   - resolution: A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///   - sort: The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///   - direction: The direction to sort the results by.
                ///   - page: Page number of the results to fetch.
                ///   - per_page: The number of results per page (max 100).
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
                ///   - validity: A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                public init(
                    state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state? = nil,
                    secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type? = nil,
                    resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                    sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_before_hyphen_org_hyphen_repo? = nil,
                    after: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_after_hyphen_org_hyphen_repo? = nil,
                    validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity? = nil
                ) {
                    self.state = state
                    self.secret_type = secret_type
                    self.resolution = resolution
                    self.sort = sort
                    self.direction = direction
                    self.page = page
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                    self.validity = validity
                }
            }
            public var query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path,
                query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/secret-scanning/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_secret_hyphen_scanning_hyphen_alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-org)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List secret scanning alerts for a repository
    ///
    /// Lists secret scanning alerts for an eligible repository, from newest to oldest.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)`.
    public enum secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "secret-scanning/list-alerts-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-state`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_state: String, Codable, Hashable, Sendable {
                    case open = "open"
                    case resolved = "resolved"
                }
                /// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/state`.
                public var state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state?
                /// A comma-separated list of secret types to return. By default all secret types are returned.
                /// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
                /// for a complete list of secret types.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/secret_type`.
                public var secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type?
                /// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/resolution`.
                public var resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
                /// - Remark: Generated from `#/components/parameters/secret-scanning-alert-sort`.
                @frozen public enum secret_hyphen_scanning_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/sort`.
                public var sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/before`.
                public var before: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_before_hyphen_org_hyphen_repo?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/after`.
                public var after: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_after_hyphen_org_hyphen_repo?
                /// A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/query/validity`.
                public var validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
                ///   - secret_type: A comma-separated list of secret types to return. By default all secret types are returned.
                ///   - resolution: A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
                ///   - sort: The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
                ///   - direction: The direction to sort the results by.
                ///   - page: Page number of the results to fetch.
                ///   - per_page: The number of results per page (max 100).
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
                ///   - validity: A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
                public init(
                    state: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_state? = nil,
                    secret_type: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_secret_hyphen_type? = nil,
                    resolution: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                    sort: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    before: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_before_hyphen_org_hyphen_repo? = nil,
                    after: Components.Parameters.secret_hyphen_scanning_hyphen_pagination_hyphen_after_hyphen_org_hyphen_repo? = nil,
                    validity: Components.Parameters.secret_hyphen_scanning_hyphen_alert_hyphen_validity? = nil
                ) {
                    self.state = state
                    self.secret_type = secret_type
                    self.resolution = resolution
                    self.sort = sort
                    self.direction = direction
                    self.page = page
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                    self.validity = validity
                }
            }
            public var query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.secret_hyphen_scanning_hyphen_alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.secret_hyphen_scanning_hyphen_alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Repository is public or secret scanning is disabled for the repository
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.secret_hyphen_scanning_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/get(secret-scanning/list-alerts-for-repo)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a secret scanning alert
    ///
    /// Gets a single secret scanning alert detected in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)`.
    public enum secret_hyphen_scanning_sol_get_hyphen_alert {
        public static let id: Swift.String = "secret-scanning/get-alert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/path/alert_number`.
                public var alert_number: Components.Parameters.alert_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - alert_number: The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    alert_number: Components.Parameters.alert_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.alert_number = alert_number
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_get_hyphen_alert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_get_hyphen_alert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Path,
                headers: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.secret_hyphen_scanning_hyphen_alert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.secret_hyphen_scanning_hyphen_alert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Repository is public, or secret scanning is disabled for the repository, or the resource is not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.secret_hyphen_scanning_sol_get_hyphen_alert.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/get(secret-scanning/get-alert)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a secret scanning alert
    ///
    /// Updates the status of a secret scanning alert in an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)`.
    public enum secret_hyphen_scanning_sol_update_hyphen_alert {
        public static let id: Swift.String = "secret-scanning/update-alert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/path/alert_number`.
                public var alert_number: Components.Parameters.alert_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - alert_number: The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    alert_number: Components.Parameters.alert_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.alert_number = alert_number
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_update_hyphen_alert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_update_hyphen_alert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody/json/state`.
                    public var state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody/json/resolution`.
                    public var resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody/json/resolution_comment`.
                    public var resolution_comment: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution_hyphen_comment?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - state:
                    ///   - resolution:
                    ///   - resolution_comment:
                    public init(
                        state: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_state,
                        resolution: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution? = nil,
                        resolution_comment: Components.Schemas.secret_hyphen_scanning_hyphen_alert_hyphen_resolution_hyphen_comment? = nil
                    ) {
                        self.state = state
                        self.resolution = resolution
                        self.resolution_comment = resolution_comment
                    }
                    public enum CodingKeys: String, CodingKey {
                        case state
                        case resolution
                        case resolution_comment
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Body.jsonPayload)
            }
            public var body: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Path,
                headers: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Headers = .init(),
                body: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.secret_hyphen_scanning_hyphen_alert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.secret_hyphen_scanning_hyphen_alert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// Creates a new `BadRequest`.
                public init() {}
            }
            /// Bad request, resolution comment is invalid or the resolution was not changed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Repository is public, or secret scanning is disabled for the repository, or the resource is not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// State does not match the resolution or resolution comment
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.secret_hyphen_scanning_sol_update_hyphen_alert.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/patch(secret-scanning/update-alert)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List locations for a secret scanning alert
    ///
    /// Lists all locations for a given secret scanning alert for an eligible repository.
    /// To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    /// For public repositories, you may instead use the `public_repo` scope.
    ///
    /// GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)`.
    public enum secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert {
        public static let id: Swift.String = "secret-scanning/list-locations-for-alert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/path/alert_number`.
                public var alert_number: Components.Parameters.alert_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - alert_number: The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    alert_number: Components.Parameters.alert_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.alert_number = alert_number
                }
            }
            public var path: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Page number of the results to fetch.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: Page number of the results to fetch.
                ///   - per_page: The number of results per page (max 100).
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Path,
                query: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Query = .init(),
                headers: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.secret_hyphen_scanning_hyphen_location])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.secret_hyphen_scanning_hyphen_location] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok.Headers = .init(),
                    body: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Repository is public, or secret scanning is disabled for the repository, or the resource is not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.secret_hyphen_scanning_sol_list_hyphen_locations_hyphen_for_hyphen_alert.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations/get(secret-scanning/list-locations-for-alert)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
