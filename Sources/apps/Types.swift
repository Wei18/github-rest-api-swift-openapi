// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get the authenticated app
    ///
    /// Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app`.
    /// - Remark: Generated from `#/paths//app/get(apps/get-authenticated)`.
    func apps_sol_get_hyphen_authenticated(_ input: Operations.apps_sol_get_hyphen_authenticated.Input) async throws -> Operations.apps_sol_get_hyphen_authenticated.Output
    /// Create a GitHub App from a manifest
    ///
    /// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
    ///
    /// - Remark: HTTP `POST /app-manifests/{code}/conversions`.
    /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)`.
    func apps_sol_create_hyphen_from_hyphen_manifest(_ input: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input) async throws -> Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output
    /// Get a webhook configuration for an app
    ///
    /// Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/get(apps/get-webhook-config-for-app)`.
    func apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(_ input: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input) async throws -> Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output
    /// Update a webhook configuration for an app
    ///
    /// Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PATCH /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/patch(apps/update-webhook-config-for-app)`.
    func apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(_ input: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input) async throws -> Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output
    /// List deliveries for an app webhook
    ///
    /// Returns a list of webhook deliveries for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)`.
    func apps_sol_list_hyphen_webhook_hyphen_deliveries(_ input: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input) async throws -> Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output
    /// Get a delivery for an app webhook
    ///
    /// Returns a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)`.
    func apps_sol_get_hyphen_webhook_hyphen_delivery(_ input: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output
    /// Redeliver a delivery for an app webhook
    ///
    /// Redeliver a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/hook/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)`.
    func apps_sol_redeliver_hyphen_webhook_hyphen_delivery(_ input: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input) async throws -> Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Output
    /// List installation requests for the authenticated app
    ///
    /// Lists all the pending installation requests for the authenticated GitHub App.
    ///
    /// - Remark: HTTP `GET /app/installation-requests`.
    /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)`.
    func apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app(_ input: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input) async throws -> Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output
    /// List installations for the authenticated app
    ///
    /// The permissions the installation has are included under the `permissions` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations`.
    /// - Remark: Generated from `#/paths//app/installations/get(apps/list-installations)`.
    func apps_sol_list_hyphen_installations(_ input: Operations.apps_sol_list_hyphen_installations.Input) async throws -> Operations.apps_sol_list_hyphen_installations.Output
    /// Get an installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find an installation's information using the installation id.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/get(apps/get-installation)`.
    func apps_sol_get_hyphen_installation(_ input: Operations.apps_sol_get_hyphen_installation.Input) async throws -> Operations.apps_sol_get_hyphen_installation.Output
    /// Delete an installation for the authenticated app
    ///
    /// Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/delete(apps/delete-installation)`.
    func apps_sol_delete_hyphen_installation(_ input: Operations.apps_sol_delete_hyphen_installation.Input) async throws -> Operations.apps_sol_delete_hyphen_installation.Output
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// When using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    func apps_sol_create_hyphen_installation_hyphen_access_hyphen_token(_ input: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input) async throws -> Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output
    /// Suspend an app installation
    ///
    /// Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PUT /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/put(apps/suspend-installation)`.
    func apps_sol_suspend_hyphen_installation(_ input: Operations.apps_sol_suspend_hyphen_installation.Input) async throws -> Operations.apps_sol_suspend_hyphen_installation.Output
    /// Unsuspend an app installation
    ///
    /// Removes a GitHub App installation suspension.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/delete(apps/unsuspend-installation)`.
    func apps_sol_unsuspend_hyphen_installation(_ input: Operations.apps_sol_unsuspend_hyphen_installation.Input) async throws -> Operations.apps_sol_unsuspend_hyphen_installation.Output
    /// Delete an app authorization
    ///
    /// OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
    /// Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/grant`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/grant/delete(apps/delete-authorization)`.
    func apps_sol_delete_hyphen_authorization(_ input: Operations.apps_sol_delete_hyphen_authorization.Input) async throws -> Operations.apps_sol_delete_hyphen_authorization.Output
    /// Check a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)`.
    func apps_sol_check_hyphen_token(_ input: Operations.apps_sol_check_hyphen_token.Input) async throws -> Operations.apps_sol_check_hyphen_token.Output
    /// Reset a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `PATCH /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/patch(apps/reset-token)`.
    func apps_sol_reset_hyphen_token(_ input: Operations.apps_sol_reset_hyphen_token.Input) async throws -> Operations.apps_sol_reset_hyphen_token.Output
    /// Delete an app token
    ///
    /// OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/delete(apps/delete-token)`.
    func apps_sol_delete_hyphen_token(_ input: Operations.apps_sol_delete_hyphen_token.Input) async throws -> Operations.apps_sol_delete_hyphen_token.Output
    /// Create a scoped access token
    ///
    /// Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
    /// which repositories the token can access and which permissions are granted to the
    /// token.
    ///
    /// Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token/scoped`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)`.
    func apps_sol_scope_hyphen_token(_ input: Operations.apps_sol_scope_hyphen_token.Input) async throws -> Operations.apps_sol_scope_hyphen_token.Output
    /// Get an app
    ///
    /// > [!NOTE]
    /// > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
    ///
    /// - Remark: HTTP `GET /apps/{app_slug}`.
    /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)`.
    func apps_sol_get_hyphen_by_hyphen_slug(_ input: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input) async throws -> Operations.apps_sol_get_hyphen_by_hyphen_slug.Output
    /// List repositories accessible to the app installation
    ///
    /// List repositories that an app installation can access.
    ///
    /// - Remark: HTTP `GET /installation/repositories`.
    /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)`.
    func apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation(_ input: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input) async throws -> Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output
    /// Revoke an installation access token
    ///
    /// Revokes the installation token you're using to authenticate as an installation and access this endpoint.
    ///
    /// Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
    ///
    /// - Remark: HTTP `DELETE /installation/token`.
    /// - Remark: Generated from `#/paths//installation/token/delete(apps/revoke-installation-access-token)`.
    func apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token(_ input: Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Input) async throws -> Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Output
    /// Get a subscription plan for an account
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)`.
    func apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account(_ input: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input) async throws -> Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output
    /// List plans
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)`.
    func apps_sol_list_hyphen_plans(_ input: Operations.apps_sol_list_hyphen_plans.Input) async throws -> Operations.apps_sol_list_hyphen_plans.Output
    /// List accounts for a plan
    ///
    /// Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)`.
    func apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan(_ input: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input) async throws -> Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output
    /// Get a subscription plan for an account (stubbed)
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)`.
    func apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed(_ input: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input) async throws -> Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output
    /// List plans (stubbed)
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/get(apps/list-plans-stubbed)`.
    func apps_sol_list_hyphen_plans_hyphen_stubbed(_ input: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input) async throws -> Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output
    /// List accounts for a plan (stubbed)
    ///
    /// Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan-stubbed)`.
    func apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed(_ input: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input) async throws -> Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output
    /// Get an organization installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the organization's installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installation`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installation/get(apps/get-org-installation)`.
    func apps_sol_get_hyphen_org_hyphen_installation(_ input: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input) async throws -> Operations.apps_sol_get_hyphen_org_hyphen_installation.Output
    /// Get a repository installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/installation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)`.
    func apps_sol_get_hyphen_repo_hyphen_installation(_ input: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input) async throws -> Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output
    /// List app installations accessible to the user access token
    ///
    /// Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// You can find the permissions for the installation under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations`.
    /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)`.
    func apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List repositories accessible to the user access token
    ///
    /// List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// The access the user has to each repository is included in the hash under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations/{installation_id}/repositories`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)`.
    func apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Add a repository to an app installation
    ///
    /// Add a single repository to an installation. The authenticated user must have admin access to the repository.    
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `PUT /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)`.
    func apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// Remove a repository from an app installation
    ///
    /// Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. 
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `DELETE /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)`.
    func apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List subscriptions for the authenticated user
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)`.
    func apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output
    /// List subscriptions for the authenticated user (stubbed)
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases/stubbed`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)`.
    func apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed(_ input: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input) async throws -> Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output
    /// Get a user installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the user’s installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/installation`.
    /// - Remark: Generated from `#/paths//users/{username}/installation/get(apps/get-user-installation)`.
    func apps_sol_get_hyphen_user_hyphen_installation(_ input: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input) async throws -> Operations.apps_sol_get_hyphen_user_hyphen_installation.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get the authenticated app
    ///
    /// Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app`.
    /// - Remark: Generated from `#/paths//app/get(apps/get-authenticated)`.
    public func apps_sol_get_hyphen_authenticated(headers: Operations.apps_sol_get_hyphen_authenticated.Input.Headers = .init()) async throws -> Operations.apps_sol_get_hyphen_authenticated.Output {
        try await apps_sol_get_hyphen_authenticated(Operations.apps_sol_get_hyphen_authenticated.Input(headers: headers))
    }
    /// Create a GitHub App from a manifest
    ///
    /// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
    ///
    /// - Remark: HTTP `POST /app-manifests/{code}/conversions`.
    /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)`.
    public func apps_sol_create_hyphen_from_hyphen_manifest(
        path: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Path,
        headers: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output {
        try await apps_sol_create_hyphen_from_hyphen_manifest(Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a webhook configuration for an app
    ///
    /// Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/get(apps/get-webhook-config-for-app)`.
    public func apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(headers: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers = .init()) async throws -> Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output {
        try await apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input(headers: headers))
    }
    /// Update a webhook configuration for an app
    ///
    /// Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PATCH /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/patch(apps/update-webhook-config-for-app)`.
    public func apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(
        headers: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers = .init(),
        body: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Body
    ) async throws -> Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output {
        try await apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app(Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input(
            headers: headers,
            body: body
        ))
    }
    /// List deliveries for an app webhook
    ///
    /// Returns a list of webhook deliveries for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)`.
    public func apps_sol_list_hyphen_webhook_hyphen_deliveries(
        query: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output {
        try await apps_sol_list_hyphen_webhook_hyphen_deliveries(Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a delivery for an app webhook
    ///
    /// Returns a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)`.
    public func apps_sol_get_hyphen_webhook_hyphen_delivery(
        path: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output {
        try await apps_sol_get_hyphen_webhook_hyphen_delivery(Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// Redeliver a delivery for an app webhook
    ///
    /// Redeliver a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/hook/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)`.
    public func apps_sol_redeliver_hyphen_webhook_hyphen_delivery(
        path: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
        headers: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Output {
        try await apps_sol_redeliver_hyphen_webhook_hyphen_delivery(Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input(
            path: path,
            headers: headers
        ))
    }
    /// List installation requests for the authenticated app
    ///
    /// Lists all the pending installation requests for the authenticated GitHub App.
    ///
    /// - Remark: HTTP `GET /app/installation-requests`.
    /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)`.
    public func apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app(
        query: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output {
        try await apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app(Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input(
            query: query,
            headers: headers
        ))
    }
    /// List installations for the authenticated app
    ///
    /// The permissions the installation has are included under the `permissions` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations`.
    /// - Remark: Generated from `#/paths//app/installations/get(apps/list-installations)`.
    public func apps_sol_list_hyphen_installations(
        query: Operations.apps_sol_list_hyphen_installations.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_installations.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_installations.Output {
        try await apps_sol_list_hyphen_installations(Operations.apps_sol_list_hyphen_installations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get an installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find an installation's information using the installation id.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/get(apps/get-installation)`.
    public func apps_sol_get_hyphen_installation(
        path: Operations.apps_sol_get_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_get_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_installation.Output {
        try await apps_sol_get_hyphen_installation(Operations.apps_sol_get_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an installation for the authenticated app
    ///
    /// Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/delete(apps/delete-installation)`.
    public func apps_sol_delete_hyphen_installation(
        path: Operations.apps_sol_delete_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_delete_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_delete_hyphen_installation.Output {
        try await apps_sol_delete_hyphen_installation(Operations.apps_sol_delete_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// When using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    public func apps_sol_create_hyphen_installation_hyphen_access_hyphen_token(
        path: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Path,
        headers: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Headers = .init(),
        body: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Body? = nil
    ) async throws -> Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output {
        try await apps_sol_create_hyphen_installation_hyphen_access_hyphen_token(Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Suspend an app installation
    ///
    /// Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PUT /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/put(apps/suspend-installation)`.
    public func apps_sol_suspend_hyphen_installation(
        path: Operations.apps_sol_suspend_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_suspend_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_suspend_hyphen_installation.Output {
        try await apps_sol_suspend_hyphen_installation(Operations.apps_sol_suspend_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unsuspend an app installation
    ///
    /// Removes a GitHub App installation suspension.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/delete(apps/unsuspend-installation)`.
    public func apps_sol_unsuspend_hyphen_installation(
        path: Operations.apps_sol_unsuspend_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_unsuspend_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_unsuspend_hyphen_installation.Output {
        try await apps_sol_unsuspend_hyphen_installation(Operations.apps_sol_unsuspend_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete an app authorization
    ///
    /// OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
    /// Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/grant`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/grant/delete(apps/delete-authorization)`.
    public func apps_sol_delete_hyphen_authorization(
        path: Operations.apps_sol_delete_hyphen_authorization.Input.Path,
        headers: Operations.apps_sol_delete_hyphen_authorization.Input.Headers = .init(),
        body: Operations.apps_sol_delete_hyphen_authorization.Input.Body
    ) async throws -> Operations.apps_sol_delete_hyphen_authorization.Output {
        try await apps_sol_delete_hyphen_authorization(Operations.apps_sol_delete_hyphen_authorization.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Check a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)`.
    public func apps_sol_check_hyphen_token(
        path: Operations.apps_sol_check_hyphen_token.Input.Path,
        headers: Operations.apps_sol_check_hyphen_token.Input.Headers = .init(),
        body: Operations.apps_sol_check_hyphen_token.Input.Body
    ) async throws -> Operations.apps_sol_check_hyphen_token.Output {
        try await apps_sol_check_hyphen_token(Operations.apps_sol_check_hyphen_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Reset a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `PATCH /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/patch(apps/reset-token)`.
    public func apps_sol_reset_hyphen_token(
        path: Operations.apps_sol_reset_hyphen_token.Input.Path,
        headers: Operations.apps_sol_reset_hyphen_token.Input.Headers = .init(),
        body: Operations.apps_sol_reset_hyphen_token.Input.Body
    ) async throws -> Operations.apps_sol_reset_hyphen_token.Output {
        try await apps_sol_reset_hyphen_token(Operations.apps_sol_reset_hyphen_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an app token
    ///
    /// OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/delete(apps/delete-token)`.
    public func apps_sol_delete_hyphen_token(
        path: Operations.apps_sol_delete_hyphen_token.Input.Path,
        headers: Operations.apps_sol_delete_hyphen_token.Input.Headers = .init(),
        body: Operations.apps_sol_delete_hyphen_token.Input.Body
    ) async throws -> Operations.apps_sol_delete_hyphen_token.Output {
        try await apps_sol_delete_hyphen_token(Operations.apps_sol_delete_hyphen_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create a scoped access token
    ///
    /// Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
    /// which repositories the token can access and which permissions are granted to the
    /// token.
    ///
    /// Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token/scoped`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)`.
    public func apps_sol_scope_hyphen_token(
        path: Operations.apps_sol_scope_hyphen_token.Input.Path,
        headers: Operations.apps_sol_scope_hyphen_token.Input.Headers = .init(),
        body: Operations.apps_sol_scope_hyphen_token.Input.Body
    ) async throws -> Operations.apps_sol_scope_hyphen_token.Output {
        try await apps_sol_scope_hyphen_token(Operations.apps_sol_scope_hyphen_token.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an app
    ///
    /// > [!NOTE]
    /// > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
    ///
    /// - Remark: HTTP `GET /apps/{app_slug}`.
    /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)`.
    public func apps_sol_get_hyphen_by_hyphen_slug(
        path: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Path,
        headers: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_by_hyphen_slug.Output {
        try await apps_sol_get_hyphen_by_hyphen_slug(Operations.apps_sol_get_hyphen_by_hyphen_slug.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repositories accessible to the app installation
    ///
    /// List repositories that an app installation can access.
    ///
    /// - Remark: HTTP `GET /installation/repositories`.
    /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)`.
    public func apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation(
        query: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output {
        try await apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation(Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input(
            query: query,
            headers: headers
        ))
    }
    /// Revoke an installation access token
    ///
    /// Revokes the installation token you're using to authenticate as an installation and access this endpoint.
    ///
    /// Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
    ///
    /// - Remark: HTTP `DELETE /installation/token`.
    /// - Remark: Generated from `#/paths//installation/token/delete(apps/revoke-installation-access-token)`.
    public func apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token() async throws -> Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Output {
        try await apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token(Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Input())
    }
    /// Get a subscription plan for an account
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)`.
    public func apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account(
        path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Path,
        headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output {
        try await apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input(
            path: path,
            headers: headers
        ))
    }
    /// List plans
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)`.
    public func apps_sol_list_hyphen_plans(
        query: Operations.apps_sol_list_hyphen_plans.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_plans.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_plans.Output {
        try await apps_sol_list_hyphen_plans(Operations.apps_sol_list_hyphen_plans.Input(
            query: query,
            headers: headers
        ))
    }
    /// List accounts for a plan
    ///
    /// Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)`.
    public func apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan(
        path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Path,
        query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output {
        try await apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan(Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a subscription plan for an account (stubbed)
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)`.
    public func apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed(
        path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Path,
        headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output {
        try await apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input(
            path: path,
            headers: headers
        ))
    }
    /// List plans (stubbed)
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/get(apps/list-plans-stubbed)`.
    public func apps_sol_list_hyphen_plans_hyphen_stubbed(
        query: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output {
        try await apps_sol_list_hyphen_plans_hyphen_stubbed(Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input(
            query: query,
            headers: headers
        ))
    }
    /// List accounts for a plan (stubbed)
    ///
    /// Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan-stubbed)`.
    public func apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed(
        path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Path,
        query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output {
        try await apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed(Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an organization installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the organization's installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installation`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installation/get(apps/get-org-installation)`.
    public func apps_sol_get_hyphen_org_hyphen_installation(
        path: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_org_hyphen_installation.Output {
        try await apps_sol_get_hyphen_org_hyphen_installation(Operations.apps_sol_get_hyphen_org_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/installation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)`.
    public func apps_sol_get_hyphen_repo_hyphen_installation(
        path: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output {
        try await apps_sol_get_hyphen_repo_hyphen_installation(Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
    /// List app installations accessible to the user access token
    ///
    /// Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// You can find the permissions for the installation under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations`.
    /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)`.
    public func apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user(Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List repositories accessible to the user access token
    ///
    /// List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// The access the user has to each repository is included in the hash under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations/{installation_id}/repositories`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)`.
    public func apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        query: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user(Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Add a repository to an app installation
    ///
    /// Add a single repository to an installation. The authenticated user must have admin access to the repository.    
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `PUT /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)`.
    public func apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove a repository from an app installation
    ///
    /// Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. 
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `DELETE /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)`.
    public func apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(
        path: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
        headers: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user(Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// List subscriptions for the authenticated user
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)`.
    public func apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user(Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
    /// List subscriptions for the authenticated user (stubbed)
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases/stubbed`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)`.
    public func apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed(
        query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Query = .init(),
        headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output {
        try await apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed(Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a user installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the user’s installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/installation`.
    /// - Remark: Generated from `#/paths//users/{username}/installation/get(apps/get-user-installation)`.
    public func apps_sol_get_hyphen_user_hyphen_installation(
        path: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Path,
        headers: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Headers = .init()
    ) async throws -> Operations.apps_sol_get_hyphen_user_hyphen_installation.Output {
        try await apps_sol_get_hyphen_user_hyphen_installation(Operations.apps_sol_get_hyphen_user_hyphen_installation.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/integration`.
        public struct integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/permissions`.
            public var permissions: Components.Schemas.integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - client_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                client_id: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.client_id = client_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case client_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// The URL to which the payloads will be delivered.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-url`.
        public typealias webhook_hyphen_config_hyphen_url = Swift.String
        /// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-content-type`.
        public typealias webhook_hyphen_config_hyphen_content_hyphen_type = Swift.String
        /// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config-secret`.
        public typealias webhook_hyphen_config_hyphen_secret = Swift.String
        /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl`.
        @frozen public enum webhook_hyphen_config_hyphen_insecure_hyphen_ssl: Codable, Hashable, Sendable {
            /// Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
            ///
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/schemas/webhook-config-insecure-ssl/case2`.
            case case2(Swift.Double)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Configuration object of the webhook
        ///
        /// - Remark: Generated from `#/components/schemas/webhook-config`.
        public struct webhook_hyphen_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/webhook-config/url`.
            public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
            /// - Remark: Generated from `#/components/schemas/webhook-config/content_type`.
            public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
            /// - Remark: Generated from `#/components/schemas/webhook-config/secret`.
            public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
            /// - Remark: Generated from `#/components/schemas/webhook-config/insecure_ssl`.
            public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
            /// Creates a new `webhook_hyphen_config`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - content_type:
            ///   - secret:
            ///   - insecure_ssl:
            public init(
                url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
            ) {
                self.url = url
                self.content_type = content_type
                self.secret = secret
                self.insecure_ssl = insecure_ssl
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case content_type
                case secret
                case insecure_ssl
            }
        }
        /// Delivery made by a webhook, without request and response information.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery-item`.
        public struct hook_hyphen_delivery_hyphen_item: Codable, Hashable, Sendable {
            /// Unique identifier of the webhook delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/guid`.
            public var guid: Swift.String
            /// Time when the webhook delivery occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the webhook delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/duration`.
            public var duration: Swift.Double
            /// Describes the response returned after attempting the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/repository_id`.
            public var repository_id: Swift.Int?
            /// Time when the webhook delivery was throttled.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery-item/throttled_at`.
            public var throttled_at: Foundation.Date?
            /// Creates a new `hook_hyphen_delivery_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the webhook delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the webhook delivery occurred.
            ///   - redelivery: Whether the webhook delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Describes the response returned after attempting the delivery.
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - throttled_at: Time when the webhook delivery was throttled.
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                throttled_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.throttled_at = throttled_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case throttled_at
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Delivery made by a webhook.
        ///
        /// - Remark: Generated from `#/components/schemas/hook-delivery`.
        public struct hook_hyphen_delivery: Codable, Hashable, Sendable {
            /// Unique identifier of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/id`.
            public var id: Swift.Int
            /// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/guid`.
            public var guid: Swift.String
            /// Time when the delivery was delivered.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/delivered_at`.
            public var delivered_at: Foundation.Date
            /// Whether the delivery is a redelivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/redelivery`.
            public var redelivery: Swift.Bool
            /// Time spent delivering.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/duration`.
            public var duration: Swift.Double
            /// Description of the status of the attempted delivery
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status`.
            public var status: Swift.String
            /// Status code received when delivery was made.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/status_code`.
            public var status_code: Swift.Int
            /// The event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/event`.
            public var event: Swift.String
            /// The type of activity for the event that triggered the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/action`.
            public var action: Swift.String?
            /// The id of the GitHub App installation associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/installation_id`.
            public var installation_id: Swift.Int?
            /// The id of the repository associated with this event.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/repository_id`.
            public var repository_id: Swift.Int?
            /// Time when the webhook delivery was throttled.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/throttled_at`.
            public var throttled_at: Foundation.Date?
            /// The URL target of the delivery.
            ///
            /// - Remark: Generated from `#/components/schemas/hook-delivery/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public struct requestPayload: Codable, Hashable, Sendable {
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The request headers sent with the webhook delivery.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload?
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public struct payloadPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `payloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The webhook payload.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/request/payload`.
                public var payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload?
                /// Creates a new `requestPayload`.
                ///
                /// - Parameters:
                ///   - headers: The request headers sent with the webhook delivery.
                ///   - payload: The webhook payload.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.requestPayload.headersPayload? = nil,
                    payload: Components.Schemas.hook_hyphen_delivery.requestPayload.payloadPayload? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/request`.
            public var request: Components.Schemas.hook_hyphen_delivery.requestPayload
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public struct responsePayload: Codable, Hashable, Sendable {
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public struct headersPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                    /// Creates a new `headersPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The response headers received when the delivery was made.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/headers`.
                public var headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload?
                /// The response payload received.
                ///
                /// - Remark: Generated from `#/components/schemas/hook-delivery/response/payload`.
                public var payload: Swift.String?
                /// Creates a new `responsePayload`.
                ///
                /// - Parameters:
                ///   - headers: The response headers received when the delivery was made.
                ///   - payload: The response payload received.
                public init(
                    headers: Components.Schemas.hook_hyphen_delivery.responsePayload.headersPayload? = nil,
                    payload: Swift.String? = nil
                ) {
                    self.headers = headers
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case headers
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/schemas/hook-delivery/response`.
            public var response: Components.Schemas.hook_hyphen_delivery.responsePayload
            /// Creates a new `hook_hyphen_delivery`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the delivery.
            ///   - guid: Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
            ///   - delivered_at: Time when the delivery was delivered.
            ///   - redelivery: Whether the delivery is a redelivery.
            ///   - duration: Time spent delivering.
            ///   - status: Description of the status of the attempted delivery
            ///   - status_code: Status code received when delivery was made.
            ///   - event: The event that triggered the delivery.
            ///   - action: The type of activity for the event that triggered the delivery.
            ///   - installation_id: The id of the GitHub App installation associated with this event.
            ///   - repository_id: The id of the repository associated with this event.
            ///   - throttled_at: Time when the webhook delivery was throttled.
            ///   - url: The URL target of the delivery.
            ///   - request:
            ///   - response:
            public init(
                id: Swift.Int,
                guid: Swift.String,
                delivered_at: Foundation.Date,
                redelivery: Swift.Bool,
                duration: Swift.Double,
                status: Swift.String,
                status_code: Swift.Int,
                event: Swift.String,
                action: Swift.String? = nil,
                installation_id: Swift.Int? = nil,
                repository_id: Swift.Int? = nil,
                throttled_at: Foundation.Date? = nil,
                url: Swift.String? = nil,
                request: Components.Schemas.hook_hyphen_delivery.requestPayload,
                response: Components.Schemas.hook_hyphen_delivery.responsePayload
            ) {
                self.id = id
                self.guid = guid
                self.delivered_at = delivered_at
                self.redelivery = redelivery
                self.duration = duration
                self.status = status
                self.status_code = status_code
                self.event = event
                self.action = action
                self.installation_id = installation_id
                self.repository_id = repository_id
                self.throttled_at = throttled_at
                self.url = url
                self.request = request
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case guid
                case delivered_at
                case redelivery
                case duration
                case status
                case status_code
                case event
                case action
                case installation_id
                case repository_id
                case throttled_at
                case url
                case request
                case response
            }
        }
        /// An enterprise on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/enterprise`.
        public struct enterprise: Codable, Hashable, Sendable {
            /// A short description of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/enterprise/html_url`.
            public var html_url: Swift.String
            /// The enterprise's website URL.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/website_url`.
            public var website_url: Swift.String?
            /// Unique identifier of the enterprise
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/enterprise/node_id`.
            public var node_id: Swift.String
            /// The name of the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/name`.
            public var name: Swift.String
            /// The slug url identifier for the enterprise.
            ///
            /// - Remark: Generated from `#/components/schemas/enterprise/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/enterprise/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/enterprise/avatar_url`.
            public var avatar_url: Swift.String
            /// Creates a new `enterprise`.
            ///
            /// - Parameters:
            ///   - description: A short description of the enterprise.
            ///   - html_url:
            ///   - website_url: The enterprise's website URL.
            ///   - id: Unique identifier of the enterprise
            ///   - node_id:
            ///   - name: The name of the enterprise.
            ///   - slug: The slug url identifier for the enterprise.
            ///   - created_at:
            ///   - updated_at:
            ///   - avatar_url:
            public init(
                description: Swift.String? = nil,
                html_url: Swift.String,
                website_url: Swift.String? = nil,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                avatar_url: Swift.String
            ) {
                self.description = description
                self.html_url = html_url
                self.website_url = website_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.created_at = created_at
                self.updated_at = updated_at
                self.avatar_url = avatar_url
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case html_url
                case website_url
                case id
                case node_id
                case name
                case slug
                case created_at
                case updated_at
                case avatar_url
            }
        }
        /// Request to install an integration on a target
        ///
        /// - Remark: Generated from `#/components/schemas/integration-installation-request`.
        public struct integration_hyphen_installation_hyphen_request: Codable, Hashable, Sendable {
            /// Unique identifier of the request installation.
            ///
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            public struct accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value1`.
                public var value1: Components.Schemas.simple_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/integration-installation-request/account/value2`.
                public var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.simple_hyphen_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/account`.
            public var account: Components.Schemas.integration_hyphen_installation_hyphen_request.accountPayload
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/requester`.
            public var requester: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/integration-installation-request/created_at`.
            public var created_at: Foundation.Date
            /// Creates a new `integration_hyphen_installation_hyphen_request`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the request installation.
            ///   - node_id:
            ///   - account:
            ///   - requester:
            ///   - created_at:
            public init(
                id: Swift.Int,
                node_id: Swift.String? = nil,
                account: Components.Schemas.integration_hyphen_installation_hyphen_request.accountPayload,
                requester: Components.Schemas.simple_hyphen_user,
                created_at: Foundation.Date
            ) {
                self.id = id
                self.node_id = node_id
                self.account = account
                self.requester = requester
                self.created_at = created_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case account
                case requester
                case created_at
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        public struct app_hyphen_permissions: Codable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen public enum actionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            public var actions: Components.Schemas.app_hyphen_permissions.actionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen public enum administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            public var administration: Components.Schemas.app_hyphen_permissions.administrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen public enum checksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            public var checks: Components.Schemas.app_hyphen_permissions.checksPayload?
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            @frozen public enum codespacesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            public var codespaces: Components.Schemas.app_hyphen_permissions.codespacesPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen public enum contentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            public var contents: Components.Schemas.app_hyphen_permissions.contentsPayload?
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            @frozen public enum dependabot_secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            public var dependabot_secrets: Components.Schemas.app_hyphen_permissions.dependabot_secretsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen public enum deploymentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            public var deployments: Components.Schemas.app_hyphen_permissions.deploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen public enum environmentsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            public var environments: Components.Schemas.app_hyphen_permissions.environmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen public enum issuesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            public var issues: Components.Schemas.app_hyphen_permissions.issuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen public enum metadataPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            public var metadata: Components.Schemas.app_hyphen_permissions.metadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen public enum packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            public var packages: Components.Schemas.app_hyphen_permissions.packagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen public enum pagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            public var pages: Components.Schemas.app_hyphen_permissions.pagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen public enum pull_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            public var pull_requests: Components.Schemas.app_hyphen_permissions.pull_requestsPayload?
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            @frozen public enum repository_custom_propertiesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            public var repository_custom_properties: Components.Schemas.app_hyphen_permissions.repository_custom_propertiesPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen public enum repository_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            public var repository_hooks: Components.Schemas.app_hyphen_permissions.repository_hooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen public enum repository_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            public var repository_projects: Components.Schemas.app_hyphen_permissions.repository_projectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen public enum secret_scanning_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            public var secret_scanning_alerts: Components.Schemas.app_hyphen_permissions.secret_scanning_alertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen public enum secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            public var secrets: Components.Schemas.app_hyphen_permissions.secretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen public enum security_eventsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            public var security_events: Components.Schemas.app_hyphen_permissions.security_eventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen public enum single_filePayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            public var single_file: Components.Schemas.app_hyphen_permissions.single_filePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen public enum statusesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            public var statuses: Components.Schemas.app_hyphen_permissions.statusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen public enum vulnerability_alertsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            public var vulnerability_alerts: Components.Schemas.app_hyphen_permissions.vulnerability_alertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen public enum workflowsPayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            public var workflows: Components.Schemas.app_hyphen_permissions.workflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen public enum membersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            public var members: Components.Schemas.app_hyphen_permissions.membersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen public enum organization_administrationPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            public var organization_administration: Components.Schemas.app_hyphen_permissions.organization_administrationPayload?
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen public enum organization_custom_rolesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            public var organization_custom_roles: Components.Schemas.app_hyphen_permissions.organization_custom_rolesPayload?
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            @frozen public enum organization_custom_org_rolesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            public var organization_custom_org_roles: Components.Schemas.app_hyphen_permissions.organization_custom_org_rolesPayload?
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            @frozen public enum organization_custom_propertiesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            public var organization_custom_properties: Components.Schemas.app_hyphen_permissions.organization_custom_propertiesPayload?
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            @frozen public enum organization_copilot_seat_managementPayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            public var organization_copilot_seat_management: Components.Schemas.app_hyphen_permissions.organization_copilot_seat_managementPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen public enum organization_announcement_bannersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            public var organization_announcement_banners: Components.Schemas.app_hyphen_permissions.organization_announcement_bannersPayload?
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            @frozen public enum organization_eventsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
            }
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            public var organization_events: Components.Schemas.app_hyphen_permissions.organization_eventsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen public enum organization_hooksPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            public var organization_hooks: Components.Schemas.app_hyphen_permissions.organization_hooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen public enum organization_personal_access_tokensPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            public var organization_personal_access_tokens: Components.Schemas.app_hyphen_permissions.organization_personal_access_tokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen public enum organization_personal_access_token_requestsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            public var organization_personal_access_token_requests: Components.Schemas.app_hyphen_permissions.organization_personal_access_token_requestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen public enum organization_planPayload: String, Codable, Hashable, Sendable {
                case read = "read"
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            public var organization_plan: Components.Schemas.app_hyphen_permissions.organization_planPayload?
            /// The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen public enum organization_projectsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            public var organization_projects: Components.Schemas.app_hyphen_permissions.organization_projectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen public enum organization_packagesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            public var organization_packages: Components.Schemas.app_hyphen_permissions.organization_packagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen public enum organization_secretsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            public var organization_secrets: Components.Schemas.app_hyphen_permissions.organization_secretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen public enum organization_self_hosted_runnersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            public var organization_self_hosted_runners: Components.Schemas.app_hyphen_permissions.organization_self_hosted_runnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen public enum organization_user_blockingPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            public var organization_user_blocking: Components.Schemas.app_hyphen_permissions.organization_user_blockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen public enum team_discussionsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            public var team_discussions: Components.Schemas.app_hyphen_permissions.team_discussionsPayload?
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            @frozen public enum email_addressesPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            public var email_addresses: Components.Schemas.app_hyphen_permissions.email_addressesPayload?
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            @frozen public enum followersPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            public var followers: Components.Schemas.app_hyphen_permissions.followersPayload?
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            @frozen public enum git_ssh_keysPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            public var git_ssh_keys: Components.Schemas.app_hyphen_permissions.git_ssh_keysPayload?
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            @frozen public enum gpg_keysPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            public var gpg_keys: Components.Schemas.app_hyphen_permissions.gpg_keysPayload?
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            @frozen public enum interaction_limitsPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            public var interaction_limits: Components.Schemas.app_hyphen_permissions.interaction_limitsPayload?
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            @frozen public enum profilePayload: String, Codable, Hashable, Sendable {
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            public var profile: Components.Schemas.app_hyphen_permissions.profilePayload?
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            @frozen public enum starringPayload: String, Codable, Hashable, Sendable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            public var starring: Components.Schemas.app_hyphen_permissions.starringPayload?
            /// Creates a new `app_hyphen_permissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - codespaces: The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - dependabot_secrets: The leve of permission to grant the access token to manage Dependabot secrets.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pull_requests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repository_custom_properties: The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///   - repository_hooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repository_projects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secret_scanning_alerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - security_events: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - single_file: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerability_alerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organization_administration: The level of permission to grant the access token to manage access to an organization.
            ///   - organization_custom_roles: The level of permission to grant the access token for custom repository roles management.
            ///   - organization_custom_org_roles: The level of permission to grant the access token for custom organization roles management.
            ///   - organization_custom_properties: The level of permission to grant the access token for custom property management.
            ///   - organization_copilot_seat_management: The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///   - organization_announcement_banners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organization_events: The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///   - organization_hooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organization_personal_access_tokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organization_personal_access_token_requests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organization_plan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organization_projects: The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///   - organization_packages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organization_secrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organization_self_hosted_runners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organization_user_blocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - team_discussions: The level of permission to grant the access token to manage team discussions and related comments.
            ///   - email_addresses: The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///   - followers: The level of permission to grant the access token to manage the followers belonging to a user.
            ///   - git_ssh_keys: The level of permission to grant the access token to manage git SSH keys.
            ///   - gpg_keys: The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///   - interaction_limits: The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///   - profile: The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///   - starring: The level of permission to grant the access token to list and manage repositories a user is starring.
            public init(
                actions: Components.Schemas.app_hyphen_permissions.actionsPayload? = nil,
                administration: Components.Schemas.app_hyphen_permissions.administrationPayload? = nil,
                checks: Components.Schemas.app_hyphen_permissions.checksPayload? = nil,
                codespaces: Components.Schemas.app_hyphen_permissions.codespacesPayload? = nil,
                contents: Components.Schemas.app_hyphen_permissions.contentsPayload? = nil,
                dependabot_secrets: Components.Schemas.app_hyphen_permissions.dependabot_secretsPayload? = nil,
                deployments: Components.Schemas.app_hyphen_permissions.deploymentsPayload? = nil,
                environments: Components.Schemas.app_hyphen_permissions.environmentsPayload? = nil,
                issues: Components.Schemas.app_hyphen_permissions.issuesPayload? = nil,
                metadata: Components.Schemas.app_hyphen_permissions.metadataPayload? = nil,
                packages: Components.Schemas.app_hyphen_permissions.packagesPayload? = nil,
                pages: Components.Schemas.app_hyphen_permissions.pagesPayload? = nil,
                pull_requests: Components.Schemas.app_hyphen_permissions.pull_requestsPayload? = nil,
                repository_custom_properties: Components.Schemas.app_hyphen_permissions.repository_custom_propertiesPayload? = nil,
                repository_hooks: Components.Schemas.app_hyphen_permissions.repository_hooksPayload? = nil,
                repository_projects: Components.Schemas.app_hyphen_permissions.repository_projectsPayload? = nil,
                secret_scanning_alerts: Components.Schemas.app_hyphen_permissions.secret_scanning_alertsPayload? = nil,
                secrets: Components.Schemas.app_hyphen_permissions.secretsPayload? = nil,
                security_events: Components.Schemas.app_hyphen_permissions.security_eventsPayload? = nil,
                single_file: Components.Schemas.app_hyphen_permissions.single_filePayload? = nil,
                statuses: Components.Schemas.app_hyphen_permissions.statusesPayload? = nil,
                vulnerability_alerts: Components.Schemas.app_hyphen_permissions.vulnerability_alertsPayload? = nil,
                workflows: Components.Schemas.app_hyphen_permissions.workflowsPayload? = nil,
                members: Components.Schemas.app_hyphen_permissions.membersPayload? = nil,
                organization_administration: Components.Schemas.app_hyphen_permissions.organization_administrationPayload? = nil,
                organization_custom_roles: Components.Schemas.app_hyphen_permissions.organization_custom_rolesPayload? = nil,
                organization_custom_org_roles: Components.Schemas.app_hyphen_permissions.organization_custom_org_rolesPayload? = nil,
                organization_custom_properties: Components.Schemas.app_hyphen_permissions.organization_custom_propertiesPayload? = nil,
                organization_copilot_seat_management: Components.Schemas.app_hyphen_permissions.organization_copilot_seat_managementPayload? = nil,
                organization_announcement_banners: Components.Schemas.app_hyphen_permissions.organization_announcement_bannersPayload? = nil,
                organization_events: Components.Schemas.app_hyphen_permissions.organization_eventsPayload? = nil,
                organization_hooks: Components.Schemas.app_hyphen_permissions.organization_hooksPayload? = nil,
                organization_personal_access_tokens: Components.Schemas.app_hyphen_permissions.organization_personal_access_tokensPayload? = nil,
                organization_personal_access_token_requests: Components.Schemas.app_hyphen_permissions.organization_personal_access_token_requestsPayload? = nil,
                organization_plan: Components.Schemas.app_hyphen_permissions.organization_planPayload? = nil,
                organization_projects: Components.Schemas.app_hyphen_permissions.organization_projectsPayload? = nil,
                organization_packages: Components.Schemas.app_hyphen_permissions.organization_packagesPayload? = nil,
                organization_secrets: Components.Schemas.app_hyphen_permissions.organization_secretsPayload? = nil,
                organization_self_hosted_runners: Components.Schemas.app_hyphen_permissions.organization_self_hosted_runnersPayload? = nil,
                organization_user_blocking: Components.Schemas.app_hyphen_permissions.organization_user_blockingPayload? = nil,
                team_discussions: Components.Schemas.app_hyphen_permissions.team_discussionsPayload? = nil,
                email_addresses: Components.Schemas.app_hyphen_permissions.email_addressesPayload? = nil,
                followers: Components.Schemas.app_hyphen_permissions.followersPayload? = nil,
                git_ssh_keys: Components.Schemas.app_hyphen_permissions.git_ssh_keysPayload? = nil,
                gpg_keys: Components.Schemas.app_hyphen_permissions.gpg_keysPayload? = nil,
                interaction_limits: Components.Schemas.app_hyphen_permissions.interaction_limitsPayload? = nil,
                profile: Components.Schemas.app_hyphen_permissions.profilePayload? = nil,
                starring: Components.Schemas.app_hyphen_permissions.starringPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.codespaces = codespaces
                self.contents = contents
                self.dependabot_secrets = dependabot_secrets
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pull_requests = pull_requests
                self.repository_custom_properties = repository_custom_properties
                self.repository_hooks = repository_hooks
                self.repository_projects = repository_projects
                self.secret_scanning_alerts = secret_scanning_alerts
                self.secrets = secrets
                self.security_events = security_events
                self.single_file = single_file
                self.statuses = statuses
                self.vulnerability_alerts = vulnerability_alerts
                self.workflows = workflows
                self.members = members
                self.organization_administration = organization_administration
                self.organization_custom_roles = organization_custom_roles
                self.organization_custom_org_roles = organization_custom_org_roles
                self.organization_custom_properties = organization_custom_properties
                self.organization_copilot_seat_management = organization_copilot_seat_management
                self.organization_announcement_banners = organization_announcement_banners
                self.organization_events = organization_events
                self.organization_hooks = organization_hooks
                self.organization_personal_access_tokens = organization_personal_access_tokens
                self.organization_personal_access_token_requests = organization_personal_access_token_requests
                self.organization_plan = organization_plan
                self.organization_projects = organization_projects
                self.organization_packages = organization_packages
                self.organization_secrets = organization_secrets
                self.organization_self_hosted_runners = organization_self_hosted_runners
                self.organization_user_blocking = organization_user_blocking
                self.team_discussions = team_discussions
                self.email_addresses = email_addresses
                self.followers = followers
                self.git_ssh_keys = git_ssh_keys
                self.gpg_keys = gpg_keys
                self.interaction_limits = interaction_limits
                self.profile = profile
                self.starring = starring
            }
            public enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case codespaces
                case contents
                case dependabot_secrets
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pull_requests
                case repository_custom_properties
                case repository_hooks
                case repository_projects
                case secret_scanning_alerts
                case secrets
                case security_events
                case single_file
                case statuses
                case vulnerability_alerts
                case workflows
                case members
                case organization_administration
                case organization_custom_roles
                case organization_custom_org_roles
                case organization_custom_properties
                case organization_copilot_seat_management
                case organization_announcement_banners
                case organization_events
                case organization_hooks
                case organization_personal_access_tokens
                case organization_personal_access_token_requests
                case organization_plan
                case organization_projects
                case organization_packages
                case organization_secrets
                case organization_self_hosted_runners
                case organization_user_blocking
                case team_discussions
                case email_addresses
                case followers
                case git_ssh_keys
                case gpg_keys
                case interaction_limits
                case profile
                case starring
            }
        }
        /// Installation
        ///
        /// - Remark: Generated from `#/components/schemas/installation`.
        public struct installation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public struct accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/installation/account/value1`.
                public var value1: Components.Schemas.simple_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/installation/account/value2`.
                public var value2: Components.Schemas.enterprise?
                /// Creates a new `accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.simple_hyphen_user? = nil,
                    value2: Components.Schemas.enterprise? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1?.encode(to: encoder)
                    try value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/installation/account`.
            public var account: Components.Schemas.installation.accountPayload?
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/installation/repository_selection`.
            public var repository_selection: Components.Schemas.installation.repository_selectionPayload
            /// - Remark: Generated from `#/components/schemas/installation/access_tokens_url`.
            public var access_tokens_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/app_id`.
            public var app_id: Swift.Int
            /// The ID of the user or organization this token is being scoped to.
            ///
            /// - Remark: Generated from `#/components/schemas/installation/target_id`.
            public var target_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/installation/target_type`.
            public var target_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/permissions`.
            public var permissions: Components.Schemas.app_hyphen_permissions
            /// - Remark: Generated from `#/components/schemas/installation/events`.
            public var events: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/installation/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/installation/single_file_name`.
            public var single_file_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/installation/app_slug`.
            public var app_slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation/suspended_by`.
            public var suspended_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/installation/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/installation/contact_email`.
            public var contact_email: Swift.String?
            /// Creates a new `installation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - account:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            ///   - access_tokens_url:
            ///   - repositories_url:
            ///   - html_url:
            ///   - app_id:
            ///   - target_id: The ID of the user or organization this token is being scoped to.
            ///   - target_type:
            ///   - permissions:
            ///   - events:
            ///   - created_at:
            ///   - updated_at:
            ///   - single_file_name:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            ///   - app_slug:
            ///   - suspended_by:
            ///   - suspended_at:
            ///   - contact_email:
            public init(
                id: Swift.Int,
                account: Components.Schemas.installation.accountPayload? = nil,
                repository_selection: Components.Schemas.installation.repository_selectionPayload,
                access_tokens_url: Swift.String,
                repositories_url: Swift.String,
                html_url: Swift.String,
                app_id: Swift.Int,
                target_id: Swift.Int,
                target_type: Swift.String,
                permissions: Components.Schemas.app_hyphen_permissions,
                events: [Swift.String],
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                single_file_name: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil,
                app_slug: Swift.String,
                suspended_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                suspended_at: Foundation.Date? = nil,
                contact_email: Swift.String? = nil
            ) {
                self.id = id
                self.account = account
                self.repository_selection = repository_selection
                self.access_tokens_url = access_tokens_url
                self.repositories_url = repositories_url
                self.html_url = html_url
                self.app_id = app_id
                self.target_id = target_id
                self.target_type = target_type
                self.permissions = permissions
                self.events = events
                self.created_at = created_at
                self.updated_at = updated_at
                self.single_file_name = single_file_name
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
                self.app_slug = app_slug
                self.suspended_by = suspended_by
                self.suspended_at = suspended_at
                self.contact_email = contact_email
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case account
                case repository_selection
                case access_tokens_url
                case repositories_url
                case html_url
                case app_id
                case target_id
                case target_type
                case permissions
                case events
                case created_at
                case updated_at
                case single_file_name
                case has_multiple_single_files
                case single_file_paths
                case app_slug
                case suspended_by
                case suspended_at
                case contact_email
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Authentication token for a GitHub App installed on a user or org.
        ///
        /// - Remark: Generated from `#/components/schemas/installation-token`.
        public struct installation_hyphen_token: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/installation-token/token`.
            public var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/expires_at`.
            public var expires_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/permissions`.
            public var permissions: Components.Schemas.app_hyphen_permissions?
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            public var repository_selection: Components.Schemas.installation_hyphen_token.repository_selectionPayload?
            /// - Remark: Generated from `#/components/schemas/installation-token/repositories`.
            public var repositories: [Components.Schemas.repository]?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file`.
            public var single_file: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation-token/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// Creates a new `installation_hyphen_token`.
            ///
            /// - Parameters:
            ///   - token:
            ///   - expires_at:
            ///   - permissions:
            ///   - repository_selection:
            ///   - repositories:
            ///   - single_file:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            public init(
                token: Swift.String,
                expires_at: Swift.String,
                permissions: Components.Schemas.app_hyphen_permissions? = nil,
                repository_selection: Components.Schemas.installation_hyphen_token.repository_selectionPayload? = nil,
                repositories: [Components.Schemas.repository]? = nil,
                single_file: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil
            ) {
                self.token = token
                self.expires_at = expires_at
                self.permissions = permissions
                self.repository_selection = repository_selection
                self.repositories = repositories
                self.single_file = single_file
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
            }
            public enum CodingKeys: String, CodingKey {
                case token
                case expires_at
                case permissions
                case repository_selection
                case repositories
                case single_file
                case has_multiple_single_files
                case single_file_paths
            }
        }
        /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation`.
        public struct nullable_hyphen_scoped_hyphen_installation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/permissions`.
            public var permissions: Components.Schemas.app_hyphen_permissions
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/repository_selection`.
            @frozen public enum repository_selectionPayload: String, Codable, Hashable, Sendable {
                case all = "all"
                case selected = "selected"
            }
            /// Describe whether all repositories have been selected or there's a selection involved
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/repository_selection`.
            public var repository_selection: Components.Schemas.nullable_hyphen_scoped_hyphen_installation.repository_selectionPayload
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/single_file_name`.
            public var single_file_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/has_multiple_single_files`.
            public var has_multiple_single_files: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/single_file_paths`.
            public var single_file_paths: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-scoped-installation/account`.
            public var account: Components.Schemas.simple_hyphen_user
            /// Creates a new `nullable_hyphen_scoped_hyphen_installation`.
            ///
            /// - Parameters:
            ///   - permissions:
            ///   - repository_selection: Describe whether all repositories have been selected or there's a selection involved
            ///   - single_file_name:
            ///   - has_multiple_single_files:
            ///   - single_file_paths:
            ///   - repositories_url:
            ///   - account:
            public init(
                permissions: Components.Schemas.app_hyphen_permissions,
                repository_selection: Components.Schemas.nullable_hyphen_scoped_hyphen_installation.repository_selectionPayload,
                single_file_name: Swift.String? = nil,
                has_multiple_single_files: Swift.Bool? = nil,
                single_file_paths: [Swift.String]? = nil,
                repositories_url: Swift.String,
                account: Components.Schemas.simple_hyphen_user
            ) {
                self.permissions = permissions
                self.repository_selection = repository_selection
                self.single_file_name = single_file_name
                self.has_multiple_single_files = has_multiple_single_files
                self.single_file_paths = single_file_paths
                self.repositories_url = repositories_url
                self.account = account
            }
            public enum CodingKeys: String, CodingKey {
                case permissions
                case repository_selection
                case single_file_name
                case has_multiple_single_files
                case single_file_paths
                case repositories_url
                case account
            }
        }
        /// The authorization for an OAuth app, GitHub App, or a Personal Access Token.
        ///
        /// - Remark: Generated from `#/components/schemas/authorization`.
        public struct authorization: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/authorization/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/authorization/url`.
            public var url: Swift.String
            /// A list of scopes that this authorization is in.
            ///
            /// - Remark: Generated from `#/components/schemas/authorization/scopes`.
            public var scopes: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/authorization/token`.
            public var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/authorization/token_last_eight`.
            public var token_last_eight: Swift.String?
            /// - Remark: Generated from `#/components/schemas/authorization/hashed_token`.
            public var hashed_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/authorization/app`.
            public struct appPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/authorization/app/client_id`.
                public var client_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/authorization/app/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/authorization/app/url`.
                public var url: Swift.String
                /// Creates a new `appPayload`.
                ///
                /// - Parameters:
                ///   - client_id:
                ///   - name:
                ///   - url:
                public init(
                    client_id: Swift.String,
                    name: Swift.String,
                    url: Swift.String
                ) {
                    self.client_id = client_id
                    self.name = name
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case client_id
                    case name
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/authorization/app`.
            public var app: Components.Schemas.authorization.appPayload
            /// - Remark: Generated from `#/components/schemas/authorization/note`.
            public var note: Swift.String?
            /// - Remark: Generated from `#/components/schemas/authorization/note_url`.
            public var note_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/authorization/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/authorization/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/authorization/fingerprint`.
            public var fingerprint: Swift.String?
            /// - Remark: Generated from `#/components/schemas/authorization/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/authorization/installation`.
            public var installation: Components.Schemas.nullable_hyphen_scoped_hyphen_installation?
            /// - Remark: Generated from `#/components/schemas/authorization/expires_at`.
            public var expires_at: Foundation.Date?
            /// Creates a new `authorization`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - url:
            ///   - scopes: A list of scopes that this authorization is in.
            ///   - token:
            ///   - token_last_eight:
            ///   - hashed_token:
            ///   - app:
            ///   - note:
            ///   - note_url:
            ///   - updated_at:
            ///   - created_at:
            ///   - fingerprint:
            ///   - user:
            ///   - installation:
            ///   - expires_at:
            public init(
                id: Swift.Int64,
                url: Swift.String,
                scopes: [Swift.String]? = nil,
                token: Swift.String,
                token_last_eight: Swift.String? = nil,
                hashed_token: Swift.String? = nil,
                app: Components.Schemas.authorization.appPayload,
                note: Swift.String? = nil,
                note_url: Swift.String? = nil,
                updated_at: Foundation.Date,
                created_at: Foundation.Date,
                fingerprint: Swift.String? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                installation: Components.Schemas.nullable_hyphen_scoped_hyphen_installation? = nil,
                expires_at: Foundation.Date? = nil
            ) {
                self.id = id
                self.url = url
                self.scopes = scopes
                self.token = token
                self.token_last_eight = token_last_eight
                self.hashed_token = hashed_token
                self.app = app
                self.note = note
                self.note_url = note_url
                self.updated_at = updated_at
                self.created_at = created_at
                self.fingerprint = fingerprint
                self.user = user
                self.installation = installation
                self.expires_at = expires_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case url
                case scopes
                case token
                case token_last_eight
                case hashed_token
                case app
                case note
                case note_url
                case updated_at
                case created_at
                case fingerprint
                case user
                case installation
                case expires_at
            }
        }
        /// Marketplace Listing Plan
        ///
        /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan`.
        public struct marketplace_hyphen_listing_hyphen_plan: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/accounts_url`.
            public var accounts_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/monthly_price_in_cents`.
            public var monthly_price_in_cents: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/yearly_price_in_cents`.
            public var yearly_price_in_cents: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/price_model`.
            @frozen public enum price_modelPayload: String, Codable, Hashable, Sendable {
                case FREE = "FREE"
                case FLAT_RATE = "FLAT_RATE"
                case PER_UNIT = "PER_UNIT"
            }
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/price_model`.
            public var price_model: Components.Schemas.marketplace_hyphen_listing_hyphen_plan.price_modelPayload
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/has_free_trial`.
            public var has_free_trial: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/unit_name`.
            public var unit_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-listing-plan/bullets`.
            public var bullets: [Swift.String]
            /// Creates a new `marketplace_hyphen_listing_hyphen_plan`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - accounts_url:
            ///   - id:
            ///   - number:
            ///   - name:
            ///   - description:
            ///   - monthly_price_in_cents:
            ///   - yearly_price_in_cents:
            ///   - price_model:
            ///   - has_free_trial:
            ///   - unit_name:
            ///   - state:
            ///   - bullets:
            public init(
                url: Swift.String,
                accounts_url: Swift.String,
                id: Swift.Int,
                number: Swift.Int,
                name: Swift.String,
                description: Swift.String,
                monthly_price_in_cents: Swift.Int,
                yearly_price_in_cents: Swift.Int,
                price_model: Components.Schemas.marketplace_hyphen_listing_hyphen_plan.price_modelPayload,
                has_free_trial: Swift.Bool,
                unit_name: Swift.String? = nil,
                state: Swift.String,
                bullets: [Swift.String]
            ) {
                self.url = url
                self.accounts_url = accounts_url
                self.id = id
                self.number = number
                self.name = name
                self.description = description
                self.monthly_price_in_cents = monthly_price_in_cents
                self.yearly_price_in_cents = yearly_price_in_cents
                self.price_model = price_model
                self.has_free_trial = has_free_trial
                self.unit_name = unit_name
                self.state = state
                self.bullets = bullets
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case accounts_url
                case id
                case number
                case name
                case description
                case monthly_price_in_cents
                case yearly_price_in_cents
                case price_model
                case has_free_trial
                case unit_name
                case state
                case bullets
            }
        }
        /// Marketplace Purchase
        ///
        /// - Remark: Generated from `#/components/schemas/marketplace-purchase`.
        public struct marketplace_hyphen_purchase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/organization_billing_email`.
            public var organization_billing_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change`.
            public struct marketplace_pending_changePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change/is_installed`.
                public var is_installed: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change/effective_date`.
                public var effective_date: Swift.String?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change/unit_count`.
                public var unit_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change/plan`.
                public var plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan?
                /// Creates a new `marketplace_pending_changePayload`.
                ///
                /// - Parameters:
                ///   - is_installed:
                ///   - effective_date:
                ///   - unit_count:
                ///   - id:
                ///   - plan:
                public init(
                    is_installed: Swift.Bool? = nil,
                    effective_date: Swift.String? = nil,
                    unit_count: Swift.Int? = nil,
                    id: Swift.Int? = nil,
                    plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan? = nil
                ) {
                    self.is_installed = is_installed
                    self.effective_date = effective_date
                    self.unit_count = unit_count
                    self.id = id
                    self.plan = plan
                }
                public enum CodingKeys: String, CodingKey {
                    case is_installed
                    case effective_date
                    case unit_count
                    case id
                    case plan
                }
            }
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_pending_change`.
            public var marketplace_pending_change: Components.Schemas.marketplace_hyphen_purchase.marketplace_pending_changePayload?
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase`.
            public struct marketplace_purchasePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/billing_cycle`.
                public var billing_cycle: Swift.String?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/next_billing_date`.
                public var next_billing_date: Swift.String?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/is_installed`.
                public var is_installed: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/unit_count`.
                public var unit_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/on_free_trial`.
                public var on_free_trial: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/free_trial_ends_on`.
                public var free_trial_ends_on: Swift.String?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/updated_at`.
                public var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase/plan`.
                public var plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan?
                /// Creates a new `marketplace_purchasePayload`.
                ///
                /// - Parameters:
                ///   - billing_cycle:
                ///   - next_billing_date:
                ///   - is_installed:
                ///   - unit_count:
                ///   - on_free_trial:
                ///   - free_trial_ends_on:
                ///   - updated_at:
                ///   - plan:
                public init(
                    billing_cycle: Swift.String? = nil,
                    next_billing_date: Swift.String? = nil,
                    is_installed: Swift.Bool? = nil,
                    unit_count: Swift.Int? = nil,
                    on_free_trial: Swift.Bool? = nil,
                    free_trial_ends_on: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan? = nil
                ) {
                    self.billing_cycle = billing_cycle
                    self.next_billing_date = next_billing_date
                    self.is_installed = is_installed
                    self.unit_count = unit_count
                    self.on_free_trial = on_free_trial
                    self.free_trial_ends_on = free_trial_ends_on
                    self.updated_at = updated_at
                    self.plan = plan
                }
                public enum CodingKeys: String, CodingKey {
                    case billing_cycle
                    case next_billing_date
                    case is_installed
                    case unit_count
                    case on_free_trial
                    case free_trial_ends_on
                    case updated_at
                    case plan
                }
            }
            /// - Remark: Generated from `#/components/schemas/marketplace-purchase/marketplace_purchase`.
            public var marketplace_purchase: Components.Schemas.marketplace_hyphen_purchase.marketplace_purchasePayload
            /// Creates a new `marketplace_hyphen_purchase`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - _type:
            ///   - id:
            ///   - login:
            ///   - organization_billing_email:
            ///   - email:
            ///   - marketplace_pending_change:
            ///   - marketplace_purchase:
            public init(
                url: Swift.String,
                _type: Swift.String,
                id: Swift.Int,
                login: Swift.String,
                organization_billing_email: Swift.String? = nil,
                email: Swift.String? = nil,
                marketplace_pending_change: Components.Schemas.marketplace_hyphen_purchase.marketplace_pending_changePayload? = nil,
                marketplace_purchase: Components.Schemas.marketplace_hyphen_purchase.marketplace_purchasePayload
            ) {
                self.url = url
                self._type = _type
                self.id = id
                self.login = login
                self.organization_billing_email = organization_billing_email
                self.email = email
                self.marketplace_pending_change = marketplace_pending_change
                self.marketplace_purchase = marketplace_purchase
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case _type = "type"
                case id
                case login
                case organization_billing_email
                case email
                case marketplace_pending_change
                case marketplace_purchase
            }
        }
        /// - Remark: Generated from `#/components/schemas/marketplace-account`.
        public struct marketplace_hyphen_account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/marketplace-account/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-account/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/marketplace-account/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-account/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/marketplace-account/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/marketplace-account/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/marketplace-account/organization_billing_email`.
            public var organization_billing_email: Swift.String?
            /// Creates a new `marketplace_hyphen_account`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - _type:
            ///   - node_id:
            ///   - login:
            ///   - email:
            ///   - organization_billing_email:
            public init(
                url: Swift.String,
                id: Swift.Int,
                _type: Swift.String,
                node_id: Swift.String? = nil,
                login: Swift.String,
                email: Swift.String? = nil,
                organization_billing_email: Swift.String? = nil
            ) {
                self.url = url
                self.id = id
                self._type = _type
                self.node_id = node_id
                self.login = login
                self.email = email
                self.organization_billing_email = organization_billing_email
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case id
                case _type = "type"
                case node_id
                case login
                case email
                case organization_billing_email
            }
        }
        /// User Marketplace Purchase
        ///
        /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase`.
        public struct user_hyphen_marketplace_hyphen_purchase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/billing_cycle`.
            public var billing_cycle: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/next_billing_date`.
            public var next_billing_date: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/unit_count`.
            public var unit_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/on_free_trial`.
            public var on_free_trial: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/free_trial_ends_on`.
            public var free_trial_ends_on: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/account`.
            public var account: Components.Schemas.marketplace_hyphen_account
            /// - Remark: Generated from `#/components/schemas/user-marketplace-purchase/plan`.
            public var plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan
            /// Creates a new `user_hyphen_marketplace_hyphen_purchase`.
            ///
            /// - Parameters:
            ///   - billing_cycle:
            ///   - next_billing_date:
            ///   - unit_count:
            ///   - on_free_trial:
            ///   - free_trial_ends_on:
            ///   - updated_at:
            ///   - account:
            ///   - plan:
            public init(
                billing_cycle: Swift.String,
                next_billing_date: Foundation.Date? = nil,
                unit_count: Swift.Int? = nil,
                on_free_trial: Swift.Bool,
                free_trial_ends_on: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                account: Components.Schemas.marketplace_hyphen_account,
                plan: Components.Schemas.marketplace_hyphen_listing_hyphen_plan
            ) {
                self.billing_cycle = billing_cycle
                self.next_billing_date = next_billing_date
                self.unit_count = unit_count
                self.on_free_trial = on_free_trial
                self.free_trial_ends_on = free_trial_ends_on
                self.updated_at = updated_at
                self.account = account
                self.plan = plan
            }
            public enum CodingKeys: String, CodingKey {
                case billing_cycle
                case next_billing_date
                case unit_count
                case on_free_trial
                case free_trial_ends_on
                case updated_at
                case account
                case plan
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
        ///
        /// - Remark: Generated from `#/components/parameters/cursor`.
        public typealias cursor = Swift.String
        /// - Remark: Generated from `#/components/parameters/delivery-id`.
        public typealias delivery_hyphen_id = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The unique identifier of the installation.
        ///
        /// - Remark: Generated from `#/components/parameters/installation-id`.
        public typealias installation_hyphen_id = Swift.Int
        /// The client ID of the GitHub app.
        ///
        /// - Remark: Generated from `#/components/parameters/client-id`.
        public typealias client_hyphen_id = Swift.String
        /// - Remark: Generated from `#/components/parameters/app-slug`.
        public typealias app_hyphen_slug = Swift.String
        /// account_id parameter
        ///
        /// - Remark: Generated from `#/components/parameters/account-id`.
        public typealias account_hyphen_id = Swift.Int
        /// The unique identifier of the plan.
        ///
        /// - Remark: Generated from `#/components/parameters/plan-id`.
        public typealias plan_hyphen_id = Swift.Int
        /// The property to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/sort`.
        @frozen public enum sort: String, Codable, Hashable, Sendable {
            case created = "created"
            case updated = "updated"
        }
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The unique identifier of the repository.
        ///
        /// - Remark: Generated from `#/components/parameters/repository-id`.
        public typealias repository_hyphen_id = Swift.Int
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct moved_permanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.moved_permanently.Body
            /// Creates a new `moved_permanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.moved_permanently.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get the authenticated app
    ///
    /// Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app`.
    /// - Remark: Generated from `#/paths//app/get(apps/get-authenticated)`.
    public enum apps_sol_get_hyphen_authenticated {
        public static let id: Swift.String = "apps/get-authenticated"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_authenticated.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_authenticated.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_authenticated.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.apps_sol_get_hyphen_authenticated.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.integration)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.integration {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_authenticated.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_authenticated.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/get(apps/get-authenticated)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_authenticated.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_authenticated.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a GitHub App from a manifest
    ///
    /// Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
    ///
    /// - Remark: HTTP `POST /app-manifests/{code}/conversions`.
    /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)`.
    public enum apps_sol_create_hyphen_from_hyphen_manifest {
        public static let id: Swift.String = "apps/create-from-manifest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/path/code`.
                public var code: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - code:
                public init(code: Swift.String) {
                    self.code = code
                }
            }
            public var path: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Path
            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_create_hyphen_from_hyphen_manifest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_create_hyphen_from_hyphen_manifest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Path,
                headers: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value1`.
                        public var value1: Components.Schemas.integration
                        /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2`.
                        public struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2/client_id`.
                            public var client_id: Swift.String
                            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2/client_secret`.
                            public var client_secret: Swift.String
                            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2/webhook_secret`.
                            public var webhook_secret: Swift.String?
                            /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2/pem`.
                            public var pem: Swift.String
                            /// A container of undocumented properties.
                            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - client_id:
                            ///   - client_secret:
                            ///   - webhook_secret:
                            ///   - pem:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(
                                client_id: Swift.String,
                                client_secret: Swift.String,
                                webhook_secret: Swift.String? = nil,
                                pem: Swift.String,
                                additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                            ) {
                                self.client_id = client_id
                                self.client_secret = client_secret
                                self.webhook_secret = webhook_secret
                                self.pem = pem
                                self.additionalProperties = additionalProperties
                            }
                            public enum CodingKeys: String, CodingKey {
                                case client_id
                                case client_secret
                                case webhook_secret
                                case pem
                            }
                            public init(from decoder: any Decoder) throws {
                                let container = try decoder.container(keyedBy: CodingKeys.self)
                                client_id = try container.decode(
                                    Swift.String.self,
                                    forKey: .client_id
                                )
                                client_secret = try container.decode(
                                    Swift.String.self,
                                    forKey: .client_secret
                                )
                                webhook_secret = try container.decodeIfPresent(
                                    Swift.String.self,
                                    forKey: .webhook_secret
                                )
                                pem = try container.decode(
                                    Swift.String.self,
                                    forKey: .pem
                                )
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                    "client_id",
                                    "client_secret",
                                    "webhook_secret",
                                    "pem"
                                ])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                var container = encoder.container(keyedBy: CodingKeys.self)
                                try container.encode(
                                    client_id,
                                    forKey: .client_id
                                )
                                try container.encode(
                                    client_secret,
                                    forKey: .client_secret
                                )
                                try container.encodeIfPresent(
                                    webhook_secret,
                                    forKey: .webhook_secret
                                )
                                try container.encode(
                                    pem,
                                    forKey: .pem
                                )
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/json/value2`.
                        public var value2: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body.jsonPayload.Value2Payload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.integration,
                            value2: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body.jsonPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            value1 = try .init(from: decoder)
                            value2 = try .init(from: decoder)
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try value1.encode(to: encoder)
                            try value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/app-manifests/{code}/conversions/POST/responses/201/content/application\/json`.
                    case json(Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.apps_sol_create_hyphen_from_hyphen_manifest.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app-manifests/{code}/conversions/post(apps/create-from-manifest)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a webhook configuration for an app
    ///
    /// Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/get(apps/get-webhook-config-for-app)`.
    public enum apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app {
        public static let id: Swift.String = "apps/get-webhook-config-for-app"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/hook/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/hook/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/hook/config/get(apps/get-webhook-config-for-app)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a webhook configuration for an app
    ///
    /// Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PATCH /app/hook/config`.
    /// - Remark: Generated from `#/paths//app/hook/config/patch(apps/update-webhook-config-for-app)`.
    public enum apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app {
        public static let id: Swift.String = "apps/update-webhook-config-for-app"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/hook/config/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers
            /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/json/url`.
                    public var url: Components.Schemas.webhook_hyphen_config_hyphen_url?
                    /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/json/content_type`.
                    public var content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type?
                    /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/json/secret`.
                    public var secret: Components.Schemas.webhook_hyphen_config_hyphen_secret?
                    /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/json/insecure_ssl`.
                    public var insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - url:
                    ///   - content_type:
                    ///   - secret:
                    ///   - insecure_ssl:
                    public init(
                        url: Components.Schemas.webhook_hyphen_config_hyphen_url? = nil,
                        content_type: Components.Schemas.webhook_hyphen_config_hyphen_content_hyphen_type? = nil,
                        secret: Components.Schemas.webhook_hyphen_config_hyphen_secret? = nil,
                        insecure_ssl: Components.Schemas.webhook_hyphen_config_hyphen_insecure_hyphen_ssl? = nil
                    ) {
                        self.url = url
                        self.content_type = content_type
                        self.secret = secret
                        self.insecure_ssl = insecure_ssl
                    }
                    public enum CodingKeys: String, CodingKey {
                        case url
                        case content_type
                        case secret
                        case insecure_ssl
                    }
                }
                /// - Remark: Generated from `#/paths/app/hook/config/PATCH/requestBody/content/application\/json`.
                case json(Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Headers = .init(),
                body: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/config/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/hook/config/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.webhook_hyphen_config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.webhook_hyphen_config {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/hook/config/patch(apps/update-webhook-config-for-app)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_update_hyphen_webhook_hyphen_config_hyphen_for_hyphen_app.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List deliveries for an app webhook
    ///
    /// Returns a list of webhook deliveries for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)`.
    public enum apps_sol_list_hyphen_webhook_hyphen_deliveries {
        public static let id: Swift.String = "apps/list-webhook-deliveries"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                ///
                /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/query/cursor`.
                public var cursor: Components.Parameters.cursor?
                /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/query/redelivery`.
                public var redelivery: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - cursor: Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
                ///   - redelivery:
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    cursor: Components.Parameters.cursor? = nil,
                    redelivery: Swift.Bool? = nil
                ) {
                    self.per_page = per_page
                    self.cursor = cursor
                    self.redelivery = redelivery
                }
            }
            public var query: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query
            /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/hook/deliveries/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.hook_hyphen_delivery_hyphen_item])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.hook_hyphen_delivery_hyphen_item] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_webhook_hyphen_deliveries.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/get(apps/list-webhook-deliveries)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get a delivery for an app webhook
    ///
    /// Returns a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/hook/deliveries/{delivery_id}`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)`.
    public enum apps_sol_get_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "apps/get-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/GET/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - delivery_id:
                public init(delivery_id: Components.Parameters.delivery_hyphen_id) {
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.hook_hyphen_delivery)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.hook_hyphen_delivery {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_webhook_hyphen_delivery.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/get(apps/get-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Redeliver a delivery for an app webhook
    ///
    /// Redeliver a delivery for the webhook configured for a GitHub App.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/hook/deliveries/{delivery_id}/attempts`.
    /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)`.
    public enum apps_sol_redeliver_hyphen_webhook_hyphen_delivery {
        public static let id: Swift.String = "apps/redeliver-webhook-delivery"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/attempts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/attempts/POST/path/delivery_id`.
                public var delivery_id: Components.Parameters.delivery_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - delivery_id:
                public init(delivery_id: Components.Parameters.delivery_hyphen_id) {
                    self.delivery_id = delivery_id
                }
            }
            public var path: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path
            /// - Remark: Generated from `#/paths/app/hook/deliveries/{delivery_id}/attempts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Path,
                headers: Operations.apps_sol_redeliver_hyphen_webhook_hyphen_delivery.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/hook/deliveries/{delivery_id}/attempts/post(apps/redeliver-webhook-delivery)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List installation requests for the authenticated app
    ///
    /// Lists all the pending installation requests for the authenticated GitHub App.
    ///
    /// - Remark: HTTP `GET /app/installation-requests`.
    /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)`.
    public enum apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app {
        public static let id: Swift.String = "apps/list-installation-requests-for-authenticated-app"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installation-requests/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/app/installation-requests/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/app/installation-requests/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Query
            /// - Remark: Generated from `#/paths/app/installation-requests/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installation-requests/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installation-requests/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.integration_hyphen_installation_hyphen_request])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.integration_hyphen_installation_hyphen_request] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of integration installation requests
            ///
            /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_installation_hyphen_requests_hyphen_for_hyphen_authenticated_hyphen_app.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installation-requests/get(apps/list-installation-requests-for-authenticated-app)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List installations for the authenticated app
    ///
    /// The permissions the installation has are included under the `permissions` key.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations`.
    /// - Remark: Generated from `#/paths//app/installations/get(apps/list-installations)`.
    public enum apps_sol_list_hyphen_installations {
        public static let id: Swift.String = "apps/list-installations"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/app/installations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/app/installations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/app/installations/GET/query/since`.
                public var since: Components.Parameters.since?
                /// - Remark: Generated from `#/paths/app/installations/GET/query/outdated`.
                public var outdated: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - outdated:
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    since: Components.Parameters.since? = nil,
                    outdated: Swift.String? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                    self.since = since
                    self.outdated = outdated
                }
            }
            public var query: Operations.apps_sol_list_hyphen_installations.Input.Query
            /// - Remark: Generated from `#/paths/app/installations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_installations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_installations.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_installations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_installations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/app/installations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.installation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.installation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_installations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_installations.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_installations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The permissions the installation has are included under the `permissions` key.
            ///
            /// - Remark: Generated from `#/paths//app/installations/get(apps/list-installations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_installations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_installations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find an installation's information using the installation id.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/get(apps/get-installation)`.
    public enum apps_sol_get_hyphen_installation {
        public static let id: Swift.String = "apps/get-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/GET/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_get_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_get_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.installation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.installation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_installation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_installation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/get(apps/get-installation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_installation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_installation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/get(apps/get-installation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an installation for the authenticated app
    ///
    /// Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/delete(apps/delete-installation)`.
    public enum apps_sol_delete_hyphen_installation {
        public static let id: Swift.String = "apps/delete-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/DELETE/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_delete_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_delete_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_delete_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_delete_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/delete(apps/delete-installation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_delete_hyphen_installation.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_delete_hyphen_installation.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/delete(apps/delete-installation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// When using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    public enum apps_sol_create_hyphen_installation_hyphen_access_hyphen_token {
        public static let id: Swift.String = "apps/create-installation-access-token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Headers
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// List of repository names that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repositories`.
                    public var repositories: [Swift.String]?
                    /// List of repository IDs that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repository_ids`.
                    public var repository_ids: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.app_hyphen_permissions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repositories: List of repository names that the token should have access to
                    ///   - repository_ids: List of repository IDs that the token should have access to
                    ///   - permissions:
                    public init(
                        repositories: [Swift.String]? = nil,
                        repository_ids: [Swift.Int]? = nil,
                        permissions: Components.Schemas.app_hyphen_permissions? = nil
                    ) {
                        self.repositories = repositories
                        self.repository_ids = repository_ids
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case repositories
                        case repository_ids
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/content/application\/json`.
                case json(Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Path,
                headers: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Headers = .init(),
                body: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.installation_hyphen_token)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.installation_hyphen_token {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.apps_sol_create_hyphen_installation_hyphen_access_hyphen_token.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Suspend an app installation
    ///
    /// Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `PUT /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/put(apps/suspend-installation)`.
    public enum apps_sol_suspend_hyphen_installation {
        public static let id: Swift.String = "apps/suspend-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/PUT/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_suspend_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_suspend_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_suspend_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_suspend_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_suspend_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_suspend_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/put(apps/suspend-installation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_suspend_hyphen_installation.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_suspend_hyphen_installation.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/put(apps/suspend-installation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unsuspend an app installation
    ///
    /// Removes a GitHub App installation suspension.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `DELETE /app/installations/{installation_id}/suspended`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/delete(apps/unsuspend-installation)`.
    public enum apps_sol_unsuspend_hyphen_installation {
        public static let id: Swift.String = "apps/unsuspend-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/DELETE/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_unsuspend_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/suspended/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_unsuspend_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_unsuspend_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_unsuspend_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_unsuspend_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_unsuspend_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/delete(apps/unsuspend-installation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_unsuspend_hyphen_installation.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_unsuspend_hyphen_installation.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/suspended/delete(apps/unsuspend-installation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an app authorization
    ///
    /// OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
    /// Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/grant`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/grant/delete(apps/delete-authorization)`.
    public enum apps_sol_delete_hyphen_authorization {
        public static let id: Swift.String = "apps/delete-authorization"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The client ID of the GitHub app.
                ///
                /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/path/client_id`.
                public var client_id: Components.Parameters.client_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id: The client ID of the GitHub app.
                public init(client_id: Components.Parameters.client_hyphen_id) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.apps_sol_delete_hyphen_authorization.Input.Path
            /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_authorization.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_authorization.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_delete_hyphen_authorization.Input.Headers
            /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The OAuth access token used to authenticate to the GitHub API.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/requestBody/json/access_token`.
                    public var access_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_token: The OAuth access token used to authenticate to the GitHub API.
                    public init(access_token: Swift.String) {
                        self.access_token = access_token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_token
                    }
                }
                /// - Remark: Generated from `#/paths/applications/{client_id}/grant/DELETE/requestBody/content/application\/json`.
                case json(Operations.apps_sol_delete_hyphen_authorization.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_delete_hyphen_authorization.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_delete_hyphen_authorization.Input.Path,
                headers: Operations.apps_sol_delete_hyphen_authorization.Input.Headers = .init(),
                body: Operations.apps_sol_delete_hyphen_authorization.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/grant/delete(apps/delete-authorization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_delete_hyphen_authorization.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_delete_hyphen_authorization.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/grant/delete(apps/delete-authorization)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)`.
    public enum apps_sol_check_hyphen_token {
        public static let id: Swift.String = "apps/check-token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The client ID of the GitHub app.
                ///
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/path/client_id`.
                public var client_id: Components.Parameters.client_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id: The client ID of the GitHub app.
                public init(client_id: Components.Parameters.client_hyphen_id) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.apps_sol_check_hyphen_token.Input.Path
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_check_hyphen_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_check_hyphen_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_check_hyphen_token.Input.Headers
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The access_token of the OAuth or GitHub application.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/requestBody/json/access_token`.
                    public var access_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_token: The access_token of the OAuth or GitHub application.
                    public init(access_token: Swift.String) {
                        self.access_token = access_token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_token
                    }
                }
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/requestBody/content/application\/json`.
                case json(Operations.apps_sol_check_hyphen_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_check_hyphen_token.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_check_hyphen_token.Input.Path,
                headers: Operations.apps_sol_check_hyphen_token.Input.Headers = .init(),
                body: Operations.apps_sol_check_hyphen_token.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.authorization)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authorization {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_check_hyphen_token.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_check_hyphen_token.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_check_hyphen_token.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_check_hyphen_token.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/post(apps/check-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reset a token
    ///
    /// OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `PATCH /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/patch(apps/reset-token)`.
    public enum apps_sol_reset_hyphen_token {
        public static let id: Swift.String = "apps/reset-token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The client ID of the GitHub app.
                ///
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/path/client_id`.
                public var client_id: Components.Parameters.client_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id: The client ID of the GitHub app.
                public init(client_id: Components.Parameters.client_hyphen_id) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.apps_sol_reset_hyphen_token.Input.Path
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_reset_hyphen_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_reset_hyphen_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_reset_hyphen_token.Input.Headers
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The access_token of the OAuth or GitHub application.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/requestBody/json/access_token`.
                    public var access_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_token: The access_token of the OAuth or GitHub application.
                    public init(access_token: Swift.String) {
                        self.access_token = access_token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_token
                    }
                }
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/requestBody/content/application\/json`.
                case json(Operations.apps_sol_reset_hyphen_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_reset_hyphen_token.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_reset_hyphen_token.Input.Path,
                headers: Operations.apps_sol_reset_hyphen_token.Input.Headers = .init(),
                body: Operations.apps_sol_reset_hyphen_token.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.authorization)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authorization {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_reset_hyphen_token.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_reset_hyphen_token.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/patch(apps/reset-token)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_reset_hyphen_token.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_reset_hyphen_token.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/patch(apps/reset-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an app token
    ///
    /// OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
    ///
    /// - Remark: HTTP `DELETE /applications/{client_id}/token`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/delete(apps/delete-token)`.
    public enum apps_sol_delete_hyphen_token {
        public static let id: Swift.String = "apps/delete-token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The client ID of the GitHub app.
                ///
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/path/client_id`.
                public var client_id: Components.Parameters.client_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id: The client ID of the GitHub app.
                public init(client_id: Components.Parameters.client_hyphen_id) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.apps_sol_delete_hyphen_token.Input.Path
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_delete_hyphen_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_delete_hyphen_token.Input.Headers
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The OAuth access token used to authenticate to the GitHub API.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/requestBody/json/access_token`.
                    public var access_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_token: The OAuth access token used to authenticate to the GitHub API.
                    public init(access_token: Swift.String) {
                        self.access_token = access_token
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_token
                    }
                }
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/DELETE/requestBody/content/application\/json`.
                case json(Operations.apps_sol_delete_hyphen_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_delete_hyphen_token.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_delete_hyphen_token.Input.Path,
                headers: Operations.apps_sol_delete_hyphen_token.Input.Headers = .init(),
                body: Operations.apps_sol_delete_hyphen_token.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/delete(apps/delete-token)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_delete_hyphen_token.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_delete_hyphen_token.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/delete(apps/delete-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a scoped access token
    ///
    /// Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
    /// which repositories the token can access and which permissions are granted to the
    /// token.
    ///
    /// Invalid tokens will return `404 NOT FOUND`.
    ///
    /// - Remark: HTTP `POST /applications/{client_id}/token/scoped`.
    /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)`.
    public enum apps_sol_scope_hyphen_token {
        public static let id: Swift.String = "apps/scope-token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The client ID of the GitHub app.
                ///
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/path/client_id`.
                public var client_id: Components.Parameters.client_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - client_id: The client ID of the GitHub app.
                public init(client_id: Components.Parameters.client_hyphen_id) {
                    self.client_id = client_id
                }
            }
            public var path: Operations.apps_sol_scope_hyphen_token.Input.Path
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_scope_hyphen_token.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_scope_hyphen_token.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_scope_hyphen_token.Input.Headers
            /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The access token used to authenticate to the GitHub API.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/access_token`.
                    public var access_token: Swift.String
                    /// The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/target`.
                    public var target: Swift.String?
                    /// The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/target_id`.
                    public var target_id: Swift.Int?
                    /// The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/repositories`.
                    public var repositories: [Swift.String]?
                    /// The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
                    ///
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/repository_ids`.
                    public var repository_ids: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/json/permissions`.
                    public var permissions: Components.Schemas.app_hyphen_permissions?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_token: The access token used to authenticate to the GitHub API.
                    ///   - target: The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
                    ///   - target_id: The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
                    ///   - repositories: The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
                    ///   - repository_ids: The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
                    ///   - permissions:
                    public init(
                        access_token: Swift.String,
                        target: Swift.String? = nil,
                        target_id: Swift.Int? = nil,
                        repositories: [Swift.String]? = nil,
                        repository_ids: [Swift.Int]? = nil,
                        permissions: Components.Schemas.app_hyphen_permissions? = nil
                    ) {
                        self.access_token = access_token
                        self.target = target
                        self.target_id = target_id
                        self.repositories = repositories
                        self.repository_ids = repository_ids
                        self.permissions = permissions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_token
                        case target
                        case target_id
                        case repositories
                        case repository_ids
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/requestBody/content/application\/json`.
                case json(Operations.apps_sol_scope_hyphen_token.Input.Body.jsonPayload)
            }
            public var body: Operations.apps_sol_scope_hyphen_token.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.apps_sol_scope_hyphen_token.Input.Path,
                headers: Operations.apps_sol_scope_hyphen_token.Input.Headers = .init(),
                body: Operations.apps_sol_scope_hyphen_token.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/applications/{client_id}/token/scoped/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.authorization)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.authorization {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_scope_hyphen_token.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_scope_hyphen_token.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_scope_hyphen_token.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_scope_hyphen_token.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//applications/{client_id}/token/scoped/post(apps/scope-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an app
    ///
    /// > [!NOTE]
    /// > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
    ///
    /// - Remark: HTTP `GET /apps/{app_slug}`.
    /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)`.
    public enum apps_sol_get_hyphen_by_hyphen_slug {
        public static let id: Swift.String = "apps/get-by-slug"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/apps/{app_slug}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps/{app_slug}/GET/path/app_slug`.
                public var app_slug: Components.Parameters.app_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - app_slug:
                public init(app_slug: Components.Parameters.app_hyphen_slug) {
                    self.app_slug = app_slug
                }
            }
            public var path: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Path
            /// - Remark: Generated from `#/paths/apps/{app_slug}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_by_hyphen_slug.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_by_hyphen_slug.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Path,
                headers: Operations.apps_sol_get_hyphen_by_hyphen_slug.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/apps/{app_slug}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/apps/{app_slug}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.integration)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.integration {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_by_hyphen_slug.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_by_hyphen_slug.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_by_hyphen_slug.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_by_hyphen_slug.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//apps/{app_slug}/get(apps/get-by-slug)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories accessible to the app installation
    ///
    /// List repositories that an app installation can access.
    ///
    /// - Remark: HTTP `GET /installation/repositories`.
    /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)`.
    public enum apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation {
        public static let id: Swift.String = "apps/list-repos-accessible-to-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/installation/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/installation/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/installation/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Query
            /// - Remark: Generated from `#/paths/installation/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.repository]
                        /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content/json/repository_selection`.
                        public var repository_selection: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        ///   - repository_selection:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.repository],
                            repository_selection: Swift.String? = nil
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                            self.repository_selection = repository_selection
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                            case repository_selection
                        }
                    }
                    /// - Remark: Generated from `#/paths/installation/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_repos_hyphen_accessible_hyphen_to_hyphen_installation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//installation/repositories/get(apps/list-repos-accessible-to-installation)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Revoke an installation access token
    ///
    /// Revokes the installation token you're using to authenticate as an installation and access this endpoint.
    ///
    /// Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
    ///
    /// - Remark: HTTP `DELETE /installation/token`.
    /// - Remark: Generated from `#/paths//installation/token/delete(apps/revoke-installation-access-token)`.
    public enum apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token {
        public static let id: Swift.String = "apps/revoke-installation-access-token"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//installation/token/delete(apps/revoke-installation-access-token)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_revoke_hyphen_installation_hyphen_access_hyphen_token.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a subscription plan for an account
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)`.
    public enum apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account {
        public static let id: Swift.String = "apps/get-subscription-plan-for-account"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account_id parameter
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.account_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account_id parameter
                public init(account_id: Components.Parameters.account_hyphen_id) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Path
            /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Path,
                headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.marketplace_hyphen_purchase)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.marketplace_hyphen_purchase {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/accounts/{account_id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found when the account has not purchased the listing
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/accounts/{account_id}/get(apps/get-subscription-plan-for-account)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List plans
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)`.
    public enum apps_sol_list_hyphen_plans {
        public static let id: Swift.String = "apps/list-plans"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_plans.Input.Query
            /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_plans.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_plans.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_plans.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_plans.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_plans.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_plans.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/plans/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.marketplace_hyphen_listing_hyphen_plan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.marketplace_hyphen_listing_hyphen_plan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_plans.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_plans.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_plans.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_plans.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_plans.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/get(apps/list-plans)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List accounts for a plan
    ///
    /// Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)`.
    public enum apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan {
        public static let id: Swift.String = "apps/list-accounts-for-plan"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the plan.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/path/plan_id`.
                public var plan_id: Components.Parameters.plan_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - plan_id: The unique identifier of the plan.
                public init(plan_id: Components.Parameters.plan_hyphen_id) {
                    self.plan_id = plan_id
                }
            }
            public var path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Path
            /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen public enum sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query/sort`.
                public var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query/direction`.
                public var direction: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Query
            /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Path,
                query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/plans/{plan_id}/accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.marketplace_hyphen_purchase])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.marketplace_hyphen_purchase] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a subscription plan for an account (stubbed)
    ///
    /// Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)`.
    public enum apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed {
        public static let id: Swift.String = "apps/get-subscription-plan-for-account-stubbed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/accounts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account_id parameter
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/accounts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.account_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account_id parameter
                public init(account_id: Components.Parameters.account_hyphen_id) {
                    self.account_id = account_id
                }
            }
            public var path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Path
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/accounts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Path,
                headers: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/accounts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/accounts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.marketplace_hyphen_purchase)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.marketplace_hyphen_purchase {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found when the account has not purchased the listing
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.apps_sol_get_hyphen_subscription_hyphen_plan_hyphen_for_hyphen_account_hyphen_stubbed.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/accounts/{account_id}/get(apps/get-subscription-plan-for-account-stubbed)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List plans (stubbed)
    ///
    /// Lists all plans that are part of your GitHub Marketplace listing.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/get(apps/list-plans-stubbed)`.
    public enum apps_sol_list_hyphen_plans_hyphen_stubbed {
        public static let id: Swift.String = "apps/list-plans-stubbed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Query
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.marketplace_hyphen_listing_hyphen_plan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.marketplace_hyphen_listing_hyphen_plan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/get(apps/list-plans-stubbed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_plans_hyphen_stubbed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/get(apps/list-plans-stubbed)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List accounts for a plan (stubbed)
    ///
    /// Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    ///
    /// GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
    ///
    /// - Remark: HTTP `GET /marketplace_listing/stubbed/plans/{plan_id}/accounts`.
    /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan-stubbed)`.
    public enum apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed {
        public static let id: Swift.String = "apps/list-accounts-for-plan-stubbed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the plan.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/path/plan_id`.
                public var plan_id: Components.Parameters.plan_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - plan_id: The unique identifier of the plan.
                public init(plan_id: Components.Parameters.plan_hyphen_id) {
                    self.plan_id = plan_id
                }
            }
            public var path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Path
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/sort`.
                @frozen public enum sort: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query/sort`.
                public var sort: Components.Parameters.sort?
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query/direction`.
                @frozen public enum directionPayload: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query/direction`.
                public var direction: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Query.directionPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: The property to sort the results by.
                ///   - direction: To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    sort: Components.Parameters.sort? = nil,
                    direction: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Query.directionPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.sort = sort
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Query
            /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Path,
                query: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketplace_listing/stubbed/plans/{plan_id}/accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.marketplace_hyphen_purchase])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.marketplace_hyphen_purchase] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan-stubbed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_accounts_hyphen_for_hyphen_plan_hyphen_stubbed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//marketplace_listing/stubbed/plans/{plan_id}/accounts/get(apps/list-accounts-for-plan-stubbed)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the organization's installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/installation`.
    /// - Remark: Generated from `#/paths//orgs/{org}/installation/get(apps/get-org-installation)`.
    public enum apps_sol_get_hyphen_org_hyphen_installation {
        public static let id: Swift.String = "apps/get-org-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/installation/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/installation/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/installation/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_org_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_org_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_get_hyphen_org_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/installation/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/installation/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.installation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.installation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_org_hyphen_installation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_org_hyphen_installation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/installation/get(apps/get-org-installation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_org_hyphen_installation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_org_hyphen_installation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/installation`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)`.
    public enum apps_sol_get_hyphen_repo_hyphen_installation {
        public static let id: Swift.String = "apps/get-repo-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_repo_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_repo_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/installation/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.installation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.installation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_repo_hyphen_installation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.moved_permanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            public var movedPermanently: Components.Responses.moved_permanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/installation/get(apps/get-repo-installation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List app installations accessible to the user access token
    ///
    /// Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// You can find the permissions for the installation under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations`.
    /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)`.
    public enum apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "apps/list-installations-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/installations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/installations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/installations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/installations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/content/json/installations`.
                        public var installations: [Components.Schemas.installation]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - installations:
                        public init(
                            total_count: Swift.Int,
                            installations: [Components.Schemas.installation]
                        ) {
                            self.total_count = total_count
                            self.installations = installations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case installations
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/installations/GET/responses/200/content/application\/json`.
                    case json(Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You can find the permissions for the installation under the `permissions` key.
            ///
            /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_installations_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/installations/get(apps/list-installations-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repositories accessible to the user access token
    ///
    /// List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
    ///
    /// The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    ///
    /// The access the user has to each repository is included in the hash under the `permissions` key.
    ///
    /// - Remark: HTTP `GET /user/installations/{installation_id}/repositories`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)`.
    public enum apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "apps/list-installation-repos-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                public init(installation_id: Components.Parameters.installation_hyphen_id) {
                    self.installation_id = installation_id
                }
            }
            public var path: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                query: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content/json/repository_selection`.
                        public var repository_selection: Swift.String?
                        /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repository_selection:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repository_selection: Swift.String? = nil,
                            repositories: [Components.Schemas.repository]
                        ) {
                            self.total_count = total_count
                            self.repository_selection = repository_selection
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repository_selection
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The access the user has to each repository is included in the hash under the `permissions` key.
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_installation_hyphen_repos_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/get(apps/list-installation-repos-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add a repository to an app installation
    ///
    /// Add a single repository to an installation. The authenticated user must have admin access to the repository.    
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `PUT /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)`.
    public enum apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "apps/add-repo-to-installation-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/PUT/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// The unique identifier of the repository.
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Components.Parameters.repository_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                ///   - repository_id: The unique identifier of the repository.
                public init(
                    installation_id: Components.Parameters.installation_hyphen_id,
                    repository_id: Components.Parameters.repository_hyphen_id
                ) {
                    self.installation_id = installation_id
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_add_hyphen_repo_hyphen_to_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/put(apps/add-repo-to-installation-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a repository from an app installation
    ///
    /// Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. 
    ///
    /// This endpoint only works for PATs (classic) with the `repo` scope.
    ///
    /// - Remark: HTTP `DELETE /user/installations/{installation_id}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)`.
    public enum apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "apps/remove-repo-from-installation-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/DELETE/path/installation_id`.
                public var installation_id: Components.Parameters.installation_hyphen_id
                /// The unique identifier of the repository.
                ///
                /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Components.Parameters.repository_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installation_id: The unique identifier of the installation.
                ///   - repository_id: The unique identifier of the repository.
                public init(
                    installation_id: Components.Parameters.installation_hyphen_id,
                    repository_id: Components.Parameters.repository_hyphen_id
                ) {
                    self.installation_id = installation_id
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/user/installations/{installation_id}/repositories/{repository_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Path,
                headers: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Returned when the application is installed on `all` repositories in the organization, or if this request would remove the last repository that the application has access to in the organization.
            ///
            /// - Remark: Generated from `#/paths//user/installations/{installation_id}/repositories/{repository_id}/delete(apps/remove-repo-from-installation-for-authenticated-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.apps_sol_remove_hyphen_repo_hyphen_from_hyphen_installation_hyphen_for_hyphen_authenticated_hyphen_user.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List subscriptions for the authenticated user
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)`.
    public enum apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "apps/list-subscriptions-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/marketplace_purchases/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.user_hyphen_marketplace_hyphen_purchase])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.user_hyphen_marketplace_hyphen_purchase] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/get(apps/list-subscriptions-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List subscriptions for the authenticated user (stubbed)
    ///
    /// Lists the active subscriptions for the authenticated user.
    ///
    /// - Remark: HTTP `GET /user/marketplace_purchases/stubbed`.
    /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)`.
    public enum apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed {
        public static let id: Swift.String = "apps/list-subscriptions-for-authenticated-user-stubbed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Query
            /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Query = .init(),
                headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/marketplace_purchases/stubbed/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.user_hyphen_marketplace_hyphen_purchase])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.user_hyphen_marketplace_hyphen_purchase] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok.Headers = .init(),
                    body: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_list_hyphen_subscriptions_hyphen_for_hyphen_authenticated_hyphen_user_hyphen_stubbed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//user/marketplace_purchases/stubbed/get(apps/list-subscriptions-for-authenticated-user-stubbed)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a user installation for the authenticated app
    ///
    /// Enables an authenticated GitHub App to find the user’s installation information.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/installation`.
    /// - Remark: Generated from `#/paths//users/{username}/installation/get(apps/get-user-installation)`.
    public enum apps_sol_get_hyphen_user_hyphen_installation {
        public static let id: Swift.String = "apps/get-user-installation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/installation/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/installation/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/installation/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_user_hyphen_installation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.apps_sol_get_hyphen_user_hyphen_installation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Path,
                headers: Operations.apps_sol_get_hyphen_user_hyphen_installation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/installation/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/installation/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.installation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.installation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.apps_sol_get_hyphen_user_hyphen_installation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.apps_sol_get_hyphen_user_hyphen_installation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/installation/get(apps/get-user-installation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.apps_sol_get_hyphen_user_hyphen_installation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.apps_sol_get_hyphen_user_hyphen_installation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
