// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List global security advisories
    ///
    /// Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
    ///
    /// By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
    ///
    /// - Remark: HTTP `GET /advisories`.
    /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)`.
    func security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories(_ input: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output
    /// Get a global security advisory
    ///
    /// Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// - Remark: HTTP `GET /advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//advisories/{ghsa_id}/get(security-advisories/get-global-advisory)`.
    func security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory(_ input: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input) async throws -> Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output
    /// List repository security advisories for an organization
    ///
    /// Lists repository security advisories for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-advisories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)`.
    func security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories(_ input: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output
    /// List repository security advisories
    ///
    /// Lists security advisories in a repository.
    ///
    /// The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)`.
    func security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories(_ input: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output
    /// Create a repository security advisory
    ///
    /// Creates a new repository security advisory.
    ///
    /// In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)`.
    func security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory(_ input: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output
    /// Privately report a security vulnerability
    ///
    /// Report a security vulnerability to the maintainers of the repository.
    /// See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/reports`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)`.
    func security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report(_ input: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output
    /// Get a repository security advisory
    ///
    /// Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// Anyone can access any published security advisory on a public repository.
    ///
    /// The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
    /// collaborator on the security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)`.
    func security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory(_ input: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input) async throws -> Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output
    /// Update a repository security advisory
    ///
    /// Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
    /// or a collaborator on the repository security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)`.
    func security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory(_ input: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input) async throws -> Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output
    /// Request a CVE for a repository security advisory
    ///
    /// If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
    ///
    /// You may request a CVE for public repositories, but cannot do so for private repositories.
    ///
    /// In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)`.
    func security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request(_ input: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Output
    /// Create a temporary private fork
    ///
    /// Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
    ///
    /// **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)`.
    func security_hyphen_advisories_sol_create_hyphen_fork(_ input: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List global security advisories
    ///
    /// Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
    ///
    /// By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
    ///
    /// - Remark: HTTP `GET /advisories`.
    /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)`.
    public func security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories(
        query: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query = .init(),
        headers: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output {
        try await security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories(Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a global security advisory
    ///
    /// Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// - Remark: HTTP `GET /advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//advisories/{ghsa_id}/get(security-advisories/get-global-advisory)`.
    public func security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory(
        path: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output {
        try await security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory(Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository security advisories for an organization
    ///
    /// Lists repository security advisories for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-advisories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)`.
    public func security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories(
        path: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Path,
        query: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query = .init(),
        headers: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output {
        try await security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories(Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository security advisories
    ///
    /// Lists security advisories in a repository.
    ///
    /// The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)`.
    public func security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories(
        path: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Path,
        query: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query = .init(),
        headers: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output {
        try await security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories(Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a repository security advisory
    ///
    /// Creates a new repository security advisory.
    ///
    /// In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)`.
    public func security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory(
        path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Headers = .init(),
        body: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Body
    ) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output {
        try await security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory(Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Privately report a security vulnerability
    ///
    /// Report a security vulnerability to the maintainers of the repository.
    /// See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/reports`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)`.
    public func security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report(
        path: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Headers = .init(),
        body: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Body
    ) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output {
        try await security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report(Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a repository security advisory
    ///
    /// Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// Anyone can access any published security advisory on a public repository.
    ///
    /// The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
    /// collaborator on the security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)`.
    public func security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory(
        path: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output {
        try await security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory(Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a repository security advisory
    ///
    /// Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
    /// or a collaborator on the repository security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)`.
    public func security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory(
        path: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Headers = .init(),
        body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Body
    ) async throws -> Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output {
        try await security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory(Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Request a CVE for a repository security advisory
    ///
    /// If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
    ///
    /// You may request a CVE for public repositories, but cannot do so for private repositories.
    ///
    /// In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)`.
    public func security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request(
        path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Output {
        try await security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request(Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create a temporary private fork
    ///
    /// Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
    ///
    /// **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)`.
    public func security_hyphen_advisories_sol_create_hyphen_fork(
        path: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Path,
        headers: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Headers = .init()
    ) async throws -> Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output {
        try await security_hyphen_advisories_sol_create_hyphen_fork(Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// The package's language or package management ecosystem.
        ///
        /// - Remark: Generated from `#/components/schemas/security-advisory-ecosystems`.
        @frozen public enum security_hyphen_advisory_hyphen_ecosystems: String, Codable, Hashable, Sendable {
            case rubygems = "rubygems"
            case npm = "npm"
            case pip = "pip"
            case maven = "maven"
            case nuget = "nuget"
            case composer = "composer"
            case go = "go"
            case rust = "rust"
            case erlang = "erlang"
            case actions = "actions"
            case pub = "pub"
            case other = "other"
            case swift = "swift"
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// The type of credit the user is receiving.
        ///
        /// - Remark: Generated from `#/components/schemas/security-advisory-credit-types`.
        @frozen public enum security_hyphen_advisory_hyphen_credit_hyphen_types: String, Codable, Hashable, Sendable {
            case analyst = "analyst"
            case finder = "finder"
            case reporter = "reporter"
            case coordinator = "coordinator"
            case remediation_developer = "remediation_developer"
            case remediation_reviewer = "remediation_reviewer"
            case remediation_verifier = "remediation_verifier"
            case tool = "tool"
            case sponsor = "sponsor"
            case other = "other"
        }
        /// A GitHub Security Advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/global-advisory`.
        public struct global_hyphen_advisory: Codable, Hashable, Sendable {
            /// The GitHub Security Advisory ID.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/ghsa_id`.
            public var ghsa_id: Swift.String
            /// The Common Vulnerabilities and Exposures (CVE) ID.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/cve_id`.
            public var cve_id: Swift.String?
            /// The API URL for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/url`.
            public var url: Swift.String
            /// The URL for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/html_url`.
            public var html_url: Swift.String
            /// The API URL for the repository advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/repository_advisory_url`.
            public var repository_advisory_url: Swift.String?
            /// A short summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/summary`.
            public var summary: Swift.String
            /// A detailed description of what the advisory entails.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/description`.
            public var description: Swift.String?
            /// The type of advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case reviewed = "reviewed"
                case unreviewed = "unreviewed"
                case malware = "malware"
            }
            /// The type of advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/type`.
            public var _type: Components.Schemas.global_hyphen_advisory._typePayload
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                case critical = "critical"
                case high = "high"
                case medium = "medium"
                case low = "low"
                case unknown = "unknown"
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/severity`.
            public var severity: Components.Schemas.global_hyphen_advisory.severityPayload
            /// The URL of the advisory's source code.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/source_code_location`.
            public var source_code_location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/global-advisory/identifiersPayload`.
            public struct identifiersPayloadPayload: Codable, Hashable, Sendable {
                /// The type of identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/identifiersPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case CVE = "CVE"
                    case GHSA = "GHSA"
                }
                /// The type of identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/identifiersPayload/type`.
                public var _type: Components.Schemas.global_hyphen_advisory.identifiersPayloadPayload._typePayload
                /// The identifier value.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/identifiersPayload/value`.
                public var value: Swift.String
                /// Creates a new `identifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of identifier.
                ///   - value: The identifier value.
                public init(
                    _type: Components.Schemas.global_hyphen_advisory.identifiersPayloadPayload._typePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/global-advisory/identifiers`.
            public typealias identifiersPayload = [Components.Schemas.global_hyphen_advisory.identifiersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/global-advisory/identifiers`.
            public var identifiers: Components.Schemas.global_hyphen_advisory.identifiersPayload?
            /// - Remark: Generated from `#/components/schemas/global-advisory/references`.
            public var references: [Swift.String]?
            /// The date and time of when the advisory was published, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/published_at`.
            public var published_at: Foundation.Date
            /// The date and time of when the advisory was last updated, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/updated_at`.
            public var updated_at: Foundation.Date
            /// The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/github_reviewed_at`.
            public var github_reviewed_at: Foundation.Date?
            /// The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
            /// This field is only populated when the advisory is imported from the National Vulnerability Database.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/nvd_published_at`.
            public var nvd_published_at: Foundation.Date?
            /// The date and time of when the advisory was withdrawn, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/withdrawn_at`.
            public var withdrawn_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload`.
            public struct vulnerabilitiesPayloadPayload: Codable, Hashable, Sendable {
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/package`.
                public struct packagePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/package/ecosystem`.
                    public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems
                    /// The unique package name within its ecosystem.
                    ///
                    /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/package/name`.
                    public var name: Swift.String?
                    /// Creates a new `packagePayload`.
                    ///
                    /// - Parameters:
                    ///   - ecosystem:
                    ///   - name: The unique package name within its ecosystem.
                    public init(
                        ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems,
                        name: Swift.String? = nil
                    ) {
                        self.ecosystem = ecosystem
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ecosystem
                        case name
                    }
                }
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/package`.
                public var package: Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayloadPayload.packagePayload?
                /// The range of the package versions affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/vulnerable_version_range`.
                public var vulnerable_version_range: Swift.String?
                /// The package version that resolve the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/first_patched_version`.
                public var first_patched_version: Swift.String?
                /// The functions in the package that are affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilitiesPayload/vulnerable_functions`.
                public var vulnerable_functions: [Swift.String]?
                /// Creates a new `vulnerabilitiesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - package: The name of the package affected by the vulnerability.
                ///   - vulnerable_version_range: The range of the package versions affected by the vulnerability.
                ///   - first_patched_version: The package version that resolve the vulnerability.
                ///   - vulnerable_functions: The functions in the package that are affected by the vulnerability.
                public init(
                    package: Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayloadPayload.packagePayload? = nil,
                    vulnerable_version_range: Swift.String? = nil,
                    first_patched_version: Swift.String? = nil,
                    vulnerable_functions: [Swift.String]? = nil
                ) {
                    self.package = package
                    self.vulnerable_version_range = vulnerable_version_range
                    self.first_patched_version = first_patched_version
                    self.vulnerable_functions = vulnerable_functions
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case vulnerable_version_range
                    case first_patched_version
                    case vulnerable_functions
                }
            }
            /// The products and respective version ranges affected by the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilities`.
            public typealias vulnerabilitiesPayload = [Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayloadPayload]
            /// The products and respective version ranges affected by the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/vulnerabilities`.
            public var vulnerabilities: Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayload?
            /// - Remark: Generated from `#/components/schemas/global-advisory/cvss`.
            public struct cvssPayload: Codable, Hashable, Sendable {
                /// The CVSS vector.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/cvss/vector_string`.
                public var vector_string: Swift.String?
                /// The CVSS score.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/cvss/score`.
                public var score: Swift.Double?
                /// Creates a new `cvssPayload`.
                ///
                /// - Parameters:
                ///   - vector_string: The CVSS vector.
                ///   - score: The CVSS score.
                public init(
                    vector_string: Swift.String? = nil,
                    score: Swift.Double? = nil
                ) {
                    self.vector_string = vector_string
                    self.score = score
                }
                public enum CodingKeys: String, CodingKey {
                    case vector_string
                    case score
                }
            }
            /// - Remark: Generated from `#/components/schemas/global-advisory/cvss`.
            public var cvss: Components.Schemas.global_hyphen_advisory.cvssPayload?
            /// - Remark: Generated from `#/components/schemas/global-advisory/cwesPayload`.
            public struct cwesPayloadPayload: Codable, Hashable, Sendable {
                /// The Common Weakness Enumeration (CWE) identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/cwesPayload/cwe_id`.
                public var cwe_id: Swift.String
                /// The name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/global-advisory/cwesPayload/name`.
                public var name: Swift.String
                /// Creates a new `cwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cwe_id: The Common Weakness Enumeration (CWE) identifier.
                ///   - name: The name of the CWE.
                public init(
                    cwe_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cwe_id = cwe_id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cwe_id
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/global-advisory/cwes`.
            public typealias cwesPayload = [Components.Schemas.global_hyphen_advisory.cwesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/global-advisory/cwes`.
            public var cwes: Components.Schemas.global_hyphen_advisory.cwesPayload?
            /// - Remark: Generated from `#/components/schemas/global-advisory/creditsPayload`.
            public struct creditsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/global-advisory/creditsPayload/user`.
                public var user: Components.Schemas.simple_hyphen_user
                /// - Remark: Generated from `#/components/schemas/global-advisory/creditsPayload/type`.
                public var _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                /// Creates a new `creditsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - user:
                ///   - _type:
                public init(
                    user: Components.Schemas.simple_hyphen_user,
                    _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                ) {
                    self.user = user
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case user
                    case _type = "type"
                }
            }
            /// The users who contributed to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/credits`.
            public typealias creditsPayload = [Components.Schemas.global_hyphen_advisory.creditsPayloadPayload]
            /// The users who contributed to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/global-advisory/credits`.
            public var credits: Components.Schemas.global_hyphen_advisory.creditsPayload?
            /// Creates a new `global_hyphen_advisory`.
            ///
            /// - Parameters:
            ///   - ghsa_id: The GitHub Security Advisory ID.
            ///   - cve_id: The Common Vulnerabilities and Exposures (CVE) ID.
            ///   - url: The API URL for the advisory.
            ///   - html_url: The URL for the advisory.
            ///   - repository_advisory_url: The API URL for the repository advisory.
            ///   - summary: A short summary of the advisory.
            ///   - description: A detailed description of what the advisory entails.
            ///   - _type: The type of advisory.
            ///   - severity: The severity of the advisory.
            ///   - source_code_location: The URL of the advisory's source code.
            ///   - identifiers:
            ///   - references:
            ///   - published_at: The date and time of when the advisory was published, in ISO 8601 format.
            ///   - updated_at: The date and time of when the advisory was last updated, in ISO 8601 format.
            ///   - github_reviewed_at: The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
            ///   - nvd_published_at: The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
            ///   - withdrawn_at: The date and time of when the advisory was withdrawn, in ISO 8601 format.
            ///   - vulnerabilities: The products and respective version ranges affected by the advisory.
            ///   - cvss:
            ///   - cwes:
            ///   - credits: The users who contributed to the advisory.
            public init(
                ghsa_id: Swift.String,
                cve_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                repository_advisory_url: Swift.String? = nil,
                summary: Swift.String,
                description: Swift.String? = nil,
                _type: Components.Schemas.global_hyphen_advisory._typePayload,
                severity: Components.Schemas.global_hyphen_advisory.severityPayload,
                source_code_location: Swift.String? = nil,
                identifiers: Components.Schemas.global_hyphen_advisory.identifiersPayload? = nil,
                references: [Swift.String]? = nil,
                published_at: Foundation.Date,
                updated_at: Foundation.Date,
                github_reviewed_at: Foundation.Date? = nil,
                nvd_published_at: Foundation.Date? = nil,
                withdrawn_at: Foundation.Date? = nil,
                vulnerabilities: Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayload? = nil,
                cvss: Components.Schemas.global_hyphen_advisory.cvssPayload? = nil,
                cwes: Components.Schemas.global_hyphen_advisory.cwesPayload? = nil,
                credits: Components.Schemas.global_hyphen_advisory.creditsPayload? = nil
            ) {
                self.ghsa_id = ghsa_id
                self.cve_id = cve_id
                self.url = url
                self.html_url = html_url
                self.repository_advisory_url = repository_advisory_url
                self.summary = summary
                self.description = description
                self._type = _type
                self.severity = severity
                self.source_code_location = source_code_location
                self.identifiers = identifiers
                self.references = references
                self.published_at = published_at
                self.updated_at = updated_at
                self.github_reviewed_at = github_reviewed_at
                self.nvd_published_at = nvd_published_at
                self.withdrawn_at = withdrawn_at
                self.vulnerabilities = vulnerabilities
                self.cvss = cvss
                self.cwes = cwes
                self.credits = credits
            }
            public enum CodingKeys: String, CodingKey {
                case ghsa_id
                case cve_id
                case url
                case html_url
                case repository_advisory_url
                case summary
                case description
                case _type = "type"
                case severity
                case source_code_location
                case identifiers
                case references
                case published_at
                case updated_at
                case github_reviewed_at
                case nvd_published_at
                case withdrawn_at
                case vulnerabilities
                case cvss
                case cwes
                case credits
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ghsa_id = try container.decode(
                    Swift.String.self,
                    forKey: .ghsa_id
                )
                cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                html_url = try container.decode(
                    Swift.String.self,
                    forKey: .html_url
                )
                repository_advisory_url = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .repository_advisory_url
                )
                summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                _type = try container.decode(
                    Components.Schemas.global_hyphen_advisory._typePayload.self,
                    forKey: ._type
                )
                severity = try container.decode(
                    Components.Schemas.global_hyphen_advisory.severityPayload.self,
                    forKey: .severity
                )
                source_code_location = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .source_code_location
                )
                identifiers = try container.decodeIfPresent(
                    Components.Schemas.global_hyphen_advisory.identifiersPayload.self,
                    forKey: .identifiers
                )
                references = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .references
                )
                published_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .published_at
                )
                updated_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                github_reviewed_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .github_reviewed_at
                )
                nvd_published_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .nvd_published_at
                )
                withdrawn_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .withdrawn_at
                )
                vulnerabilities = try container.decodeIfPresent(
                    Components.Schemas.global_hyphen_advisory.vulnerabilitiesPayload.self,
                    forKey: .vulnerabilities
                )
                cvss = try container.decodeIfPresent(
                    Components.Schemas.global_hyphen_advisory.cvssPayload.self,
                    forKey: .cvss
                )
                cwes = try container.decodeIfPresent(
                    Components.Schemas.global_hyphen_advisory.cwesPayload.self,
                    forKey: .cwes
                )
                credits = try container.decodeIfPresent(
                    Components.Schemas.global_hyphen_advisory.creditsPayload.self,
                    forKey: .credits
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id",
                    "cve_id",
                    "url",
                    "html_url",
                    "repository_advisory_url",
                    "summary",
                    "description",
                    "type",
                    "severity",
                    "source_code_location",
                    "identifiers",
                    "references",
                    "published_at",
                    "updated_at",
                    "github_reviewed_at",
                    "nvd_published_at",
                    "withdrawn_at",
                    "vulnerabilities",
                    "cvss",
                    "cwes",
                    "credits"
                ])
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        public struct simple_hyphen_repository: Codable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            public var id: Swift.Int
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            public var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            public var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            public var html_url: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            public var description: Swift.String?
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            public var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            public var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            public var archive_url: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            public var branches_url: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            public var comments_url: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            public var commits_url: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            public var compare_url: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            public var contents_url: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            public var events_url: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            public var forks_url: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            public var issues_url: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            public var keys_url: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            public var labels_url: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            public var languages_url: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            public var merges_url: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            public var releases_url: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            public var tags_url: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            public var teams_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            public var trees_url: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// Creates a new `simple_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - node_id: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - full_name: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - html_url: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archive_url: A template for the API URL to download the repository as an archive.
            ///   - assignees_url: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobs_url: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branches_url: A template for the API URL to get information about branches in the repository.
            ///   - collaborators_url: A template for the API URL to get information about collaborators of the repository.
            ///   - comments_url: A template for the API URL to get information about comments on the repository.
            ///   - commits_url: A template for the API URL to get information about commits on the repository.
            ///   - compare_url: A template for the API URL to compare two commits or refs.
            ///   - contents_url: A template for the API URL to get the contents of the repository.
            ///   - contributors_url: A template for the API URL to list the contributors to the repository.
            ///   - deployments_url: The API URL to list the deployments of the repository.
            ///   - downloads_url: The API URL to list the downloads on the repository.
            ///   - events_url: The API URL to list the events of the repository.
            ///   - forks_url: The API URL to list the forks of the repository.
            ///   - git_commits_url: A template for the API URL to get information about Git commits of the repository.
            ///   - git_refs_url: A template for the API URL to get information about Git refs of the repository.
            ///   - git_tags_url: A template for the API URL to get information about Git tags of the repository.
            ///   - issue_comment_url: A template for the API URL to get information about issue comments on the repository.
            ///   - issue_events_url: A template for the API URL to get information about issue events on the repository.
            ///   - issues_url: A template for the API URL to get information about issues on the repository.
            ///   - keys_url: A template for the API URL to get information about deploy keys on the repository.
            ///   - labels_url: A template for the API URL to get information about labels of the repository.
            ///   - languages_url: The API URL to get information about the languages of the repository.
            ///   - merges_url: The API URL to merge branches in the repository.
            ///   - milestones_url: A template for the API URL to get information about milestones of the repository.
            ///   - notifications_url: A template for the API URL to get information about notifications on the repository.
            ///   - pulls_url: A template for the API URL to get information about pull requests on the repository.
            ///   - releases_url: A template for the API URL to get information about releases on the repository.
            ///   - stargazers_url: The API URL to list the stargazers on the repository.
            ///   - statuses_url: A template for the API URL to get information about statuses of a commit.
            ///   - subscribers_url: The API URL to list the subscribers on the repository.
            ///   - subscription_url: The API URL to subscribe to notifications for this repository.
            ///   - tags_url: The API URL to get information about tags on the repository.
            ///   - teams_url: The API URL to list the teams on the repository.
            ///   - trees_url: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooks_url: The API URL to list the hooks on the repository.
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                hooks_url: Swift.String
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.hooks_url = hooks_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case hooks_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-repository`.
        public struct nullable_hyphen_repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/nullable-repository/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `nullable_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.nullable_hyphen_repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.nullable_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.nullable_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.nullable_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code of Conduct Simple
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple`.
        public struct code_hyphen_of_hyphen_conduct_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - key:
            ///   - name:
            ///   - html_url:
            public init(
                url: Swift.String,
                key: Swift.String,
                name: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.url = url
                self.key = key
                self.name = name
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case key
                case name
                case html_url
            }
        }
        /// Full Repository
        ///
        /// - Remark: Generated from `#/components/schemas/full-repository`.
        public struct full_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/full-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/full-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/has_discussions`.
            public var has_discussions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/full-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/full-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/full-repository/permissions`.
            public var permissions: Components.Schemas.full_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/template_repository`.
            public var template_repository: Components.Schemas.nullable_hyphen_repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/use_squash_pr_title_as_default`.
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            ///   - `PR_TITLE` - default to the pull request's title.
            ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload?
            /// - Remark: Generated from `#/components/schemas/full-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/subscribers_count`.
            public var subscribers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/network_count`.
            public var network_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/organization`.
            public var organization: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/full-repository/parent`.
            public var parent: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/source`.
            public var source: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/full-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/full-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/full-repository/watchers`.
            public var watchers: Swift.Int
            /// Whether anonymous git access is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/full-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/full-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public struct custom_propertiesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `custom_propertiesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            ///
            /// - Remark: Generated from `#/components/schemas/full-repository/custom_properties`.
            public var custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload?
            /// Creates a new `full_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - allow_rebase_merge:
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_merge_commit:
            ///   - allow_update_branch:
            ///   - use_squash_pr_title_as_default:
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - license:
            ///   - organization:
            ///   - parent:
            ///   - source:
            ///   - forks:
            ///   - master_branch:
            ///   - open_issues:
            ///   - watchers:
            ///   - anonymous_access_enabled: Whether anonymous git access is allowed.
            ///   - code_of_conduct:
            ///   - security_and_analysis:
            ///   - custom_properties: The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.full_hyphen_repository.permissionsPayload? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.nullable_hyphen_repository? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.full_hyphen_repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.full_hyphen_repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.full_hyphen_repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.full_hyphen_repository.merge_commit_messagePayload? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int,
                network_count: Swift.Int,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                organization: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                parent: Components.Schemas.repository? = nil,
                source: Components.Schemas.repository? = nil,
                forks: Swift.Int,
                master_branch: Swift.String? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                anonymous_access_enabled: Swift.Bool? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct_hyphen_simple? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil,
                custom_properties: Components.Schemas.full_hyphen_repository.custom_propertiesPayload? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.license = license
                self.organization = organization
                self.parent = parent
                self.source = source
                self.forks = forks
                self.master_branch = master_branch
                self.open_issues = open_issues
                self.watchers = watchers
                self.anonymous_access_enabled = anonymous_access_enabled
                self.code_of_conduct = code_of_conduct
                self.security_and_analysis = security_and_analysis
                self.custom_properties = custom_properties
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case license
                case organization
                case parent
                case source
                case forks
                case master_branch
                case open_issues
                case watchers
                case anonymous_access_enabled
                case code_of_conduct
                case security_and_analysis
                case custom_properties
            }
        }
        /// A product affected by the vulnerability detailed in a repository security advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability`.
        public struct repository_hyphen_advisory_hyphen_vulnerability: Codable, Hashable, Sendable {
            /// The name of the package affected by the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/package`.
            public struct packagePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/package/ecosystem`.
                public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems
                /// The unique package name within its ecosystem.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/package/name`.
                public var name: Swift.String?
                /// Creates a new `packagePayload`.
                ///
                /// - Parameters:
                ///   - ecosystem:
                ///   - name: The unique package name within its ecosystem.
                public init(
                    ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems,
                    name: Swift.String? = nil
                ) {
                    self.ecosystem = ecosystem
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case ecosystem
                    case name
                }
            }
            /// The name of the package affected by the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/package`.
            public var package: Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability.packagePayload?
            /// The range of the package versions affected by the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/vulnerable_version_range`.
            public var vulnerable_version_range: Swift.String?
            /// The package version(s) that resolve the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/patched_versions`.
            public var patched_versions: Swift.String?
            /// The functions in the package that are affected.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-vulnerability/vulnerable_functions`.
            public var vulnerable_functions: [Swift.String]?
            /// Creates a new `repository_hyphen_advisory_hyphen_vulnerability`.
            ///
            /// - Parameters:
            ///   - package: The name of the package affected by the vulnerability.
            ///   - vulnerable_version_range: The range of the package versions affected by the vulnerability.
            ///   - patched_versions: The package version(s) that resolve the vulnerability.
            ///   - vulnerable_functions: The functions in the package that are affected.
            public init(
                package: Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability.packagePayload? = nil,
                vulnerable_version_range: Swift.String? = nil,
                patched_versions: Swift.String? = nil,
                vulnerable_functions: [Swift.String]? = nil
            ) {
                self.package = package
                self.vulnerable_version_range = vulnerable_version_range
                self.patched_versions = patched_versions
                self.vulnerable_functions = vulnerable_functions
            }
            public enum CodingKeys: String, CodingKey {
                case package
                case vulnerable_version_range
                case patched_versions
                case vulnerable_functions
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                package = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability.packagePayload.self,
                    forKey: .package
                )
                vulnerable_version_range = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .vulnerable_version_range
                )
                patched_versions = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .patched_versions
                )
                vulnerable_functions = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .vulnerable_functions
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package",
                    "vulnerable_version_range",
                    "patched_versions",
                    "vulnerable_functions"
                ])
            }
        }
        /// A credit given to a user for a repository security advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-advisory-credit`.
        public struct repository_hyphen_advisory_hyphen_credit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repository-advisory-credit/user`.
            public var user: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/repository-advisory-credit/type`.
            public var _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
            /// The state of the user's acceptance of the credit.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-credit/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case accepted = "accepted"
                case declined = "declined"
                case pending = "pending"
            }
            /// The state of the user's acceptance of the credit.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-credit/state`.
            public var state: Components.Schemas.repository_hyphen_advisory_hyphen_credit.statePayload
            /// Creates a new `repository_hyphen_advisory_hyphen_credit`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - _type:
            ///   - state: The state of the user's acceptance of the credit.
            public init(
                user: Components.Schemas.simple_hyphen_user,
                _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types,
                state: Components.Schemas.repository_hyphen_advisory_hyphen_credit.statePayload
            ) {
                self.user = user
                self._type = _type
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case _type = "type"
                case state
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                user = try container.decode(
                    Components.Schemas.simple_hyphen_user.self,
                    forKey: .user
                )
                _type = try container.decode(
                    Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types.self,
                    forKey: ._type
                )
                state = try container.decode(
                    Components.Schemas.repository_hyphen_advisory_hyphen_credit.statePayload.self,
                    forKey: .state
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "user",
                    "type",
                    "state"
                ])
            }
        }
        /// A repository security advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/repository-advisory`.
        public struct repository_hyphen_advisory: Codable, Hashable, Sendable {
            /// The GitHub Security Advisory ID.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/ghsa_id`.
            public var ghsa_id: Swift.String
            /// The Common Vulnerabilities and Exposures (CVE) ID.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cve_id`.
            public var cve_id: Swift.String?
            /// The API URL for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/url`.
            public var url: Swift.String
            /// The URL for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/html_url`.
            public var html_url: Swift.String
            /// A short summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/summary`.
            public var summary: Swift.String
            /// A detailed description of what the advisory entails.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/description`.
            public var description: Swift.String?
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                case critical = "critical"
                case high = "high"
                case medium = "medium"
                case low = "low"
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/severity`.
            public var severity: Components.Schemas.repository_hyphen_advisory.severityPayload?
            /// The author of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/author`.
            public struct authorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-advisory/author/value1`.
                public var value1: Components.Schemas.simple_hyphen_user
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.simple_hyphen_user) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The author of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/author`.
            public var author: Components.Schemas.repository_hyphen_advisory.authorPayload?
            /// The publisher of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/publisher`.
            public struct publisherPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-advisory/publisher/value1`.
                public var value1: Components.Schemas.simple_hyphen_user
                /// Creates a new `publisherPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.simple_hyphen_user) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// The publisher of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/publisher`.
            public var publisher: Components.Schemas.repository_hyphen_advisory.publisherPayload?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiersPayload`.
            public struct identifiersPayloadPayload: Codable, Hashable, Sendable {
                /// The type of identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiersPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case CVE = "CVE"
                    case GHSA = "GHSA"
                }
                /// The type of identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiersPayload/type`.
                public var _type: Components.Schemas.repository_hyphen_advisory.identifiersPayloadPayload._typePayload
                /// The identifier value.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiersPayload/value`.
                public var value: Swift.String
                /// Creates a new `identifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of identifier.
                ///   - value: The identifier value.
                public init(
                    _type: Components.Schemas.repository_hyphen_advisory.identifiersPayloadPayload._typePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiers`.
            public typealias identifiersPayload = [Components.Schemas.repository_hyphen_advisory.identifiersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/repository-advisory/identifiers`.
            public var identifiers: Components.Schemas.repository_hyphen_advisory.identifiersPayload
            /// The state of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case published = "published"
                case closed = "closed"
                case withdrawn = "withdrawn"
                case draft = "draft"
                case triage = "triage"
            }
            /// The state of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/state`.
            public var state: Components.Schemas.repository_hyphen_advisory.statePayload
            /// The date and time of when the advisory was created, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/created_at`.
            public var created_at: Foundation.Date?
            /// The date and time of when the advisory was last updated, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/updated_at`.
            public var updated_at: Foundation.Date?
            /// The date and time of when the advisory was published, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/published_at`.
            public var published_at: Foundation.Date?
            /// The date and time of when the advisory was closed, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/closed_at`.
            public var closed_at: Foundation.Date?
            /// The date and time of when the advisory was withdrawn, in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/withdrawn_at`.
            public var withdrawn_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/submission`.
            public struct submissionPayload: Codable, Hashable, Sendable {
                /// Whether a private vulnerability report was accepted by the repository's administrators.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/submission/accepted`.
                public var accepted: Swift.Bool
                /// Creates a new `submissionPayload`.
                ///
                /// - Parameters:
                ///   - accepted: Whether a private vulnerability report was accepted by the repository's administrators.
                public init(accepted: Swift.Bool) {
                    self.accepted = accepted
                }
                public enum CodingKeys: String, CodingKey {
                    case accepted
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-advisory/submission`.
            public var submission: Components.Schemas.repository_hyphen_advisory.submissionPayload?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/vulnerabilities`.
            public var vulnerabilities: [Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability]?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cvss`.
            public struct cvssPayload: Codable, Hashable, Sendable {
                /// The CVSS vector.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/cvss/vector_string`.
                public var vector_string: Swift.String?
                /// The CVSS score.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/cvss/score`.
                public var score: Swift.Double?
                /// Creates a new `cvssPayload`.
                ///
                /// - Parameters:
                ///   - vector_string: The CVSS vector.
                ///   - score: The CVSS score.
                public init(
                    vector_string: Swift.String? = nil,
                    score: Swift.Double? = nil
                ) {
                    self.vector_string = vector_string
                    self.score = score
                }
                public enum CodingKeys: String, CodingKey {
                    case vector_string
                    case score
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cvss`.
            public var cvss: Components.Schemas.repository_hyphen_advisory.cvssPayload?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cwesPayload`.
            public struct cwesPayloadPayload: Codable, Hashable, Sendable {
                /// The Common Weakness Enumeration (CWE) identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/cwesPayload/cwe_id`.
                public var cwe_id: Swift.String
                /// The name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/cwesPayload/name`.
                public var name: Swift.String
                /// Creates a new `cwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cwe_id: The Common Weakness Enumeration (CWE) identifier.
                ///   - name: The name of the CWE.
                public init(
                    cwe_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cwe_id = cwe_id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cwe_id
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cwes`.
            public typealias cwesPayload = [Components.Schemas.repository_hyphen_advisory.cwesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cwes`.
            public var cwes: Components.Schemas.repository_hyphen_advisory.cwesPayload?
            /// A list of only the CWE IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/cwe_ids`.
            public var cwe_ids: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/creditsPayload`.
            public struct creditsPayloadPayload: Codable, Hashable, Sendable {
                /// The username of the user credited.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory/creditsPayload/login`.
                public var login: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository-advisory/creditsPayload/type`.
                public var _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types?
                /// Creates a new `creditsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - login: The username of the user credited.
                ///   - _type:
                public init(
                    login: Swift.String? = nil,
                    _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types? = nil
                ) {
                    self.login = login
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case login
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository-advisory/credits`.
            public typealias creditsPayload = [Components.Schemas.repository_hyphen_advisory.creditsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/repository-advisory/credits`.
            public var credits: Components.Schemas.repository_hyphen_advisory.creditsPayload?
            /// - Remark: Generated from `#/components/schemas/repository-advisory/credits_detailed`.
            public var credits_detailed: [Components.Schemas.repository_hyphen_advisory_hyphen_credit]?
            /// A list of users that collaborate on the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/collaborating_users`.
            public var collaborating_users: [Components.Schemas.simple_hyphen_user]?
            /// A list of teams that collaborate on the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/collaborating_teams`.
            public var collaborating_teams: [Components.Schemas.team]?
            /// A temporary private fork of the advisory's repository for collaborating on a fix.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/private_fork`.
            public struct private_forkPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository-advisory/private_fork/value1`.
                public var value1: Components.Schemas.simple_hyphen_repository
                /// Creates a new `private_forkPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.simple_hyphen_repository) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try value1.encode(to: encoder)
                }
            }
            /// A temporary private fork of the advisory's repository for collaborating on a fix.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory/private_fork`.
            public var private_fork: Components.Schemas.repository_hyphen_advisory.private_forkPayload?
            /// Creates a new `repository_hyphen_advisory`.
            ///
            /// - Parameters:
            ///   - ghsa_id: The GitHub Security Advisory ID.
            ///   - cve_id: The Common Vulnerabilities and Exposures (CVE) ID.
            ///   - url: The API URL for the advisory.
            ///   - html_url: The URL for the advisory.
            ///   - summary: A short summary of the advisory.
            ///   - description: A detailed description of what the advisory entails.
            ///   - severity: The severity of the advisory.
            ///   - author: The author of the advisory.
            ///   - publisher: The publisher of the advisory.
            ///   - identifiers:
            ///   - state: The state of the advisory.
            ///   - created_at: The date and time of when the advisory was created, in ISO 8601 format.
            ///   - updated_at: The date and time of when the advisory was last updated, in ISO 8601 format.
            ///   - published_at: The date and time of when the advisory was published, in ISO 8601 format.
            ///   - closed_at: The date and time of when the advisory was closed, in ISO 8601 format.
            ///   - withdrawn_at: The date and time of when the advisory was withdrawn, in ISO 8601 format.
            ///   - submission:
            ///   - vulnerabilities:
            ///   - cvss:
            ///   - cwes:
            ///   - cwe_ids: A list of only the CWE IDs.
            ///   - credits:
            ///   - credits_detailed:
            ///   - collaborating_users: A list of users that collaborate on the advisory.
            ///   - collaborating_teams: A list of teams that collaborate on the advisory.
            ///   - private_fork: A temporary private fork of the advisory's repository for collaborating on a fix.
            public init(
                ghsa_id: Swift.String,
                cve_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                summary: Swift.String,
                description: Swift.String? = nil,
                severity: Components.Schemas.repository_hyphen_advisory.severityPayload? = nil,
                author: Components.Schemas.repository_hyphen_advisory.authorPayload? = nil,
                publisher: Components.Schemas.repository_hyphen_advisory.publisherPayload? = nil,
                identifiers: Components.Schemas.repository_hyphen_advisory.identifiersPayload,
                state: Components.Schemas.repository_hyphen_advisory.statePayload,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                published_at: Foundation.Date? = nil,
                closed_at: Foundation.Date? = nil,
                withdrawn_at: Foundation.Date? = nil,
                submission: Components.Schemas.repository_hyphen_advisory.submissionPayload? = nil,
                vulnerabilities: [Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability]? = nil,
                cvss: Components.Schemas.repository_hyphen_advisory.cvssPayload? = nil,
                cwes: Components.Schemas.repository_hyphen_advisory.cwesPayload? = nil,
                cwe_ids: [Swift.String]? = nil,
                credits: Components.Schemas.repository_hyphen_advisory.creditsPayload? = nil,
                credits_detailed: [Components.Schemas.repository_hyphen_advisory_hyphen_credit]? = nil,
                collaborating_users: [Components.Schemas.simple_hyphen_user]? = nil,
                collaborating_teams: [Components.Schemas.team]? = nil,
                private_fork: Components.Schemas.repository_hyphen_advisory.private_forkPayload? = nil
            ) {
                self.ghsa_id = ghsa_id
                self.cve_id = cve_id
                self.url = url
                self.html_url = html_url
                self.summary = summary
                self.description = description
                self.severity = severity
                self.author = author
                self.publisher = publisher
                self.identifiers = identifiers
                self.state = state
                self.created_at = created_at
                self.updated_at = updated_at
                self.published_at = published_at
                self.closed_at = closed_at
                self.withdrawn_at = withdrawn_at
                self.submission = submission
                self.vulnerabilities = vulnerabilities
                self.cvss = cvss
                self.cwes = cwes
                self.cwe_ids = cwe_ids
                self.credits = credits
                self.credits_detailed = credits_detailed
                self.collaborating_users = collaborating_users
                self.collaborating_teams = collaborating_teams
                self.private_fork = private_fork
            }
            public enum CodingKeys: String, CodingKey {
                case ghsa_id
                case cve_id
                case url
                case html_url
                case summary
                case description
                case severity
                case author
                case publisher
                case identifiers
                case state
                case created_at
                case updated_at
                case published_at
                case closed_at
                case withdrawn_at
                case submission
                case vulnerabilities
                case cvss
                case cwes
                case cwe_ids
                case credits
                case credits_detailed
                case collaborating_users
                case collaborating_teams
                case private_fork
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                ghsa_id = try container.decode(
                    Swift.String.self,
                    forKey: .ghsa_id
                )
                cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                html_url = try container.decode(
                    Swift.String.self,
                    forKey: .html_url
                )
                summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                severity = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.severityPayload.self,
                    forKey: .severity
                )
                author = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.authorPayload.self,
                    forKey: .author
                )
                publisher = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.publisherPayload.self,
                    forKey: .publisher
                )
                identifiers = try container.decode(
                    Components.Schemas.repository_hyphen_advisory.identifiersPayload.self,
                    forKey: .identifiers
                )
                state = try container.decode(
                    Components.Schemas.repository_hyphen_advisory.statePayload.self,
                    forKey: .state
                )
                created_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .created_at
                )
                updated_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                published_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .published_at
                )
                closed_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .closed_at
                )
                withdrawn_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .withdrawn_at
                )
                submission = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.submissionPayload.self,
                    forKey: .submission
                )
                vulnerabilities = try container.decodeIfPresent(
                    [Components.Schemas.repository_hyphen_advisory_hyphen_vulnerability].self,
                    forKey: .vulnerabilities
                )
                cvss = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.cvssPayload.self,
                    forKey: .cvss
                )
                cwes = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.cwesPayload.self,
                    forKey: .cwes
                )
                cwe_ids = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .cwe_ids
                )
                credits = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.creditsPayload.self,
                    forKey: .credits
                )
                credits_detailed = try container.decodeIfPresent(
                    [Components.Schemas.repository_hyphen_advisory_hyphen_credit].self,
                    forKey: .credits_detailed
                )
                collaborating_users = try container.decodeIfPresent(
                    [Components.Schemas.simple_hyphen_user].self,
                    forKey: .collaborating_users
                )
                collaborating_teams = try container.decodeIfPresent(
                    [Components.Schemas.team].self,
                    forKey: .collaborating_teams
                )
                private_fork = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory.private_forkPayload.self,
                    forKey: .private_fork
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id",
                    "cve_id",
                    "url",
                    "html_url",
                    "summary",
                    "description",
                    "severity",
                    "author",
                    "publisher",
                    "identifiers",
                    "state",
                    "created_at",
                    "updated_at",
                    "published_at",
                    "closed_at",
                    "withdrawn_at",
                    "submission",
                    "vulnerabilities",
                    "cvss",
                    "cwes",
                    "cwe_ids",
                    "credits",
                    "credits_detailed",
                    "collaborating_users",
                    "collaborating_teams",
                    "private_fork"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/repository-advisory-create`.
        public struct repository_hyphen_advisory_hyphen_create: Codable, Hashable, Sendable {
            /// A short summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/summary`.
            public var summary: Swift.String
            /// A detailed description of what the advisory impacts.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/description`.
            public var description: Swift.String
            /// The Common Vulnerabilities and Exposures (CVE) ID.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/cve_id`.
            public var cve_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload`.
            public struct vulnerabilitiesPayloadPayload: Codable, Hashable, Sendable {
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/package`.
                public struct packagePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/package/ecosystem`.
                    public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems
                    /// The unique package name within its ecosystem.
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/package/name`.
                    public var name: Swift.String?
                    /// Creates a new `packagePayload`.
                    ///
                    /// - Parameters:
                    ///   - ecosystem:
                    ///   - name: The unique package name within its ecosystem.
                    public init(
                        ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems,
                        name: Swift.String? = nil
                    ) {
                        self.ecosystem = ecosystem
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ecosystem
                        case name
                    }
                }
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/package`.
                public var package: Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload
                /// The range of the package versions affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/vulnerable_version_range`.
                public var vulnerable_version_range: Swift.String?
                /// The package version(s) that resolve the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/patched_versions`.
                public var patched_versions: Swift.String?
                /// The functions in the package that are affected.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilitiesPayload/vulnerable_functions`.
                public var vulnerable_functions: [Swift.String]?
                /// Creates a new `vulnerabilitiesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - package: The name of the package affected by the vulnerability.
                ///   - vulnerable_version_range: The range of the package versions affected by the vulnerability.
                ///   - patched_versions: The package version(s) that resolve the vulnerability.
                ///   - vulnerable_functions: The functions in the package that are affected.
                public init(
                    package: Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload,
                    vulnerable_version_range: Swift.String? = nil,
                    patched_versions: Swift.String? = nil,
                    vulnerable_functions: [Swift.String]? = nil
                ) {
                    self.package = package
                    self.vulnerable_version_range = vulnerable_version_range
                    self.patched_versions = patched_versions
                    self.vulnerable_functions = vulnerable_functions
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case vulnerable_version_range
                    case patched_versions
                    case vulnerable_functions
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    package = try container.decode(
                        Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload.self,
                        forKey: .package
                    )
                    vulnerable_version_range = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vulnerable_version_range
                    )
                    patched_versions = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .patched_versions
                    )
                    vulnerable_functions = try container.decodeIfPresent(
                        [Swift.String].self,
                        forKey: .vulnerable_functions
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "package",
                        "vulnerable_version_range",
                        "patched_versions",
                        "vulnerable_functions"
                    ])
                }
            }
            /// A product affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilities`.
            public typealias vulnerabilitiesPayload = [Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayloadPayload]
            /// A product affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/vulnerabilities`.
            public var vulnerabilities: Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayload
            /// A list of Common Weakness Enumeration (CWE) IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/cwe_ids`.
            public var cwe_ids: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/creditsPayload`.
            public struct creditsPayloadPayload: Codable, Hashable, Sendable {
                /// The username of the user credited.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/creditsPayload/login`.
                public var login: Swift.String
                /// - Remark: Generated from `#/components/schemas/repository-advisory-create/creditsPayload/type`.
                public var _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                /// Creates a new `creditsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - login: The username of the user credited.
                ///   - _type:
                public init(
                    login: Swift.String,
                    _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                ) {
                    self.login = login
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case login
                    case _type = "type"
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    login = try container.decode(
                        Swift.String.self,
                        forKey: .login
                    )
                    _type = try container.decode(
                        Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types.self,
                        forKey: ._type
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "login",
                        "type"
                    ])
                }
            }
            /// A list of users receiving credit for their participation in the security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/credits`.
            public typealias creditsPayload = [Components.Schemas.repository_hyphen_advisory_hyphen_create.creditsPayloadPayload]
            /// A list of users receiving credit for their participation in the security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/credits`.
            public var credits: Components.Schemas.repository_hyphen_advisory_hyphen_create.creditsPayload?
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                case critical = "critical"
                case high = "high"
                case medium = "medium"
                case low = "low"
            }
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/severity`.
            public var severity: Components.Schemas.repository_hyphen_advisory_hyphen_create.severityPayload?
            /// The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/cvss_vector_string`.
            public var cvss_vector_string: Swift.String?
            /// Whether to create a temporary private fork of the repository to collaborate on a fix.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-create/start_private_fork`.
            public var start_private_fork: Swift.Bool?
            /// Creates a new `repository_hyphen_advisory_hyphen_create`.
            ///
            /// - Parameters:
            ///   - summary: A short summary of the advisory.
            ///   - description: A detailed description of what the advisory impacts.
            ///   - cve_id: The Common Vulnerabilities and Exposures (CVE) ID.
            ///   - vulnerabilities: A product affected by the vulnerability detailed in a repository security advisory.
            ///   - cwe_ids: A list of Common Weakness Enumeration (CWE) IDs.
            ///   - credits: A list of users receiving credit for their participation in the security advisory.
            ///   - severity: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///   - cvss_vector_string: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///   - start_private_fork: Whether to create a temporary private fork of the repository to collaborate on a fix.
            public init(
                summary: Swift.String,
                description: Swift.String,
                cve_id: Swift.String? = nil,
                vulnerabilities: Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayload,
                cwe_ids: [Swift.String]? = nil,
                credits: Components.Schemas.repository_hyphen_advisory_hyphen_create.creditsPayload? = nil,
                severity: Components.Schemas.repository_hyphen_advisory_hyphen_create.severityPayload? = nil,
                cvss_vector_string: Swift.String? = nil,
                start_private_fork: Swift.Bool? = nil
            ) {
                self.summary = summary
                self.description = description
                self.cve_id = cve_id
                self.vulnerabilities = vulnerabilities
                self.cwe_ids = cwe_ids
                self.credits = credits
                self.severity = severity
                self.cvss_vector_string = cvss_vector_string
                self.start_private_fork = start_private_fork
            }
            public enum CodingKeys: String, CodingKey {
                case summary
                case description
                case cve_id
                case vulnerabilities
                case cwe_ids
                case credits
                case severity
                case cvss_vector_string
                case start_private_fork
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decode(
                    Swift.String.self,
                    forKey: .description
                )
                cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                vulnerabilities = try container.decode(
                    Components.Schemas.repository_hyphen_advisory_hyphen_create.vulnerabilitiesPayload.self,
                    forKey: .vulnerabilities
                )
                cwe_ids = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .cwe_ids
                )
                credits = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_create.creditsPayload.self,
                    forKey: .credits
                )
                severity = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_create.severityPayload.self,
                    forKey: .severity
                )
                cvss_vector_string = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cvss_vector_string
                )
                start_private_fork = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .start_private_fork
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "summary",
                    "description",
                    "cve_id",
                    "vulnerabilities",
                    "cwe_ids",
                    "credits",
                    "severity",
                    "cvss_vector_string",
                    "start_private_fork"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create`.
        public struct private_hyphen_vulnerability_hyphen_report_hyphen_create: Codable, Hashable, Sendable {
            /// A short summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/summary`.
            public var summary: Swift.String
            /// A detailed description of what the advisory impacts.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload`.
            public struct vulnerabilitiesPayloadPayload: Codable, Hashable, Sendable {
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/package`.
                public struct packagePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/package/ecosystem`.
                    public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems
                    /// The unique package name within its ecosystem.
                    ///
                    /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/package/name`.
                    public var name: Swift.String?
                    /// Creates a new `packagePayload`.
                    ///
                    /// - Parameters:
                    ///   - ecosystem:
                    ///   - name: The unique package name within its ecosystem.
                    public init(
                        ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems,
                        name: Swift.String? = nil
                    ) {
                        self.ecosystem = ecosystem
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ecosystem
                        case name
                    }
                }
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/package`.
                public var package: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload
                /// The range of the package versions affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/vulnerable_version_range`.
                public var vulnerable_version_range: Swift.String?
                /// The package version(s) that resolve the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/patched_versions`.
                public var patched_versions: Swift.String?
                /// The functions in the package that are affected.
                ///
                /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilitiesPayload/vulnerable_functions`.
                public var vulnerable_functions: [Swift.String]?
                /// Creates a new `vulnerabilitiesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - package: The name of the package affected by the vulnerability.
                ///   - vulnerable_version_range: The range of the package versions affected by the vulnerability.
                ///   - patched_versions: The package version(s) that resolve the vulnerability.
                ///   - vulnerable_functions: The functions in the package that are affected.
                public init(
                    package: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload,
                    vulnerable_version_range: Swift.String? = nil,
                    patched_versions: Swift.String? = nil,
                    vulnerable_functions: [Swift.String]? = nil
                ) {
                    self.package = package
                    self.vulnerable_version_range = vulnerable_version_range
                    self.patched_versions = patched_versions
                    self.vulnerable_functions = vulnerable_functions
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case vulnerable_version_range
                    case patched_versions
                    case vulnerable_functions
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    package = try container.decode(
                        Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayloadPayload.packagePayload.self,
                        forKey: .package
                    )
                    vulnerable_version_range = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vulnerable_version_range
                    )
                    patched_versions = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .patched_versions
                    )
                    vulnerable_functions = try container.decodeIfPresent(
                        [Swift.String].self,
                        forKey: .vulnerable_functions
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "package",
                        "vulnerable_version_range",
                        "patched_versions",
                        "vulnerable_functions"
                    ])
                }
            }
            /// An array of products affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilities`.
            public typealias vulnerabilitiesPayload = [Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayloadPayload]
            /// An array of products affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/vulnerabilities`.
            public var vulnerabilities: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayload?
            /// A list of Common Weakness Enumeration (CWE) IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/cwe_ids`.
            public var cwe_ids: [Swift.String]?
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                case critical = "critical"
                case high = "high"
                case medium = "medium"
                case low = "low"
            }
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/severity`.
            public var severity: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.severityPayload?
            /// The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/cvss_vector_string`.
            public var cvss_vector_string: Swift.String?
            /// Whether to create a temporary private fork of the repository to collaborate on a fix.
            ///
            /// - Remark: Generated from `#/components/schemas/private-vulnerability-report-create/start_private_fork`.
            public var start_private_fork: Swift.Bool?
            /// Creates a new `private_hyphen_vulnerability_hyphen_report_hyphen_create`.
            ///
            /// - Parameters:
            ///   - summary: A short summary of the advisory.
            ///   - description: A detailed description of what the advisory impacts.
            ///   - vulnerabilities: An array of products affected by the vulnerability detailed in a repository security advisory.
            ///   - cwe_ids: A list of Common Weakness Enumeration (CWE) IDs.
            ///   - severity: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///   - cvss_vector_string: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///   - start_private_fork: Whether to create a temporary private fork of the repository to collaborate on a fix.
            public init(
                summary: Swift.String,
                description: Swift.String,
                vulnerabilities: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayload? = nil,
                cwe_ids: [Swift.String]? = nil,
                severity: Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.severityPayload? = nil,
                cvss_vector_string: Swift.String? = nil,
                start_private_fork: Swift.Bool? = nil
            ) {
                self.summary = summary
                self.description = description
                self.vulnerabilities = vulnerabilities
                self.cwe_ids = cwe_ids
                self.severity = severity
                self.cvss_vector_string = cvss_vector_string
                self.start_private_fork = start_private_fork
            }
            public enum CodingKeys: String, CodingKey {
                case summary
                case description
                case vulnerabilities
                case cwe_ids
                case severity
                case cvss_vector_string
                case start_private_fork
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decode(
                    Swift.String.self,
                    forKey: .description
                )
                vulnerabilities = try container.decodeIfPresent(
                    Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.vulnerabilitiesPayload.self,
                    forKey: .vulnerabilities
                )
                cwe_ids = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .cwe_ids
                )
                severity = try container.decodeIfPresent(
                    Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create.severityPayload.self,
                    forKey: .severity
                )
                cvss_vector_string = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cvss_vector_string
                )
                start_private_fork = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .start_private_fork
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "summary",
                    "description",
                    "vulnerabilities",
                    "cwe_ids",
                    "severity",
                    "cvss_vector_string",
                    "start_private_fork"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/repository-advisory-update`.
        public struct repository_hyphen_advisory_hyphen_update: Codable, Hashable, Sendable {
            /// A short summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/summary`.
            public var summary: Swift.String?
            /// A detailed description of what the advisory impacts.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/description`.
            public var description: Swift.String?
            /// The Common Vulnerabilities and Exposures (CVE) ID.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/cve_id`.
            public var cve_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload`.
            public struct vulnerabilitiesPayloadPayload: Codable, Hashable, Sendable {
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/package`.
                public struct packagePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/package/ecosystem`.
                    public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems
                    /// The unique package name within its ecosystem.
                    ///
                    /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/package/name`.
                    public var name: Swift.String?
                    /// Creates a new `packagePayload`.
                    ///
                    /// - Parameters:
                    ///   - ecosystem:
                    ///   - name: The unique package name within its ecosystem.
                    public init(
                        ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems,
                        name: Swift.String? = nil
                    ) {
                        self.ecosystem = ecosystem
                        self.name = name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ecosystem
                        case name
                    }
                }
                /// The name of the package affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/package`.
                public var package: Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayloadPayload.packagePayload
                /// The range of the package versions affected by the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/vulnerable_version_range`.
                public var vulnerable_version_range: Swift.String?
                /// The package version(s) that resolve the vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/patched_versions`.
                public var patched_versions: Swift.String?
                /// The functions in the package that are affected.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilitiesPayload/vulnerable_functions`.
                public var vulnerable_functions: [Swift.String]?
                /// Creates a new `vulnerabilitiesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - package: The name of the package affected by the vulnerability.
                ///   - vulnerable_version_range: The range of the package versions affected by the vulnerability.
                ///   - patched_versions: The package version(s) that resolve the vulnerability.
                ///   - vulnerable_functions: The functions in the package that are affected.
                public init(
                    package: Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayloadPayload.packagePayload,
                    vulnerable_version_range: Swift.String? = nil,
                    patched_versions: Swift.String? = nil,
                    vulnerable_functions: [Swift.String]? = nil
                ) {
                    self.package = package
                    self.vulnerable_version_range = vulnerable_version_range
                    self.patched_versions = patched_versions
                    self.vulnerable_functions = vulnerable_functions
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case vulnerable_version_range
                    case patched_versions
                    case vulnerable_functions
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    package = try container.decode(
                        Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayloadPayload.packagePayload.self,
                        forKey: .package
                    )
                    vulnerable_version_range = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vulnerable_version_range
                    )
                    patched_versions = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .patched_versions
                    )
                    vulnerable_functions = try container.decodeIfPresent(
                        [Swift.String].self,
                        forKey: .vulnerable_functions
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "package",
                        "vulnerable_version_range",
                        "patched_versions",
                        "vulnerable_functions"
                    ])
                }
            }
            /// A product affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilities`.
            public typealias vulnerabilitiesPayload = [Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayloadPayload]
            /// A product affected by the vulnerability detailed in a repository security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/vulnerabilities`.
            public var vulnerabilities: Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayload?
            /// A list of Common Weakness Enumeration (CWE) IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/cwe_ids`.
            public var cwe_ids: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/creditsPayload`.
            public struct creditsPayloadPayload: Codable, Hashable, Sendable {
                /// The username of the user credited.
                ///
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/creditsPayload/login`.
                public var login: Swift.String
                /// - Remark: Generated from `#/components/schemas/repository-advisory-update/creditsPayload/type`.
                public var _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                /// Creates a new `creditsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - login: The username of the user credited.
                ///   - _type:
                public init(
                    login: Swift.String,
                    _type: Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types
                ) {
                    self.login = login
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case login
                    case _type = "type"
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    login = try container.decode(
                        Swift.String.self,
                        forKey: .login
                    )
                    _type = try container.decode(
                        Components.Schemas.security_hyphen_advisory_hyphen_credit_hyphen_types.self,
                        forKey: ._type
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "login",
                        "type"
                    ])
                }
            }
            /// A list of users receiving credit for their participation in the security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/credits`.
            public typealias creditsPayload = [Components.Schemas.repository_hyphen_advisory_hyphen_update.creditsPayloadPayload]
            /// A list of users receiving credit for their participation in the security advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/credits`.
            public var credits: Components.Schemas.repository_hyphen_advisory_hyphen_update.creditsPayload?
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                case critical = "critical"
                case high = "high"
                case medium = "medium"
                case low = "low"
            }
            /// The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/severity`.
            public var severity: Components.Schemas.repository_hyphen_advisory_hyphen_update.severityPayload?
            /// The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/cvss_vector_string`.
            public var cvss_vector_string: Swift.String?
            /// The state of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case published = "published"
                case closed = "closed"
                case draft = "draft"
            }
            /// The state of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/state`.
            public var state: Components.Schemas.repository_hyphen_advisory_hyphen_update.statePayload?
            /// A list of usernames who have been granted write access to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/collaborating_users`.
            public var collaborating_users: [Swift.String]?
            /// A list of team slugs which have been granted write access to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/repository-advisory-update/collaborating_teams`.
            public var collaborating_teams: [Swift.String]?
            /// Creates a new `repository_hyphen_advisory_hyphen_update`.
            ///
            /// - Parameters:
            ///   - summary: A short summary of the advisory.
            ///   - description: A detailed description of what the advisory impacts.
            ///   - cve_id: The Common Vulnerabilities and Exposures (CVE) ID.
            ///   - vulnerabilities: A product affected by the vulnerability detailed in a repository security advisory.
            ///   - cwe_ids: A list of Common Weakness Enumeration (CWE) IDs.
            ///   - credits: A list of users receiving credit for their participation in the security advisory.
            ///   - severity: The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
            ///   - cvss_vector_string: The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
            ///   - state: The state of the advisory.
            ///   - collaborating_users: A list of usernames who have been granted write access to the advisory.
            ///   - collaborating_teams: A list of team slugs which have been granted write access to the advisory.
            public init(
                summary: Swift.String? = nil,
                description: Swift.String? = nil,
                cve_id: Swift.String? = nil,
                vulnerabilities: Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayload? = nil,
                cwe_ids: [Swift.String]? = nil,
                credits: Components.Schemas.repository_hyphen_advisory_hyphen_update.creditsPayload? = nil,
                severity: Components.Schemas.repository_hyphen_advisory_hyphen_update.severityPayload? = nil,
                cvss_vector_string: Swift.String? = nil,
                state: Components.Schemas.repository_hyphen_advisory_hyphen_update.statePayload? = nil,
                collaborating_users: [Swift.String]? = nil,
                collaborating_teams: [Swift.String]? = nil
            ) {
                self.summary = summary
                self.description = description
                self.cve_id = cve_id
                self.vulnerabilities = vulnerabilities
                self.cwe_ids = cwe_ids
                self.credits = credits
                self.severity = severity
                self.cvss_vector_string = cvss_vector_string
                self.state = state
                self.collaborating_users = collaborating_users
                self.collaborating_teams = collaborating_teams
            }
            public enum CodingKeys: String, CodingKey {
                case summary
                case description
                case cve_id
                case vulnerabilities
                case cwe_ids
                case credits
                case severity
                case cvss_vector_string
                case state
                case collaborating_users
                case collaborating_teams
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                summary = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .summary
                )
                description = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .description
                )
                cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                vulnerabilities = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_update.vulnerabilitiesPayload.self,
                    forKey: .vulnerabilities
                )
                cwe_ids = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .cwe_ids
                )
                credits = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_update.creditsPayload.self,
                    forKey: .credits
                )
                severity = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_update.severityPayload.self,
                    forKey: .severity
                )
                cvss_vector_string = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cvss_vector_string
                )
                state = try container.decodeIfPresent(
                    Components.Schemas.repository_hyphen_advisory_hyphen_update.statePayload.self,
                    forKey: .state
                )
                collaborating_users = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .collaborating_users
                )
                collaborating_teams = try container.decodeIfPresent(
                    [Swift.String].self,
                    forKey: .collaborating_teams
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "summary",
                    "description",
                    "cve_id",
                    "vulnerabilities",
                    "cwe_ids",
                    "credits",
                    "severity",
                    "cvss_vector_string",
                    "state",
                    "collaborating_users",
                    "collaborating_teams"
                ])
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_hyphen_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_hyphen_after = Swift.String
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The GHSA (GitHub Security Advisory) identifier of the advisory.
        ///
        /// - Remark: Generated from `#/components/parameters/ghsa_id`.
        public typealias ghsa_id = Swift.String
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct accepted: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/accepted/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/accepted/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.accepted.Body
            /// Creates a new `accepted`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.accepted.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List global security advisories
    ///
    /// Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
    ///
    /// By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
    ///
    /// - Remark: HTTP `GET /advisories`.
    /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)`.
    public enum security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories {
        public static let id: Swift.String = "security-advisories/list-global-advisories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/advisories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/ghsa_id`.
                public var ghsa_id: Swift.String?
                /// - Remark: Generated from `#/paths/advisories/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case reviewed = "reviewed"
                    case malware = "malware"
                    case unreviewed = "unreviewed"
                }
                /// If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/type`.
                public var _type: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query._typePayload?
                /// If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/cve_id`.
                public var cve_id: Swift.String?
                /// If specified, only advisories for these ecosystems will be returned.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/ecosystem`.
                public var ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems?
                /// - Remark: Generated from `#/paths/advisories/GET/query/severity`.
                @frozen public enum severityPayload: String, Codable, Hashable, Sendable {
                    case unknown = "unknown"
                    case low = "low"
                    case medium = "medium"
                    case high = "high"
                    case critical = "critical"
                }
                /// If specified, only advisories with these severities will be returned.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/severity`.
                public var severity: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.severityPayload?
                /// - Remark: Generated from `#/paths/advisories/GET/query/cwes`.
                @frozen public enum cwesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/advisories/GET/query/cwes/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/paths/advisories/GET/query/cwes/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
                ///
                /// Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/cwes`.
                public var cwes: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.cwesPayload?
                /// Whether to only return advisories that have been withdrawn.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/is_withdrawn`.
                public var is_withdrawn: Swift.Bool?
                /// - Remark: Generated from `#/paths/advisories/GET/query/affects`.
                @frozen public enum affectsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/advisories/GET/query/affects/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/paths/advisories/GET/query/affects/case2`.
                    case case2([Swift.String])
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
                /// If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
                ///
                /// Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/affects`.
                public var affects: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.affectsPayload?
                /// If specified, only return advisories that were published on a date or date range.
                ///
                /// For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/published`.
                public var published: Swift.String?
                /// If specified, only return advisories that were updated on a date or date range.
                ///
                /// For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/updated`.
                public var updated: Swift.String?
                /// If specified, only show advisories that were updated or published on a date or date range.
                ///
                /// For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/modified`.
                public var modified: Swift.String?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// - Remark: Generated from `#/paths/advisories/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case updated = "updated"
                    case published = "published"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/advisories/GET/query/sort`.
                public var sort: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.sortPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ghsa_id: If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
                ///   - _type: If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
                ///   - cve_id: If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
                ///   - ecosystem: If specified, only advisories for these ecosystems will be returned.
                ///   - severity: If specified, only advisories with these severities will be returned.
                ///   - cwes: If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
                ///   - is_withdrawn: Whether to only return advisories that have been withdrawn.
                ///   - affects: If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
                ///   - published: If specified, only return advisories that were published on a date or date range.
                ///   - updated: If specified, only return advisories that were updated on a date or date range.
                ///   - modified: If specified, only show advisories that were updated or published on a date or date range.
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - sort: The property to sort the results by.
                public init(
                    ghsa_id: Swift.String? = nil,
                    _type: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query._typePayload? = nil,
                    cve_id: Swift.String? = nil,
                    ecosystem: Components.Schemas.security_hyphen_advisory_hyphen_ecosystems? = nil,
                    severity: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.severityPayload? = nil,
                    cwes: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.cwesPayload? = nil,
                    is_withdrawn: Swift.Bool? = nil,
                    affects: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.affectsPayload? = nil,
                    published: Swift.String? = nil,
                    updated: Swift.String? = nil,
                    modified: Swift.String? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    direction: Components.Parameters.direction? = nil,
                    per_page: Swift.Int? = nil,
                    sort: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query.sortPayload? = nil
                ) {
                    self.ghsa_id = ghsa_id
                    self._type = _type
                    self.cve_id = cve_id
                    self.ecosystem = ecosystem
                    self.severity = severity
                    self.cwes = cwes
                    self.is_withdrawn = is_withdrawn
                    self.affects = affects
                    self.published = published
                    self.updated = updated
                    self.modified = modified
                    self.before = before
                    self.after = after
                    self.direction = direction
                    self.per_page = per_page
                    self.sort = sort
                }
            }
            public var query: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query
            /// - Remark: Generated from `#/paths/advisories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Query = .init(),
                headers: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/advisories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/advisories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.global_hyphen_advisory])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.global_hyphen_advisory] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/advisories/GET/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/advisories/GET/responses/429/content/application\/json`.
                    case json(Components.Schemas.basic_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.basic_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.TooManyRequests.Body) {
                    self.body = body
                }
            }
            /// Too many requests
            ///
            /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.security_hyphen_advisories_sol_list_hyphen_global_hyphen_advisories.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//advisories/get(security-advisories/list-global-advisories)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a global security advisory
    ///
    /// Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// - Remark: HTTP `GET /advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//advisories/{ghsa_id}/get(security-advisories/get-global-advisory)`.
    public enum security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory {
        public static let id: Swift.String = "security-advisories/get-global-advisory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/advisories/{ghsa_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The GHSA (GitHub Security Advisory) identifier of the advisory.
                ///
                /// - Remark: Generated from `#/paths/advisories/{ghsa_id}/GET/path/ghsa_id`.
                public var ghsa_id: Components.Parameters.ghsa_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ghsa_id: The GHSA (GitHub Security Advisory) identifier of the advisory.
                public init(ghsa_id: Components.Parameters.ghsa_id) {
                    self.ghsa_id = ghsa_id
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Path
            /// - Remark: Generated from `#/paths/advisories/{ghsa_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/advisories/{ghsa_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/advisories/{ghsa_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.global_hyphen_advisory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.global_hyphen_advisory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//advisories/{ghsa_id}/get(security-advisories/get-global-advisory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_get_hyphen_global_hyphen_advisory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//advisories/{ghsa_id}/get(security-advisories/get-global-advisory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository security advisories for an organization
    ///
    /// Lists repository security advisories for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/security-advisories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)`.
    public enum security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories {
        public static let id: Swift.String = "security-advisories/list-org-repository-advisories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case published = "published"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/sort`.
                public var sort: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query.sortPayload?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case triage = "triage"
                    case draft = "draft"
                    case published = "published"
                    case closed = "closed"
                }
                /// Filter by the state of the repository advisories. Only advisories of this state will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/query/state`.
                public var state: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query.statePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - sort: The property to sort the results by.
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - state: Filter by the state of the repository advisories. Only advisories of this state will be returned.
                public init(
                    direction: Components.Parameters.direction? = nil,
                    sort: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query.sortPayload? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    per_page: Swift.Int? = nil,
                    state: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query.statePayload? = nil
                ) {
                    self.direction = direction
                    self.sort = sort
                    self.before = before
                    self.after = after
                    self.per_page = per_page
                    self.state = state
                }
            }
            public var query: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Path,
                query: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Query = .init(),
                headers: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/security-advisories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_advisory])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_advisory] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_list_hyphen_org_hyphen_repository_hyphen_advisories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/security-advisories/get(security-advisories/list-org-repository-advisories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List repository security advisories
    ///
    /// Lists security advisories in a repository.
    ///
    /// The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)`.
    public enum security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories {
        public static let id: Swift.String = "security-advisories/list-repository-advisories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                    case published = "published"
                }
                /// The property to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/sort`.
                public var sort: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query.sortPayload?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/per_page`.
                public var per_page: Swift.Int?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/state`.
                @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                    case triage = "triage"
                    case draft = "draft"
                    case published = "published"
                    case closed = "closed"
                }
                /// Filter by state of the repository advisories. Only advisories of this state will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/query/state`.
                public var state: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query.statePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - sort: The property to sort the results by.
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of advisories to return per page. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - state: Filter by state of the repository advisories. Only advisories of this state will be returned.
                public init(
                    direction: Components.Parameters.direction? = nil,
                    sort: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query.sortPayload? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    per_page: Swift.Int? = nil,
                    state: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query.statePayload? = nil
                ) {
                    self.direction = direction
                    self.sort = sort
                    self.before = before
                    self.after = after
                    self.per_page = per_page
                    self.state = state
                }
            }
            public var query: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Path,
                query: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Query = .init(),
                headers: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.repository_hyphen_advisory])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.repository_hyphen_advisory] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_list_hyphen_repository_hyphen_advisories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/get(security-advisories/list-repository-advisories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Create a repository security advisory
    ///
    /// Creates a new repository security advisory.
    ///
    /// In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)`.
    public enum security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory {
        public static let id: Swift.String = "security-advisories/create-repository-advisory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.repository_hyphen_advisory_hyphen_create)
            }
            public var body: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Headers = .init(),
                body: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_advisory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_advisory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/post(security-advisories/create-repository-advisory)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Privately report a security vulnerability
    ///
    /// Report a security vulnerability to the maintainers of the repository.
    /// See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/reports`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)`.
    public enum security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report {
        public static let id: Swift.String = "security-advisories/create-private-vulnerability-report"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.private_hyphen_vulnerability_hyphen_report_hyphen_create)
            }
            public var body: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Headers = .init(),
                body: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/reports/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_advisory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_advisory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.security_hyphen_advisories_sol_create_hyphen_private_hyphen_vulnerability_hyphen_report.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/reports/post(security-advisories/create-private-vulnerability-report)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository security advisory
    ///
    /// Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// Anyone can access any published security advisory on a public repository.
    ///
    /// The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
    /// collaborator on the security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)`.
    public enum security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory {
        public static let id: Swift.String = "security-advisories/get-repository-advisory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The GHSA (GitHub Security Advisory) identifier of the advisory.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/path/ghsa_id`.
                public var ghsa_id: Components.Parameters.ghsa_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ghsa_id: The GHSA (GitHub Security Advisory) identifier of the advisory.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ghsa_id: Components.Parameters.ghsa_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ghsa_id = ghsa_id
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_advisory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_advisory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_get_hyphen_repository_hyphen_advisory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/get(security-advisories/get-repository-advisory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a repository security advisory
    ///
    /// Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    ///
    /// In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
    /// or a collaborator on the repository security advisory.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)`.
    public enum security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory {
        public static let id: Swift.String = "security-advisories/update-repository-advisory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The GHSA (GitHub Security Advisory) identifier of the advisory.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/path/ghsa_id`.
                public var ghsa_id: Components.Parameters.ghsa_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ghsa_id: The GHSA (GitHub Security Advisory) identifier of the advisory.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ghsa_id: Components.Parameters.ghsa_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ghsa_id = ghsa_id
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.repository_hyphen_advisory_hyphen_update)
            }
            public var body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Headers = .init(),
                body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.repository_hyphen_advisory)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.repository_hyphen_advisory {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/PATCH/responses/422/content/application\/json`.
                    case json(Components.Schemas.validation_hyphen_error)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.validation_hyphen_error {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/patch(security-advisories/update-repository-advisory)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.security_hyphen_advisories_sol_update_hyphen_repository_hyphen_advisory.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request a CVE for a repository security advisory
    ///
    /// If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
    ///
    /// You may request a CVE for public repositories, but cannot do so for private repositories.
    ///
    /// In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)`.
    public enum security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request {
        public static let id: Swift.String = "security-advisories/create-repository-advisory-cve-request"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The GHSA (GitHub Security Advisory) identifier of the advisory.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/POST/path/ghsa_id`.
                public var ghsa_id: Components.Parameters.ghsa_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ghsa_id: The GHSA (GitHub Security Advisory) identifier of the advisory.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ghsa_id: Components.Parameters.ghsa_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ghsa_id = ghsa_id
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_create_hyphen_repository_hyphen_advisory_hyphen_cve_hyphen_request.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Accepted
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Components.Responses.accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Components.Responses.accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve/post(security-advisories/create-repository-advisory-cve-request)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Create a temporary private fork
    ///
    /// Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
    ///
    /// **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)`.
    public enum security_hyphen_advisories_sol_create_hyphen_fork {
        public static let id: Swift.String = "security-advisories/create-fork"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/path/repo`.
                public var repo: Components.Parameters.repo
                /// The GHSA (GitHub Security Advisory) identifier of the advisory.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/path/ghsa_id`.
                public var ghsa_id: Components.Parameters.ghsa_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - ghsa_id: The GHSA (GitHub Security Advisory) identifier of the advisory.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    ghsa_id: Components.Parameters.ghsa_id
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.ghsa_id = ghsa_id
                }
            }
            public var path: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_fork.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.security_hyphen_advisories_sol_create_hyphen_fork.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Path,
                headers: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/responses/202/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/POST/responses/202/content/application\/json`.
                    case json(Components.Schemas.full_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.full_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output.Accepted.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            public var accepted: Operations.security_hyphen_advisories_sol_create_hyphen_fork.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks/post(security-advisories/create-fork)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
}
