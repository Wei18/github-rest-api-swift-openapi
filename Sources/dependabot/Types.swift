// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List Dependabot alerts for an enterprise
    ///
    /// Lists Dependabot alerts for repositories that are owned by the specified enterprise.
    ///
    /// The authenticated user must be a member of the enterprise to use this endpoint.
    ///
    /// Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)`.
    func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(_ input: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output
    /// List Dependabot alerts for an organization
    ///
    /// Lists Dependabot alerts for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)`.
    func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org(_ input: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/get(dependabot/list-org-secrets)`.
    func dependabot_sol_list_hyphen_org_hyphen_secrets(_ input: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input) async throws -> Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/public-key/get(dependabot/get-org-public-key)`.
    func dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key(_ input: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input) async throws -> Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/get(dependabot/get-org-secret)`.
    func dependabot_sol_get_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)`.
    func dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/delete(dependabot/delete-org-secret)`.
    func dependabot_sol_delete_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Output
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/get(dependabot/list-selected-repos-for-org-secret)`.
    func dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/put(dependabot/set-selected-repos-for-org-secret)`.
    func dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. The visibility is set when you [Create or
    /// update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)`.
    func dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)`.
    func dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(_ input: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input) async throws -> Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output
    /// List Dependabot alerts for a repository
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)`.
    func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(_ input: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output
    /// Get a Dependabot alert
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)`.
    func dependabot_sol_get_hyphen_alert(_ input: Operations.dependabot_sol_get_hyphen_alert.Input) async throws -> Operations.dependabot_sol_get_hyphen_alert.Output
    /// Update a Dependabot alert
    ///
    /// The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)`.
    func dependabot_sol_update_hyphen_alert(_ input: Operations.dependabot_sol_update_hyphen_alert.Input) async throws -> Operations.dependabot_sol_update_hyphen_alert.Output
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/get(dependabot/list-repo-secrets)`.
    func dependabot_sol_list_hyphen_repo_hyphen_secrets(_ input: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input) async throws -> Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets. Anyone with read access
    /// to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/public-key/get(dependabot/get-repo-public-key)`.
    func dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key(_ input: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input) async throws -> Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/get(dependabot/get-repo-secret)`.
    func dependabot_sol_get_hyphen_repo_hyphen_secret(_ input: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input) async throws -> Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)`.
    func dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(_ input: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input) async throws -> Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/delete(dependabot/delete-repo-secret)`.
    func dependabot_sol_delete_hyphen_repo_hyphen_secret(_ input: Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Input) async throws -> Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List Dependabot alerts for an enterprise
    ///
    /// Lists Dependabot alerts for repositories that are owned by the specified enterprise.
    ///
    /// The authenticated user must be a member of the enterprise to use this endpoint.
    ///
    /// Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)`.
    public func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(
        path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output {
        try await dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List Dependabot alerts for an organization
    ///
    /// Lists Dependabot alerts for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)`.
    public func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org(
        path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output {
        try await dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/get(dependabot/list-org-secrets)`.
    public func dependabot_sol_list_hyphen_org_hyphen_secrets(
        path: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output {
        try await dependabot_sol_list_hyphen_org_hyphen_secrets(Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/public-key/get(dependabot/get-org-public-key)`.
    public func dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key(
        path: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output {
        try await dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key(Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/get(dependabot/get-org-secret)`.
    public func dependabot_sol_get_hyphen_org_hyphen_secret(
        path: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_get_hyphen_org_hyphen_secret(Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)`.
    public func dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(
        path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
        headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
        body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/delete(dependabot/delete-org-secret)`.
    public func dependabot_sol_delete_hyphen_org_hyphen_secret(path: Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_delete_hyphen_org_hyphen_secret(Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/get(dependabot/list-selected-repos-for-org-secret)`.
    public func dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/put(dependabot/set-selected-repos-for-org-secret)`.
    public func dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(
        path: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
        body: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
    ) async throws -> Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret(Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input(
            path: path,
            body: body
        ))
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. The visibility is set when you [Create or
    /// update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)`.
    public func dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(path: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret(Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)`.
    public func dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(path: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path) async throws -> Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output {
        try await dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret(Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input(path: path))
    }
    /// List Dependabot alerts for a repository
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)`.
    public func dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(
        path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output {
        try await dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a Dependabot alert
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)`.
    public func dependabot_sol_get_hyphen_alert(
        path: Operations.dependabot_sol_get_hyphen_alert.Input.Path,
        headers: Operations.dependabot_sol_get_hyphen_alert.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_get_hyphen_alert.Output {
        try await dependabot_sol_get_hyphen_alert(Operations.dependabot_sol_get_hyphen_alert.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a Dependabot alert
    ///
    /// The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)`.
    public func dependabot_sol_update_hyphen_alert(
        path: Operations.dependabot_sol_update_hyphen_alert.Input.Path,
        headers: Operations.dependabot_sol_update_hyphen_alert.Input.Headers = .init(),
        body: Operations.dependabot_sol_update_hyphen_alert.Input.Body
    ) async throws -> Operations.dependabot_sol_update_hyphen_alert.Output {
        try await dependabot_sol_update_hyphen_alert(Operations.dependabot_sol_update_hyphen_alert.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/get(dependabot/list-repo-secrets)`.
    public func dependabot_sol_list_hyphen_repo_hyphen_secrets(
        path: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
        query: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
        headers: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output {
        try await dependabot_sol_list_hyphen_repo_hyphen_secrets(Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets. Anyone with read access
    /// to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/public-key/get(dependabot/get-repo-public-key)`.
    public func dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key(
        path: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
        headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output {
        try await dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key(Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/get(dependabot/get-repo-secret)`.
    public func dependabot_sol_get_hyphen_repo_hyphen_secret(
        path: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
    ) async throws -> Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output {
        try await dependabot_sol_get_hyphen_repo_hyphen_secret(Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)`.
    public func dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(
        path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
        headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
        body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
    ) async throws -> Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output {
        try await dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/delete(dependabot/delete-repo-secret)`.
    public func dependabot_sol_delete_hyphen_repo_hyphen_secret(path: Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Input.Path) async throws -> Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Output {
        try await dependabot_sol_delete_hyphen_repo_hyphen_secret(Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Input(path: path))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/cvss-severities`.
        public struct cvss_hyphen_severities: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v3`.
            public struct cvss_v3Payload: Codable, Hashable, Sendable {
                /// The CVSS 3 vector string.
                ///
                /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v3/vector_string`.
                public var vector_string: Swift.String?
                /// The CVSS 3 score.
                ///
                /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v3/score`.
                public var score: Swift.Double?
                /// Creates a new `cvss_v3Payload`.
                ///
                /// - Parameters:
                ///   - vector_string: The CVSS 3 vector string.
                ///   - score: The CVSS 3 score.
                public init(
                    vector_string: Swift.String? = nil,
                    score: Swift.Double? = nil
                ) {
                    self.vector_string = vector_string
                    self.score = score
                }
                public enum CodingKeys: String, CodingKey {
                    case vector_string
                    case score
                }
            }
            /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v3`.
            public var cvss_v3: Components.Schemas.cvss_hyphen_severities.cvss_v3Payload?
            /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v4`.
            public struct cvss_v4Payload: Codable, Hashable, Sendable {
                /// The CVSS 4 vector string.
                ///
                /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v4/vector_string`.
                public var vector_string: Swift.String?
                /// The CVSS 4 score.
                ///
                /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v4/score`.
                public var score: Swift.Double?
                /// Creates a new `cvss_v4Payload`.
                ///
                /// - Parameters:
                ///   - vector_string: The CVSS 4 vector string.
                ///   - score: The CVSS 4 score.
                public init(
                    vector_string: Swift.String? = nil,
                    score: Swift.Double? = nil
                ) {
                    self.vector_string = vector_string
                    self.score = score
                }
                public enum CodingKeys: String, CodingKey {
                    case vector_string
                    case score
                }
            }
            /// - Remark: Generated from `#/components/schemas/cvss-severities/cvss_v4`.
            public var cvss_v4: Components.Schemas.cvss_hyphen_severities.cvss_v4Payload?
            /// Creates a new `cvss_hyphen_severities`.
            ///
            /// - Parameters:
            ///   - cvss_v3:
            ///   - cvss_v4:
            public init(
                cvss_v3: Components.Schemas.cvss_hyphen_severities.cvss_v3Payload? = nil,
                cvss_v4: Components.Schemas.cvss_hyphen_severities.cvss_v4Payload? = nil
            ) {
                self.cvss_v3 = cvss_v3
                self.cvss_v4 = cvss_v4
            }
            public enum CodingKeys: String, CodingKey {
                case cvss_v3
                case cvss_v4
            }
        }
        /// The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).
        ///
        /// - Remark: Generated from `#/components/schemas/security-advisory-epss`.
        public struct security_hyphen_advisory_hyphen_epss: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-advisory-epss/percentage`.
            public var percentage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/security-advisory-epss/percentile`.
            public var percentile: Swift.Double?
            /// Creates a new `security_hyphen_advisory_hyphen_epss`.
            ///
            /// - Parameters:
            ///   - percentage:
            ///   - percentile:
            public init(
                percentage: Swift.Double? = nil,
                percentile: Swift.Double? = nil
            ) {
                self.percentage = percentage
                self.percentile = percentile
            }
            public enum CodingKeys: String, CodingKey {
                case percentage
                case percentile
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        public struct validation_hyphen_error_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            public var errors: [Swift.String]?
            /// Creates a new `validation_hyphen_error_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        public struct scim_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            public var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            public var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            public var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            public var schemas: [Swift.String]?
            /// Creates a new `scim_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            public var user_view_type: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            ///   - user_view_type:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil,
                user_view_type: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
                self.user_view_type = user_view_type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
                case user_view_type
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// A GitHub repository.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-repository`.
        public struct simple_hyphen_repository: Codable, Hashable, Sendable {
            /// A unique identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/id`.
            public var id: Swift.Int64
            /// The GraphQL identifier of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/name`.
            public var name: Swift.String
            /// The full, globally unique, name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/private`.
            public var _private: Swift.Bool
            /// The URL to view the repository on GitHub.com.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/html_url`.
            public var html_url: Swift.String
            /// The repository description.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/description`.
            public var description: Swift.String?
            /// Whether the repository is a fork.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/fork`.
            public var fork: Swift.Bool
            /// The URL to get more information about the repository from the GitHub API.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/url`.
            public var url: Swift.String
            /// A template for the API URL to download the repository as an archive.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/archive_url`.
            public var archive_url: Swift.String
            /// A template for the API URL to list the available assignees for issues in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// A template for the API URL to get information about branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/branches_url`.
            public var branches_url: Swift.String
            /// A template for the API URL to get information about collaborators of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// A template for the API URL to get information about comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/comments_url`.
            public var comments_url: Swift.String
            /// A template for the API URL to get information about commits on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/commits_url`.
            public var commits_url: Swift.String
            /// A template for the API URL to compare two commits or refs.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/compare_url`.
            public var compare_url: Swift.String
            /// A template for the API URL to get the contents of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contents_url`.
            public var contents_url: Swift.String
            /// A template for the API URL to list the contributors to the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// The API URL to list the deployments of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// The API URL to list the downloads on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// The API URL to list the events of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/events_url`.
            public var events_url: Swift.String
            /// The API URL to list the forks of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/forks_url`.
            public var forks_url: Swift.String
            /// A template for the API URL to get information about Git commits of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// A template for the API URL to get information about Git refs of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// A template for the API URL to get information about Git tags of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// A template for the API URL to get information about issue comments on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// A template for the API URL to get information about issue events on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// A template for the API URL to get information about issues on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/issues_url`.
            public var issues_url: Swift.String
            /// A template for the API URL to get information about deploy keys on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/keys_url`.
            public var keys_url: Swift.String
            /// A template for the API URL to get information about labels of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/labels_url`.
            public var labels_url: Swift.String
            /// The API URL to get information about the languages of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/languages_url`.
            public var languages_url: Swift.String
            /// The API URL to merge branches in the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/merges_url`.
            public var merges_url: Swift.String
            /// A template for the API URL to get information about milestones of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// A template for the API URL to get information about notifications on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// A template for the API URL to get information about pull requests on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// A template for the API URL to get information about releases on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/releases_url`.
            public var releases_url: Swift.String
            /// The API URL to list the stargazers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// A template for the API URL to get information about statuses of a commit.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// The API URL to list the subscribers on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// The API URL to subscribe to notifications for this repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// The API URL to get information about tags on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/tags_url`.
            public var tags_url: Swift.String
            /// The API URL to list the teams on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/teams_url`.
            public var teams_url: Swift.String
            /// A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/trees_url`.
            public var trees_url: Swift.String
            /// The API URL to list the hooks on the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// Creates a new `simple_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier of the repository.
            ///   - node_id: The GraphQL identifier of the repository.
            ///   - name: The name of the repository.
            ///   - full_name: The full, globally unique, name of the repository.
            ///   - owner:
            ///   - _private: Whether the repository is private.
            ///   - html_url: The URL to view the repository on GitHub.com.
            ///   - description: The repository description.
            ///   - fork: Whether the repository is a fork.
            ///   - url: The URL to get more information about the repository from the GitHub API.
            ///   - archive_url: A template for the API URL to download the repository as an archive.
            ///   - assignees_url: A template for the API URL to list the available assignees for issues in the repository.
            ///   - blobs_url: A template for the API URL to create or retrieve a raw Git blob in the repository.
            ///   - branches_url: A template for the API URL to get information about branches in the repository.
            ///   - collaborators_url: A template for the API URL to get information about collaborators of the repository.
            ///   - comments_url: A template for the API URL to get information about comments on the repository.
            ///   - commits_url: A template for the API URL to get information about commits on the repository.
            ///   - compare_url: A template for the API URL to compare two commits or refs.
            ///   - contents_url: A template for the API URL to get the contents of the repository.
            ///   - contributors_url: A template for the API URL to list the contributors to the repository.
            ///   - deployments_url: The API URL to list the deployments of the repository.
            ///   - downloads_url: The API URL to list the downloads on the repository.
            ///   - events_url: The API URL to list the events of the repository.
            ///   - forks_url: The API URL to list the forks of the repository.
            ///   - git_commits_url: A template for the API URL to get information about Git commits of the repository.
            ///   - git_refs_url: A template for the API URL to get information about Git refs of the repository.
            ///   - git_tags_url: A template for the API URL to get information about Git tags of the repository.
            ///   - issue_comment_url: A template for the API URL to get information about issue comments on the repository.
            ///   - issue_events_url: A template for the API URL to get information about issue events on the repository.
            ///   - issues_url: A template for the API URL to get information about issues on the repository.
            ///   - keys_url: A template for the API URL to get information about deploy keys on the repository.
            ///   - labels_url: A template for the API URL to get information about labels of the repository.
            ///   - languages_url: The API URL to get information about the languages of the repository.
            ///   - merges_url: The API URL to merge branches in the repository.
            ///   - milestones_url: A template for the API URL to get information about milestones of the repository.
            ///   - notifications_url: A template for the API URL to get information about notifications on the repository.
            ///   - pulls_url: A template for the API URL to get information about pull requests on the repository.
            ///   - releases_url: A template for the API URL to get information about releases on the repository.
            ///   - stargazers_url: The API URL to list the stargazers on the repository.
            ///   - statuses_url: A template for the API URL to get information about statuses of a commit.
            ///   - subscribers_url: The API URL to list the subscribers on the repository.
            ///   - subscription_url: The API URL to subscribe to notifications for this repository.
            ///   - tags_url: The API URL to get information about tags on the repository.
            ///   - teams_url: The API URL to list the teams on the repository.
            ///   - trees_url: A template for the API URL to create or retrieve a raw Git tree of the repository.
            ///   - hooks_url: The API URL to list the hooks on the repository.
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                hooks_url: Swift.String
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.hooks_url = hooks_url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case hooks_url
            }
        }
        /// The security alert number.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-number`.
        public typealias alert_hyphen_number = Swift.Int
        /// Details for the vulnerable package.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-package`.
        public struct dependabot_hyphen_alert_hyphen_package: Codable, Hashable, Sendable {
            /// The package's language or package management ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/ecosystem`.
            public var ecosystem: Swift.String
            /// The unique package name within its ecosystem.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-package/name`.
            public var name: Swift.String
            /// Creates a new `dependabot_hyphen_alert_hyphen_package`.
            ///
            /// - Parameters:
            ///   - ecosystem: The package's language or package management ecosystem.
            ///   - name: The unique package name within its ecosystem.
            public init(
                ecosystem: Swift.String,
                name: Swift.String
            ) {
                self.ecosystem = ecosystem
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case ecosystem
                case name
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.ecosystem = try container.decode(
                    Swift.String.self,
                    forKey: .ecosystem
                )
                self.name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ecosystem",
                    "name"
                ])
            }
        }
        /// Details pertaining to one vulnerable version range for the advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability`.
        public struct dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/package`.
            public var package: Components.Schemas.dependabot_hyphen_alert_hyphen_package
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/severity`.
            public var severity: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.severityPayload
            /// Conditions that identify vulnerable versions of this vulnerability's package.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/vulnerable_version_range`.
            public var vulnerable_version_range: Swift.String
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            public struct first_patched_versionPayload: Codable, Hashable, Sendable {
                /// The package version that patches this vulnerability.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version/identifier`.
                public var identifier: Swift.String
                /// Creates a new `first_patched_versionPayload`.
                ///
                /// - Parameters:
                ///   - identifier: The package version that patches this vulnerability.
                public init(identifier: Swift.String) {
                    self.identifier = identifier
                }
                public enum CodingKeys: String, CodingKey {
                    case identifier
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.identifier = try container.decode(
                        Swift.String.self,
                        forKey: .identifier
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "identifier"
                    ])
                }
            }
            /// Details pertaining to the package version that patches this vulnerability.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-vulnerability/first_patched_version`.
            public var first_patched_version: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.first_patched_versionPayload?
            /// Creates a new `dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability`.
            ///
            /// - Parameters:
            ///   - package:
            ///   - severity: The severity of the vulnerability.
            ///   - vulnerable_version_range: Conditions that identify vulnerable versions of this vulnerability's package.
            ///   - first_patched_version: Details pertaining to the package version that patches this vulnerability.
            public init(
                package: Components.Schemas.dependabot_hyphen_alert_hyphen_package,
                severity: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.severityPayload,
                vulnerable_version_range: Swift.String,
                first_patched_version: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.first_patched_versionPayload? = nil
            ) {
                self.package = package
                self.severity = severity
                self.vulnerable_version_range = vulnerable_version_range
                self.first_patched_version = first_patched_version
            }
            public enum CodingKeys: String, CodingKey {
                case package
                case severity
                case vulnerable_version_range
                case first_patched_version
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.package = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_package.self,
                    forKey: .package
                )
                self.severity = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.severityPayload.self,
                    forKey: .severity
                )
                self.vulnerable_version_range = try container.decode(
                    Swift.String.self,
                    forKey: .vulnerable_version_range
                )
                self.first_patched_version = try container.decodeIfPresent(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.first_patched_versionPayload.self,
                    forKey: .first_patched_version
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "package",
                    "severity",
                    "vulnerable_version_range",
                    "first_patched_version"
                ])
            }
        }
        /// Details for the GitHub Security Advisory.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory`.
        public struct dependabot_hyphen_alert_hyphen_security_hyphen_advisory: Codable, Hashable, Sendable {
            /// The unique GitHub Security Advisory ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/ghsa_id`.
            public var ghsa_id: Swift.String
            /// The unique CVE ID assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cve_id`.
            public var cve_id: Swift.String?
            /// A short, plain text summary of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/summary`.
            public var summary: Swift.String
            /// A long-form Markdown-supported description of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/description`.
            public var description: Swift.String
            /// Vulnerable version range information for the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/vulnerabilities`.
            public var vulnerabilities: [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability]
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case low = "low"
                case medium = "medium"
                case high = "high"
                case critical = "critical"
            }
            /// The severity of the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/severity`.
            public var severity: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.severityPayload
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            public struct cvssPayload: Codable, Hashable, Sendable {
                /// The overall CVSS score of the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/score`.
                public var score: Swift.Double
                /// The full CVSS vector string for the advisory.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss/vector_string`.
                public var vector_string: Swift.String?
                /// Creates a new `cvssPayload`.
                ///
                /// - Parameters:
                ///   - score: The overall CVSS score of the advisory.
                ///   - vector_string: The full CVSS vector string for the advisory.
                public init(
                    score: Swift.Double,
                    vector_string: Swift.String? = nil
                ) {
                    self.score = score
                    self.vector_string = vector_string
                }
                public enum CodingKeys: String, CodingKey {
                    case score
                    case vector_string
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.score = try container.decode(
                        Swift.Double.self,
                        forKey: .score
                    )
                    self.vector_string = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .vector_string
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "score",
                        "vector_string"
                    ])
                }
            }
            /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss`.
            public var cvss: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cvssPayload
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cvss_severities`.
            public var cvss_severities: Components.Schemas.cvss_hyphen_severities?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/epss`.
            public var epss: Components.Schemas.security_hyphen_advisory_hyphen_epss?
            /// A CWE weakness assigned to the advisory.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload`.
            public struct cwesPayloadPayload: Codable, Hashable, Sendable {
                /// The unique CWE ID.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/cwe_id`.
                public var cwe_id: Swift.String
                /// The short, plain text name of the CWE.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwesPayload/name`.
                public var name: Swift.String
                /// Creates a new `cwesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - cwe_id: The unique CWE ID.
                ///   - name: The short, plain text name of the CWE.
                public init(
                    cwe_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cwe_id = cwe_id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cwe_id
                    case name
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.cwe_id = try container.decode(
                        Swift.String.self,
                        forKey: .cwe_id
                    )
                    self.name = try container.decode(
                        Swift.String.self,
                        forKey: .name
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "cwe_id",
                        "name"
                    ])
                }
            }
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            public typealias cwesPayload = [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cwesPayloadPayload]
            /// Details for the advisory pertaining to Common Weakness Enumeration.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/cwes`.
            public var cwes: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cwesPayload
            /// An advisory identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload`.
            public struct identifiersPayloadPayload: Codable, Hashable, Sendable {
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case CVE = "CVE"
                    case GHSA = "GHSA"
                }
                /// The type of advisory identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/type`.
                public var _type: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayloadPayload._typePayload
                /// The value of the advisory identifer.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiersPayload/value`.
                public var value: Swift.String
                /// Creates a new `identifiersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of advisory identifier.
                ///   - value: The value of the advisory identifer.
                public init(
                    _type: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayloadPayload._typePayload,
                    value: Swift.String
                ) {
                    self._type = _type
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self._type = try container.decode(
                        Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayloadPayload._typePayload.self,
                        forKey: ._type
                    )
                    self.value = try container.decode(
                        Swift.String.self,
                        forKey: .value
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "type",
                        "value"
                    ])
                }
            }
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            public typealias identifiersPayload = [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayloadPayload]
            /// Values that identify this advisory among security information sources.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/identifiers`.
            public var identifiers: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayload
            /// A link to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload`.
            public struct referencesPayloadPayload: Codable, Hashable, Sendable {
                /// The URL of the reference.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/referencesPayload/url`.
                public var url: Swift.String
                /// Creates a new `referencesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL of the reference.
                public init(url: Swift.String) {
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.url = try container.decode(
                        Swift.String.self,
                        forKey: .url
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "url"
                    ])
                }
            }
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            public typealias referencesPayload = [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.referencesPayloadPayload]
            /// Links to additional advisory information.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/references`.
            public var references: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.referencesPayload
            /// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/published_at`.
            public var published_at: Foundation.Date
            /// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/updated_at`.
            public var updated_at: Foundation.Date
            /// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-security-advisory/withdrawn_at`.
            public var withdrawn_at: Foundation.Date?
            /// Creates a new `dependabot_hyphen_alert_hyphen_security_hyphen_advisory`.
            ///
            /// - Parameters:
            ///   - ghsa_id: The unique GitHub Security Advisory ID assigned to the advisory.
            ///   - cve_id: The unique CVE ID assigned to the advisory.
            ///   - summary: A short, plain text summary of the advisory.
            ///   - description: A long-form Markdown-supported description of the advisory.
            ///   - vulnerabilities: Vulnerable version range information for the advisory.
            ///   - severity: The severity of the advisory.
            ///   - cvss: Details for the advisory pertaining to the Common Vulnerability Scoring System.
            ///   - cvss_severities:
            ///   - epss:
            ///   - cwes: Details for the advisory pertaining to Common Weakness Enumeration.
            ///   - identifiers: Values that identify this advisory among security information sources.
            ///   - references: Links to additional advisory information.
            ///   - published_at: The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - updated_at: The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            ///   - withdrawn_at: The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
            public init(
                ghsa_id: Swift.String,
                cve_id: Swift.String? = nil,
                summary: Swift.String,
                description: Swift.String,
                vulnerabilities: [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability],
                severity: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.severityPayload,
                cvss: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cvssPayload,
                cvss_severities: Components.Schemas.cvss_hyphen_severities? = nil,
                epss: Components.Schemas.security_hyphen_advisory_hyphen_epss? = nil,
                cwes: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cwesPayload,
                identifiers: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayload,
                references: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.referencesPayload,
                published_at: Foundation.Date,
                updated_at: Foundation.Date,
                withdrawn_at: Foundation.Date? = nil
            ) {
                self.ghsa_id = ghsa_id
                self.cve_id = cve_id
                self.summary = summary
                self.description = description
                self.vulnerabilities = vulnerabilities
                self.severity = severity
                self.cvss = cvss
                self.cvss_severities = cvss_severities
                self.epss = epss
                self.cwes = cwes
                self.identifiers = identifiers
                self.references = references
                self.published_at = published_at
                self.updated_at = updated_at
                self.withdrawn_at = withdrawn_at
            }
            public enum CodingKeys: String, CodingKey {
                case ghsa_id
                case cve_id
                case summary
                case description
                case vulnerabilities
                case severity
                case cvss
                case cvss_severities
                case epss
                case cwes
                case identifiers
                case references
                case published_at
                case updated_at
                case withdrawn_at
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.ghsa_id = try container.decode(
                    Swift.String.self,
                    forKey: .ghsa_id
                )
                self.cve_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .cve_id
                )
                self.summary = try container.decode(
                    Swift.String.self,
                    forKey: .summary
                )
                self.description = try container.decode(
                    Swift.String.self,
                    forKey: .description
                )
                self.vulnerabilities = try container.decode(
                    [Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability].self,
                    forKey: .vulnerabilities
                )
                self.severity = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.severityPayload.self,
                    forKey: .severity
                )
                self.cvss = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cvssPayload.self,
                    forKey: .cvss
                )
                self.cvss_severities = try container.decodeIfPresent(
                    Components.Schemas.cvss_hyphen_severities.self,
                    forKey: .cvss_severities
                )
                self.epss = try container.decodeIfPresent(
                    Components.Schemas.security_hyphen_advisory_hyphen_epss.self,
                    forKey: .epss
                )
                self.cwes = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.cwesPayload.self,
                    forKey: .cwes
                )
                self.identifiers = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.identifiersPayload.self,
                    forKey: .identifiers
                )
                self.references = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.referencesPayload.self,
                    forKey: .references
                )
                self.published_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .published_at
                )
                self.updated_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                self.withdrawn_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .withdrawn_at
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "ghsa_id",
                    "cve_id",
                    "summary",
                    "description",
                    "vulnerabilities",
                    "severity",
                    "cvss",
                    "cvss_severities",
                    "epss",
                    "cwes",
                    "identifiers",
                    "references",
                    "published_at",
                    "updated_at",
                    "withdrawn_at"
                ])
            }
        }
        /// The REST API URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-url`.
        public typealias alert_hyphen_url = Swift.String
        /// The GitHub URL of the alert resource.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-html-url`.
        public typealias alert_hyphen_html_hyphen_url = Swift.String
        /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-created-at`.
        public typealias alert_hyphen_created_hyphen_at = Foundation.Date
        /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-updated-at`.
        public typealias alert_hyphen_updated_hyphen_at = Foundation.Date
        /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-dismissed-at`.
        public typealias alert_hyphen_dismissed_hyphen_at = Foundation.Date
        /// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-fixed-at`.
        public typealias alert_hyphen_fixed_hyphen_at = Foundation.Date
        /// The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/schemas/alert-auto-dismissed-at`.
        public typealias alert_hyphen_auto_hyphen_dismissed_hyphen_at = Foundation.Date
        /// A Dependabot alert.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository`.
        public struct dependabot_hyphen_alert_hyphen_with_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/number`.
            public var number: Components.Schemas.alert_hyphen_number
            /// The state of the Dependabot alert.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto_dismissed = "auto_dismissed"
                case dismissed = "dismissed"
                case fixed = "fixed"
                case open = "open"
            }
            /// The state of the Dependabot alert.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/state`.
            public var state: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.statePayload
            /// Details for the vulnerable dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency`.
            public struct dependencyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/package`.
                public var package: Components.Schemas.dependabot_hyphen_alert_hyphen_package?
                /// The full path to the dependency manifest file, relative to the root of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/manifest_path`.
                public var manifest_path: Swift.String?
                /// The execution scope of the vulnerable dependency.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/scope`.
                @frozen public enum scopePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case runtime = "runtime"
                }
                /// The execution scope of the vulnerable dependency.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/scope`.
                public var scope: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload.scopePayload?
                /// The vulnerable dependency's relationship to your project.
                ///
                /// > [!NOTE]
                /// > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/relationship`.
                @frozen public enum relationshipPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case unknown = "unknown"
                    case direct = "direct"
                    case transitive = "transitive"
                }
                /// The vulnerable dependency's relationship to your project.
                ///
                /// > [!NOTE]
                /// > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency/relationship`.
                public var relationship: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload.relationshipPayload?
                /// Creates a new `dependencyPayload`.
                ///
                /// - Parameters:
                ///   - package:
                ///   - manifest_path: The full path to the dependency manifest file, relative to the root of the repository.
                ///   - scope: The execution scope of the vulnerable dependency.
                ///   - relationship: The vulnerable dependency's relationship to your project.
                public init(
                    package: Components.Schemas.dependabot_hyphen_alert_hyphen_package? = nil,
                    manifest_path: Swift.String? = nil,
                    scope: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload.scopePayload? = nil,
                    relationship: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload.relationshipPayload? = nil
                ) {
                    self.package = package
                    self.manifest_path = manifest_path
                    self.scope = scope
                    self.relationship = relationship
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case manifest_path
                    case scope
                    case relationship
                }
            }
            /// Details for the vulnerable dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dependency`.
            public var dependency: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/security_advisory`.
            public var security_advisory: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/security_vulnerability`.
            public var security_vulnerability: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/url`.
            public var url: Components.Schemas.alert_hyphen_url
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/html_url`.
            public var html_url: Components.Schemas.alert_hyphen_html_hyphen_url
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/created_at`.
            public var created_at: Components.Schemas.alert_hyphen_created_hyphen_at
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/updated_at`.
            public var updated_at: Components.Schemas.alert_hyphen_updated_hyphen_at
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dismissed_at`.
            public var dismissed_at: Components.Schemas.alert_hyphen_dismissed_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dismissed_by`.
            public var dismissed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The reason that the alert was dismissed.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dismissed_reason`.
            @frozen public enum dismissed_reasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fix_started = "fix_started"
                case inaccurate = "inaccurate"
                case no_bandwidth = "no_bandwidth"
                case not_used = "not_used"
                case tolerable_risk = "tolerable_risk"
            }
            /// The reason that the alert was dismissed.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dismissed_reason`.
            public var dismissed_reason: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dismissed_reasonPayload?
            /// An optional comment associated with the alert's dismissal.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/dismissed_comment`.
            public var dismissed_comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/fixed_at`.
            public var fixed_at: Components.Schemas.alert_hyphen_fixed_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/auto_dismissed_at`.
            public var auto_dismissed_at: Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert-with-repository/repository`.
            public var repository: Components.Schemas.simple_hyphen_repository
            /// Creates a new `dependabot_hyphen_alert_hyphen_with_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - state: The state of the Dependabot alert.
            ///   - dependency: Details for the vulnerable dependency.
            ///   - security_advisory:
            ///   - security_vulnerability:
            ///   - url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - dismissed_at:
            ///   - dismissed_by:
            ///   - dismissed_reason: The reason that the alert was dismissed.
            ///   - dismissed_comment: An optional comment associated with the alert's dismissal.
            ///   - fixed_at:
            ///   - auto_dismissed_at:
            ///   - repository:
            public init(
                number: Components.Schemas.alert_hyphen_number,
                state: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.statePayload,
                dependency: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload,
                security_advisory: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory,
                security_vulnerability: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability,
                url: Components.Schemas.alert_hyphen_url,
                html_url: Components.Schemas.alert_hyphen_html_hyphen_url,
                created_at: Components.Schemas.alert_hyphen_created_hyphen_at,
                updated_at: Components.Schemas.alert_hyphen_updated_hyphen_at,
                dismissed_at: Components.Schemas.alert_hyphen_dismissed_hyphen_at? = nil,
                dismissed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                dismissed_reason: Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dismissed_reasonPayload? = nil,
                dismissed_comment: Swift.String? = nil,
                fixed_at: Components.Schemas.alert_hyphen_fixed_hyphen_at? = nil,
                auto_dismissed_at: Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at? = nil,
                repository: Components.Schemas.simple_hyphen_repository
            ) {
                self.number = number
                self.state = state
                self.dependency = dependency
                self.security_advisory = security_advisory
                self.security_vulnerability = security_vulnerability
                self.url = url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.dismissed_at = dismissed_at
                self.dismissed_by = dismissed_by
                self.dismissed_reason = dismissed_reason
                self.dismissed_comment = dismissed_comment
                self.fixed_at = fixed_at
                self.auto_dismissed_at = auto_dismissed_at
                self.repository = repository
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case state
                case dependency
                case security_advisory
                case security_vulnerability
                case url
                case html_url
                case created_at
                case updated_at
                case dismissed_at
                case dismissed_by
                case dismissed_reason
                case dismissed_comment
                case fixed_at
                case auto_dismissed_at
                case repository
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.number = try container.decode(
                    Components.Schemas.alert_hyphen_number.self,
                    forKey: .number
                )
                self.state = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.statePayload.self,
                    forKey: .state
                )
                self.dependency = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dependencyPayload.self,
                    forKey: .dependency
                )
                self.security_advisory = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.self,
                    forKey: .security_advisory
                )
                self.security_vulnerability = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.self,
                    forKey: .security_vulnerability
                )
                self.url = try container.decode(
                    Components.Schemas.alert_hyphen_url.self,
                    forKey: .url
                )
                self.html_url = try container.decode(
                    Components.Schemas.alert_hyphen_html_hyphen_url.self,
                    forKey: .html_url
                )
                self.created_at = try container.decode(
                    Components.Schemas.alert_hyphen_created_hyphen_at.self,
                    forKey: .created_at
                )
                self.updated_at = try container.decode(
                    Components.Schemas.alert_hyphen_updated_hyphen_at.self,
                    forKey: .updated_at
                )
                self.dismissed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_dismissed_hyphen_at.self,
                    forKey: .dismissed_at
                )
                self.dismissed_by = try container.decodeIfPresent(
                    Components.Schemas.nullable_hyphen_simple_hyphen_user.self,
                    forKey: .dismissed_by
                )
                self.dismissed_reason = try container.decodeIfPresent(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository.dismissed_reasonPayload.self,
                    forKey: .dismissed_reason
                )
                self.dismissed_comment = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .dismissed_comment
                )
                self.fixed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_fixed_hyphen_at.self,
                    forKey: .fixed_at
                )
                self.auto_dismissed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at.self,
                    forKey: .auto_dismissed_at
                )
                self.repository = try container.decode(
                    Components.Schemas.simple_hyphen_repository.self,
                    forKey: .repository
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "number",
                    "state",
                    "dependency",
                    "security_advisory",
                    "security_vulnerability",
                    "url",
                    "html_url",
                    "created_at",
                    "updated_at",
                    "dismissed_at",
                    "dismissed_by",
                    "dismissed_reason",
                    "dismissed_comment",
                    "fixed_at",
                    "auto_dismissed_at",
                    "repository"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/code_security`.
            public struct code_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/code_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/code_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.code_securityPayload.statusPayload?
                /// Creates a new `code_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.code_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/code_security`.
            public var code_security: Components.Schemas.security_hyphen_and_hyphen_analysis.code_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload?
                /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public var secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection`.
            public struct secret_scanning_ai_detectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload.statusPayload?
                /// Creates a new `secret_scanning_ai_detectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_ai_detection`.
            public var secret_scanning_ai_detection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - code_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            ///   - secret_scanning_non_provider_patterns:
            ///   - secret_scanning_ai_detection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                code_security: Components.Schemas.security_hyphen_and_hyphen_analysis.code_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil,
                secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload? = nil,
                secret_scanning_ai_detection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_ai_detectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.code_security = code_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
                self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
                self.secret_scanning_ai_detection = secret_scanning_ai_detection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case code_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
                case secret_scanning_non_provider_patterns
                case secret_scanning_ai_detection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        public struct empty_hyphen_object: Codable, Hashable, Sendable {
            /// Creates a new `empty_hyphen_object`.
            public init() {}
            public init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Secrets for GitHub Dependabot for an organization.
        ///
        /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret`.
        public struct organization_hyphen_dependabot_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// Visibility of a secret
            ///
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/visibility`.
            @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case all = "all"
                case _private = "private"
                case selected = "selected"
            }
            /// Visibility of a secret
            ///
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/visibility`.
            public var visibility: Components.Schemas.organization_hyphen_dependabot_hyphen_secret.visibilityPayload
            /// - Remark: Generated from `#/components/schemas/organization-dependabot-secret/selected_repositories_url`.
            public var selected_repositories_url: Swift.String?
            /// Creates a new `organization_hyphen_dependabot_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret.
            ///   - created_at:
            ///   - updated_at:
            ///   - visibility: Visibility of a secret
            ///   - selected_repositories_url:
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                visibility: Components.Schemas.organization_hyphen_dependabot_hyphen_secret.visibilityPayload,
                selected_repositories_url: Swift.String? = nil
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
                self.visibility = visibility
                self.selected_repositories_url = selected_repositories_url
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
                case visibility
                case selected_repositories_url
            }
        }
        /// The public key used for setting Dependabot Secrets.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-public-key`.
        public struct dependabot_hyphen_public_hyphen_key: Codable, Hashable, Sendable {
            /// The identifier for the key.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-public-key/key_id`.
            public var key_id: Swift.String
            /// The Base64 encoded public key.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-public-key/key`.
            public var key: Swift.String
            /// Creates a new `dependabot_hyphen_public_hyphen_key`.
            ///
            /// - Parameters:
            ///   - key_id: The identifier for the key.
            ///   - key: The Base64 encoded public key.
            public init(
                key_id: Swift.String,
                key: Swift.String
            ) {
                self.key_id = key_id
                self.key = key
            }
            public enum CodingKeys: String, CodingKey {
                case key_id
                case key
            }
        }
        /// A Dependabot alert.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-alert`.
        public struct dependabot_hyphen_alert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/number`.
            public var number: Components.Schemas.alert_hyphen_number
            /// The state of the Dependabot alert.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto_dismissed = "auto_dismissed"
                case dismissed = "dismissed"
                case fixed = "fixed"
                case open = "open"
            }
            /// The state of the Dependabot alert.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/state`.
            public var state: Components.Schemas.dependabot_hyphen_alert.statePayload
            /// Details for the vulnerable dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency`.
            public struct dependencyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/package`.
                public var package: Components.Schemas.dependabot_hyphen_alert_hyphen_package?
                /// The full path to the dependency manifest file, relative to the root of the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/manifest_path`.
                public var manifest_path: Swift.String?
                /// The execution scope of the vulnerable dependency.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/scope`.
                @frozen public enum scopePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case runtime = "runtime"
                }
                /// The execution scope of the vulnerable dependency.
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/scope`.
                public var scope: Components.Schemas.dependabot_hyphen_alert.dependencyPayload.scopePayload?
                /// The vulnerable dependency's relationship to your project.
                ///
                /// > [!NOTE]
                /// > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/relationship`.
                @frozen public enum relationshipPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case unknown = "unknown"
                    case direct = "direct"
                    case transitive = "transitive"
                }
                /// The vulnerable dependency's relationship to your project.
                ///
                /// > [!NOTE]
                /// > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency/relationship`.
                public var relationship: Components.Schemas.dependabot_hyphen_alert.dependencyPayload.relationshipPayload?
                /// Creates a new `dependencyPayload`.
                ///
                /// - Parameters:
                ///   - package:
                ///   - manifest_path: The full path to the dependency manifest file, relative to the root of the repository.
                ///   - scope: The execution scope of the vulnerable dependency.
                ///   - relationship: The vulnerable dependency's relationship to your project.
                public init(
                    package: Components.Schemas.dependabot_hyphen_alert_hyphen_package? = nil,
                    manifest_path: Swift.String? = nil,
                    scope: Components.Schemas.dependabot_hyphen_alert.dependencyPayload.scopePayload? = nil,
                    relationship: Components.Schemas.dependabot_hyphen_alert.dependencyPayload.relationshipPayload? = nil
                ) {
                    self.package = package
                    self.manifest_path = manifest_path
                    self.scope = scope
                    self.relationship = relationship
                }
                public enum CodingKeys: String, CodingKey {
                    case package
                    case manifest_path
                    case scope
                    case relationship
                }
            }
            /// Details for the vulnerable dependency.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dependency`.
            public var dependency: Components.Schemas.dependabot_hyphen_alert.dependencyPayload
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/security_advisory`.
            public var security_advisory: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/security_vulnerability`.
            public var security_vulnerability: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/url`.
            public var url: Components.Schemas.alert_hyphen_url
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/html_url`.
            public var html_url: Components.Schemas.alert_hyphen_html_hyphen_url
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/created_at`.
            public var created_at: Components.Schemas.alert_hyphen_created_hyphen_at
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/updated_at`.
            public var updated_at: Components.Schemas.alert_hyphen_updated_hyphen_at
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dismissed_at`.
            public var dismissed_at: Components.Schemas.alert_hyphen_dismissed_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dismissed_by`.
            public var dismissed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The reason that the alert was dismissed.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dismissed_reason`.
            @frozen public enum dismissed_reasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fix_started = "fix_started"
                case inaccurate = "inaccurate"
                case no_bandwidth = "no_bandwidth"
                case not_used = "not_used"
                case tolerable_risk = "tolerable_risk"
            }
            /// The reason that the alert was dismissed.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dismissed_reason`.
            public var dismissed_reason: Components.Schemas.dependabot_hyphen_alert.dismissed_reasonPayload?
            /// An optional comment associated with the alert's dismissal.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/dismissed_comment`.
            public var dismissed_comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/fixed_at`.
            public var fixed_at: Components.Schemas.alert_hyphen_fixed_hyphen_at?
            /// - Remark: Generated from `#/components/schemas/dependabot-alert/auto_dismissed_at`.
            public var auto_dismissed_at: Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at?
            /// Creates a new `dependabot_hyphen_alert`.
            ///
            /// - Parameters:
            ///   - number:
            ///   - state: The state of the Dependabot alert.
            ///   - dependency: Details for the vulnerable dependency.
            ///   - security_advisory:
            ///   - security_vulnerability:
            ///   - url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - dismissed_at:
            ///   - dismissed_by:
            ///   - dismissed_reason: The reason that the alert was dismissed.
            ///   - dismissed_comment: An optional comment associated with the alert's dismissal.
            ///   - fixed_at:
            ///   - auto_dismissed_at:
            public init(
                number: Components.Schemas.alert_hyphen_number,
                state: Components.Schemas.dependabot_hyphen_alert.statePayload,
                dependency: Components.Schemas.dependabot_hyphen_alert.dependencyPayload,
                security_advisory: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory,
                security_vulnerability: Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability,
                url: Components.Schemas.alert_hyphen_url,
                html_url: Components.Schemas.alert_hyphen_html_hyphen_url,
                created_at: Components.Schemas.alert_hyphen_created_hyphen_at,
                updated_at: Components.Schemas.alert_hyphen_updated_hyphen_at,
                dismissed_at: Components.Schemas.alert_hyphen_dismissed_hyphen_at? = nil,
                dismissed_by: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                dismissed_reason: Components.Schemas.dependabot_hyphen_alert.dismissed_reasonPayload? = nil,
                dismissed_comment: Swift.String? = nil,
                fixed_at: Components.Schemas.alert_hyphen_fixed_hyphen_at? = nil,
                auto_dismissed_at: Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at? = nil
            ) {
                self.number = number
                self.state = state
                self.dependency = dependency
                self.security_advisory = security_advisory
                self.security_vulnerability = security_vulnerability
                self.url = url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.dismissed_at = dismissed_at
                self.dismissed_by = dismissed_by
                self.dismissed_reason = dismissed_reason
                self.dismissed_comment = dismissed_comment
                self.fixed_at = fixed_at
                self.auto_dismissed_at = auto_dismissed_at
            }
            public enum CodingKeys: String, CodingKey {
                case number
                case state
                case dependency
                case security_advisory
                case security_vulnerability
                case url
                case html_url
                case created_at
                case updated_at
                case dismissed_at
                case dismissed_by
                case dismissed_reason
                case dismissed_comment
                case fixed_at
                case auto_dismissed_at
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.number = try container.decode(
                    Components.Schemas.alert_hyphen_number.self,
                    forKey: .number
                )
                self.state = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert.statePayload.self,
                    forKey: .state
                )
                self.dependency = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert.dependencyPayload.self,
                    forKey: .dependency
                )
                self.security_advisory = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_advisory.self,
                    forKey: .security_advisory
                )
                self.security_vulnerability = try container.decode(
                    Components.Schemas.dependabot_hyphen_alert_hyphen_security_hyphen_vulnerability.self,
                    forKey: .security_vulnerability
                )
                self.url = try container.decode(
                    Components.Schemas.alert_hyphen_url.self,
                    forKey: .url
                )
                self.html_url = try container.decode(
                    Components.Schemas.alert_hyphen_html_hyphen_url.self,
                    forKey: .html_url
                )
                self.created_at = try container.decode(
                    Components.Schemas.alert_hyphen_created_hyphen_at.self,
                    forKey: .created_at
                )
                self.updated_at = try container.decode(
                    Components.Schemas.alert_hyphen_updated_hyphen_at.self,
                    forKey: .updated_at
                )
                self.dismissed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_dismissed_hyphen_at.self,
                    forKey: .dismissed_at
                )
                self.dismissed_by = try container.decodeIfPresent(
                    Components.Schemas.nullable_hyphen_simple_hyphen_user.self,
                    forKey: .dismissed_by
                )
                self.dismissed_reason = try container.decodeIfPresent(
                    Components.Schemas.dependabot_hyphen_alert.dismissed_reasonPayload.self,
                    forKey: .dismissed_reason
                )
                self.dismissed_comment = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .dismissed_comment
                )
                self.fixed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_fixed_hyphen_at.self,
                    forKey: .fixed_at
                )
                self.auto_dismissed_at = try container.decodeIfPresent(
                    Components.Schemas.alert_hyphen_auto_hyphen_dismissed_hyphen_at.self,
                    forKey: .auto_dismissed_at
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "number",
                    "state",
                    "dependency",
                    "security_advisory",
                    "security_vulnerability",
                    "url",
                    "html_url",
                    "created_at",
                    "updated_at",
                    "dismissed_at",
                    "dismissed_by",
                    "dismissed_reason",
                    "dismissed_comment",
                    "fixed_at",
                    "auto_dismissed_at"
                ])
            }
        }
        /// Set secrets for Dependabot.
        ///
        /// - Remark: Generated from `#/components/schemas/dependabot-secret`.
        public struct dependabot_hyphen_secret: Codable, Hashable, Sendable {
            /// The name of the secret.
            ///
            /// - Remark: Generated from `#/components/schemas/dependabot-secret/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/dependabot-secret/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/dependabot-secret/updated_at`.
            public var updated_at: Foundation.Date
            /// Creates a new `dependabot_hyphen_secret`.
            ///
            /// - Parameters:
            ///   - name: The name of the secret.
            ///   - created_at:
            ///   - updated_at:
            public init(
                name: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date
            ) {
                self.name = name
                self.created_at = created_at
                self.updated_at = updated_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case created_at
                case updated_at
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-before`.
        public typealias pagination_hyphen_before = Swift.String
        /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-after`.
        public typealias pagination_hyphen_after = Swift.String
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable, CaseIterable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
        ///
        /// - Remark: Generated from `#/components/parameters/enterprise`.
        public typealias enterprise = Swift.String
        /// A comma-separated list of states. If specified, only alerts with these states will be returned.
        ///
        /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-states`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states = Swift.String
        /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
        ///
        /// Can be: `low`, `medium`, `high`, `critical`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-severities`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities = Swift.String
        /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
        ///
        /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-ecosystems`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems = Swift.String
        /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-packages`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages = Swift.String
        /// CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
        /// - An exact number (`n`)
        /// - Comparators such as `>n`, `<n`, `>=n`, `<=n`
        /// - A range like `n..n`, where `n` is a number from 0.0 to 1.0
        ///
        /// Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-epss`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss = Swift.String
        /// Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
        /// Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has`.
        @frozen public enum dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case1`.
            case case1(Swift.String)
            /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/Case2Payload`.
            @frozen public enum Case2PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case patch = "patch"
            }
            /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
            public typealias Case2Payload = [Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2PayloadPayload]
            /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
            case case2(Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
        @frozen public enum dependabot_hyphen_alert_hyphen_scope: String, Codable, Hashable, Sendable, CaseIterable {
            case development = "development"
            case runtime = "runtime"
        }
        /// The property by which to sort the results.
        /// `created` means when the alert was created.
        /// `updated` means when the alert's state last changed.
        /// `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
        @frozen public enum dependabot_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable, CaseIterable {
            case created = "created"
            case updated = "updated"
            case epss_percentage = "epss_percentage"
        }
        /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
        /// This parameter must not be used in combination with `last`.
        /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-first`.
        public typealias pagination_hyphen_first = Swift.Int
        /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
        /// This parameter must not be used in combination with `first`.
        /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
        ///
        /// - Remark: Generated from `#/components/parameters/pagination-last`.
        public typealias pagination_hyphen_last = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The name of the secret.
        ///
        /// - Remark: Generated from `#/components/parameters/secret-name`.
        public typealias secret_hyphen_name = Swift.String
        /// A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-manifests`.
        public typealias dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_manifests = Swift.String
        /// The number that identifies a Dependabot alert in its repository.
        /// You can find this at the end of the URL for a Dependabot alert within GitHub,
        /// or in `number` fields in the response from the
        /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
        ///
        /// - Remark: Generated from `#/components/parameters/dependabot-alert-number`.
        public typealias dependabot_hyphen_alert_hyphen_number = Components.Schemas.alert_hyphen_number
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct validation_failed_simple: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed_simple/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed_simple/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error_hyphen_simple)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error_hyphen_simple {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed_simple.Body
            /// Creates a new `validation_failed_simple`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed_simple.Body) {
                self.body = body
            }
        }
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct bad_request: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case application_scim_plus_json(Components.Schemas.scim_hyphen_error)
                /// The associated value of the enum case if `self` is `.application_scim_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_scim_plus_json`.
                /// - SeeAlso: `.application_scim_plus_json`.
                public var application_scim_plus_json: Components.Schemas.scim_hyphen_error {
                    get throws {
                        switch self {
                        case let .application_scim_plus_json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.bad_request.Body
            /// Creates a new `bad_request`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.bad_request.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.conflict.Body
            /// Creates a new `conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.conflict.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List Dependabot alerts for an enterprise
    ///
    /// Lists Dependabot alerts for repositories that are owned by the specified enterprise.
    ///
    /// The authenticated user must be a member of the enterprise to use this endpoint.
    ///
    /// Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /enterprises/{enterprise}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)`.
    public enum dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise {
        public static let id: Swift.String = "dependabot/list-alerts-for-enterprise"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/path/enterprise`.
                public var enterprise: Components.Parameters.enterprise
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - enterprise: The slug version of the enterprise name. You can also substitute this value with the enterprise id.
                public init(enterprise: Components.Parameters.enterprise) {
                    self.enterprise = enterprise
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///
                /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/state`.
                public var state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states?
                /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///
                /// Can be: `low`, `medium`, `high`, `critical`
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/severity`.
                public var severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities?
                /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///
                /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/ecosystem`.
                public var ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems?
                /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/package`.
                public var package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages?
                /// CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                /// - An exact number (`n`)
                /// - Comparators such as `>n`, `<n`, `>=n`, `<=n`
                /// - A range like `n..n`, where `n` is a number from 0.0 to 1.0
                ///
                /// Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/epss_percentage`.
                public var epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has`.
                @frozen public enum dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/Case2Payload`.
                    @frozen public enum Case2PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case patch = "patch"
                    }
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    public typealias Case2Payload = [Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2PayloadPayload]
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    case case2(Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                /// Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/has`.
                public var has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
                @frozen public enum dependabot_hyphen_alert_hyphen_scope: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case runtime = "runtime"
                }
                /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/scope`.
                public var scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
                @frozen public enum dependabot_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                    case epss_percentage = "epss_percentage"
                }
                /// The property by which to sort the results.
                /// `created` means when the alert was created.
                /// `updated` means when the alert's state last changed.
                /// `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/sort`.
                public var sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                /// This parameter must not be used in combination with `last`.
                /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/first`.
                public var first: Components.Parameters.pagination_hyphen_first?
                /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                /// This parameter must not be used in combination with `first`.
                /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/last`.
                public var last: Components.Parameters.pagination_hyphen_last?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///   - severity: A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///   - ecosystem: A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///   - package: A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///   - epss_percentage: CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                ///   - has: Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                ///   - scope: The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///   - sort: The property by which to sort the results.
                ///   - direction: The direction to sort the results by.
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - first: **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                ///   - last: **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states? = nil,
                    severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities? = nil,
                    ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems? = nil,
                    package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages? = nil,
                    epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss? = nil,
                    has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has? = nil,
                    scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope? = nil,
                    sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    first: Components.Parameters.pagination_hyphen_first? = nil,
                    last: Components.Parameters.pagination_hyphen_last? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.state = state
                    self.severity = severity
                    self.ecosystem = ecosystem
                    self.package = package
                    self.epss_percentage = epss_percentage
                    self.has = has
                    self.scope = scope
                    self.sort = sort
                    self.direction = direction
                    self.before = before
                    self.after = after
                    self.first = first
                    self.last = last
                    self.per_page = per_page
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query
            /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/enterprises/{enterprise}/dependabot/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_enterprise.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//enterprises/{enterprise}/dependabot/alerts/get(dependabot/list-alerts-for-enterprise)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List Dependabot alerts for an organization
    ///
    /// Lists Dependabot alerts for an organization.
    ///
    /// The authenticated user must be an owner or security manager for the organization to use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)`.
    public enum dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org {
        public static let id: Swift.String = "dependabot/list-alerts-for-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///
                /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/state`.
                public var state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states?
                /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///
                /// Can be: `low`, `medium`, `high`, `critical`
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/severity`.
                public var severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities?
                /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///
                /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/ecosystem`.
                public var ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems?
                /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/package`.
                public var package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages?
                /// CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                /// - An exact number (`n`)
                /// - Comparators such as `>n`, `<n`, `>=n`, `<=n`
                /// - A range like `n..n`, where `n` is a number from 0.0 to 1.0
                ///
                /// Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/epss_percentage`.
                public var epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has`.
                @frozen public enum dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/Case2Payload`.
                    @frozen public enum Case2PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case patch = "patch"
                    }
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    public typealias Case2Payload = [Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2PayloadPayload]
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    case case2(Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                /// Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/has`.
                public var has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
                @frozen public enum dependabot_hyphen_alert_hyphen_scope: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case runtime = "runtime"
                }
                /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/scope`.
                public var scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
                @frozen public enum dependabot_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                    case epss_percentage = "epss_percentage"
                }
                /// The property by which to sort the results.
                /// `created` means when the alert was created.
                /// `updated` means when the alert's state last changed.
                /// `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/sort`.
                public var sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                /// This parameter must not be used in combination with `last`.
                /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/first`.
                public var first: Components.Parameters.pagination_hyphen_first?
                /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                /// This parameter must not be used in combination with `first`.
                /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/last`.
                public var last: Components.Parameters.pagination_hyphen_last?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///   - severity: A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///   - ecosystem: A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///   - package: A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///   - epss_percentage: CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                ///   - has: Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                ///   - scope: The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///   - sort: The property by which to sort the results.
                ///   - direction: The direction to sort the results by.
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - first: **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                ///   - last: **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states? = nil,
                    severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities? = nil,
                    ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems? = nil,
                    package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages? = nil,
                    epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss? = nil,
                    has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has? = nil,
                    scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope? = nil,
                    sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    first: Components.Parameters.pagination_hyphen_first? = nil,
                    last: Components.Parameters.pagination_hyphen_last? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.state = state
                    self.severity = severity
                    self.ecosystem = ecosystem
                    self.package = package
                    self.epss_percentage = epss_percentage
                    self.has = has
                    self.scope = scope
                    self.sort = sort
                    self.direction = direction
                    self.before = before
                    self.after = after
                    self.first = first
                    self.last = last
                    self.per_page = per_page
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.dependabot_hyphen_alert_hyphen_with_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/alerts/get(dependabot/list-alerts-for-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List organization secrets
    ///
    /// Lists all secrets available in an organization without revealing their
    /// encrypted values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/get(dependabot/list-org-secrets)`.
    public enum dependabot_sol_list_hyphen_org_hyphen_secrets {
        public static let id: Swift.String = "dependabot/list-org-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.organization_hyphen_dependabot_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.organization_hyphen_dependabot_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/get(dependabot/list-org-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_org_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/public-key/get(dependabot/get-org-public-key)`.
    public enum dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key {
        public static let id: Swift.String = "dependabot/get-org-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/public-key/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependabot_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependabot_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/public-key/get(dependabot/get-org-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_get_hyphen_org_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get an organization secret
    ///
    /// Gets a single organization secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/get(dependabot/get-org-secret)`.
    public enum dependabot_sol_get_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/get-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.organization_hyphen_dependabot_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.organization_hyphen_dependabot_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/get(dependabot/get-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_get_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update an organization secret
    ///
    /// Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)`.
    public enum dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/create-or-update-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    @frozen public enum visibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all = "all"
                        case _private = "private"
                        case selected = "selected"
                    }
                    /// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json/visibility`.
                    public var visibility: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload
                    /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.String]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    ///   - visibility: Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
                    ///   - selected_repository_ids: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil,
                        visibility: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload.visibilityPayload,
                        selected_repository_ids: [Swift.String]? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                        self.visibility = visibility
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                        case visibility
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Path,
                headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Headers = .init(),
                body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent)
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete an organization secret
    ///
    /// Deletes a secret in an organization using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/delete(dependabot/delete-org-secret)`.
    public enum dependabot_sol_delete_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/delete-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/delete(dependabot/delete-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/delete(dependabot/delete-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_delete_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List selected repositories for an organization secret
    ///
    /// Lists all repositories that have been selected when the `visibility`
    /// for repository access to a secret is set to `selected`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/get(dependabot/list-selected-repos-for-org-secret)`.
    public enum dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/list-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    page: Components.Parameters.page? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil
                ) {
                    self.page = page
                    self.per_page = per_page
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/responses/200/content/json/repositories`.
                        public var repositories: [Components.Schemas.minimal_hyphen_repository]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - repositories:
                        public init(
                            total_count: Swift.Int,
                            repositories: [Components.Schemas.minimal_hyphen_repository]
                        ) {
                            self.total_count = total_count
                            self.repositories = repositories
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case repositories
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/get(dependabot/list-selected-repos-for-org-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set selected repositories for an organization secret
    ///
    /// Replaces all repositories for an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/put(dependabot/set-selected-repos-for-org-secret)`.
    public enum dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/set-selected-repos-for-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.org = org
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/requestBody/json/selected_repository_ids`.
                    public var selected_repository_ids: [Swift.Int]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - selected_repository_ids: An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
                    public init(selected_repository_ids: [Swift.Int]) {
                        self.selected_repository_ids = selected_repository_ids
                    }
                    public enum CodingKeys: String, CodingKey {
                        case selected_repository_ids
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/PUT/requestBody/content/application\/json`.
                case json(Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Path,
                body: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/put(dependabot/set-selected-repos-for-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/put(dependabot/set-selected-repos-for-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_set_hyphen_selected_hyphen_repos_hyphen_for_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Add selected repository to an organization secret
    ///
    /// Adds a repository to an organization secret when the `visibility` for
    /// repository access is set to `selected`. The visibility is set when you [Create or
    /// update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)`.
    public enum dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/add-selected-repo-to-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/PUT/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No Content when repository was added to the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent)
            /// No Content when repository was added to the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type is not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict)
            /// Conflict when visibility type is not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/put(dependabot/add-selected-repo-to-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            public static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.dependabot_sol_add_hyphen_selected_hyphen_repo_hyphen_to_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove selected repository from an organization secret
    ///
    /// Removes a repository from an organization secret when the `visibility`
    /// for repository access is set to `selected`. The visibility is set when you [Create
    /// or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)`.
    public enum dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret {
        public static let id: Swift.String = "dependabot/remove-selected-repo-from-org-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// - Remark: Generated from `#/paths/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/DELETE/path/repository_id`.
                public var repository_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                ///   - repository_id:
                public init(
                    org: Components.Parameters.org,
                    secret_name: Components.Parameters.secret_hyphen_name,
                    repository_id: Swift.Int
                ) {
                    self.org = org
                    self.secret_name = secret_name
                    self.repository_id = repository_id
                }
            }
            public var path: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when repository was removed from the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent)
            /// Response when repository was removed from the selected list
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// Creates a new `Conflict`.
                public init() {}
            }
            /// Conflict when visibility type not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict)
            /// Conflict when visibility type not set to selected
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}/delete(dependabot/remove-selected-repo-from-org-secret)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            public static var conflict: Self {
                .conflict(.init())
            }
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.dependabot_sol_remove_hyphen_selected_hyphen_repo_hyphen_from_hyphen_org_hyphen_secret.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List Dependabot alerts for a repository
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)`.
    public enum dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo {
        public static let id: Swift.String = "dependabot/list-alerts-for-repo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///
                /// Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/state`.
                public var state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states?
                /// A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///
                /// Can be: `low`, `medium`, `high`, `critical`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/severity`.
                public var severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities?
                /// A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///
                /// Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/ecosystem`.
                public var ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems?
                /// A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/package`.
                public var package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages?
                /// A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/manifest`.
                public var manifest: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_manifests?
                /// CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                /// - An exact number (`n`)
                /// - Comparators such as `>n`, `<n`, `>=n`, `<=n`
                /// - A range like `n..n`, where `n` is a number from 0.0 to 1.0
                ///
                /// Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/epss_percentage`.
                public var epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has`.
                @frozen public enum dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/Case2Payload`.
                    @frozen public enum Case2PayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case patch = "patch"
                    }
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    public typealias Case2Payload = [Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2PayloadPayload]
                    /// - Remark: Generated from `#/components/parameters/dependabot-alert-comma-separated-has/case2`.
                    case case2(Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has.Case2Payload)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                /// Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/has`.
                public var has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-scope`.
                @frozen public enum dependabot_hyphen_alert_hyphen_scope: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case runtime = "runtime"
                }
                /// The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/scope`.
                public var scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope?
                /// - Remark: Generated from `#/components/parameters/dependabot-alert-sort`.
                @frozen public enum dependabot_hyphen_alert_hyphen_sort: String, Codable, Hashable, Sendable, CaseIterable {
                    case created = "created"
                    case updated = "updated"
                    case epss_percentage = "epss_percentage"
                }
                /// The property by which to sort the results.
                /// `created` means when the alert was created.
                /// `updated` means when the alert's state last changed.
                /// `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/sort`.
                public var sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort?
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable, CaseIterable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/page`.
                @available(*, deprecated)
                public var page: Swift.Int?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/per_page`.
                @available(*, deprecated)
                public var per_page: Swift.Int?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/before`.
                public var before: Components.Parameters.pagination_hyphen_before?
                /// A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/after`.
                public var after: Components.Parameters.pagination_hyphen_after?
                /// **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                /// This parameter must not be used in combination with `last`.
                /// Instead, use `per_page` in combination with `after` to fetch the first page of results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/first`.
                public var first: Components.Parameters.pagination_hyphen_first?
                /// **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                /// This parameter must not be used in combination with `first`.
                /// Instead, use `per_page` in combination with `before` to fetch the last page of results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/query/last`.
                public var last: Components.Parameters.pagination_hyphen_last?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - state: A comma-separated list of states. If specified, only alerts with these states will be returned.
                ///   - severity: A comma-separated list of severities. If specified, only alerts with these severities will be returned.
                ///   - ecosystem: A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
                ///   - package: A comma-separated list of package names. If specified, only alerts for these packages will be returned.
                ///   - manifest: A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
                ///   - epss_percentage: CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
                ///   - has: Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
                ///   - scope: The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
                ///   - sort: The property by which to sort the results.
                ///   - direction: The direction to sort the results by.
                ///   - page: **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - before: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - after: A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - first: **Deprecated**. The number of results per page (max 100), starting from the first matching result.
                ///   - last: **Deprecated**. The number of results per page (max 100), starting from the last matching result.
                public init(
                    state: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_states? = nil,
                    severity: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_severities? = nil,
                    ecosystem: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_ecosystems? = nil,
                    package: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_packages? = nil,
                    manifest: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_manifests? = nil,
                    epss_percentage: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_epss? = nil,
                    has: Components.Parameters.dependabot_hyphen_alert_hyphen_comma_hyphen_separated_hyphen_has? = nil,
                    scope: Components.Parameters.dependabot_hyphen_alert_hyphen_scope? = nil,
                    sort: Components.Parameters.dependabot_hyphen_alert_hyphen_sort? = nil,
                    direction: Components.Parameters.direction? = nil,
                    page: Swift.Int? = nil,
                    per_page: Swift.Int? = nil,
                    before: Components.Parameters.pagination_hyphen_before? = nil,
                    after: Components.Parameters.pagination_hyphen_after? = nil,
                    first: Components.Parameters.pagination_hyphen_first? = nil,
                    last: Components.Parameters.pagination_hyphen_last? = nil
                ) {
                    self.state = state
                    self.severity = severity
                    self.ecosystem = ecosystem
                    self.package = package
                    self.manifest = manifest
                    self.epss_percentage = epss_percentage
                    self.has = has
                    self.scope = scope
                    self.sort = sort
                    self.direction = direction
                    self.page = page
                    self.per_page = per_page
                    self.before = before
                    self.after = after
                    self.first = first
                    self.last = last
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.dependabot_hyphen_alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.dependabot_hyphen_alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_alerts_hyphen_for_hyphen_repo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/get(dependabot/list-alerts-for-repo)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// Get a Dependabot alert
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)`.
    public enum dependabot_sol_get_hyphen_alert {
        public static let id: Swift.String = "dependabot/get-alert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies a Dependabot alert in its repository.
                /// You can find this at the end of the URL for a Dependabot alert within GitHub,
                /// or in `number` fields in the response from the
                /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/path/alert_number`.
                public var alert_number: Components.Parameters.dependabot_hyphen_alert_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - alert_number: The number that identifies a Dependabot alert in its repository.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    alert_number: Components.Parameters.dependabot_hyphen_alert_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.alert_number = alert_number
                }
            }
            public var path: Operations.dependabot_sol_get_hyphen_alert.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_alert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_alert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_get_hyphen_alert.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_get_hyphen_alert.Input.Path,
                headers: Operations.dependabot_sol_get_hyphen_alert.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependabot_hyphen_alert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependabot_hyphen_alert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_get_hyphen_alert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_get_hyphen_alert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_get_hyphen_alert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_get_hyphen_alert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/get(dependabot/get-alert)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a Dependabot alert
    ///
    /// The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)`.
    public enum dependabot_sol_update_hyphen_alert {
        public static let id: Swift.String = "dependabot/update-alert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/path/repo`.
                public var repo: Components.Parameters.repo
                /// The number that identifies a Dependabot alert in its repository.
                /// You can find this at the end of the URL for a Dependabot alert within GitHub,
                /// or in `number` fields in the response from the
                /// `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/path/alert_number`.
                public var alert_number: Components.Parameters.dependabot_hyphen_alert_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - alert_number: The number that identifies a Dependabot alert in its repository.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    alert_number: Components.Parameters.dependabot_hyphen_alert_hyphen_number
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.alert_number = alert_number
                }
            }
            public var path: Operations.dependabot_sol_update_hyphen_alert.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_update_hyphen_alert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_update_hyphen_alert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_update_hyphen_alert.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The state of the Dependabot alert.
                    /// A `dismissed_reason` must be provided when setting the state to `dismissed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json/state`.
                    @frozen public enum statePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case dismissed = "dismissed"
                        case open = "open"
                    }
                    /// The state of the Dependabot alert.
                    /// A `dismissed_reason` must be provided when setting the state to `dismissed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json/state`.
                    public var state: Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.statePayload
                    /// **Required when `state` is `dismissed`.** A reason for dismissing the alert.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json/dismissed_reason`.
                    @frozen public enum dismissed_reasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case fix_started = "fix_started"
                        case inaccurate = "inaccurate"
                        case no_bandwidth = "no_bandwidth"
                        case not_used = "not_used"
                        case tolerable_risk = "tolerable_risk"
                    }
                    /// **Required when `state` is `dismissed`.** A reason for dismissing the alert.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json/dismissed_reason`.
                    public var dismissed_reason: Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.dismissed_reasonPayload?
                    /// An optional comment associated with dismissing the alert.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/json/dismissed_comment`.
                    public var dismissed_comment: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - state: The state of the Dependabot alert.
                    ///   - dismissed_reason: **Required when `state` is `dismissed`.** A reason for dismissing the alert.
                    ///   - dismissed_comment: An optional comment associated with dismissing the alert.
                    public init(
                        state: Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.statePayload,
                        dismissed_reason: Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.dismissed_reasonPayload? = nil,
                        dismissed_comment: Swift.String? = nil
                    ) {
                        self.state = state
                        self.dismissed_reason = dismissed_reason
                        self.dismissed_comment = dismissed_comment
                    }
                    public enum CodingKeys: String, CodingKey {
                        case state
                        case dismissed_reason
                        case dismissed_comment
                    }
                    public init(from decoder: any Decoder) throws {
                        let container = try decoder.container(keyedBy: CodingKeys.self)
                        self.state = try container.decode(
                            Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.statePayload.self,
                            forKey: .state
                        )
                        self.dismissed_reason = try container.decodeIfPresent(
                            Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload.dismissed_reasonPayload.self,
                            forKey: .dismissed_reason
                        )
                        self.dismissed_comment = try container.decodeIfPresent(
                            Swift.String.self,
                            forKey: .dismissed_comment
                        )
                        try decoder.ensureNoAdditionalProperties(knownKeys: [
                            "state",
                            "dismissed_reason",
                            "dismissed_comment"
                        ])
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.dependabot_sol_update_hyphen_alert.Input.Body.jsonPayload)
            }
            public var body: Operations.dependabot_sol_update_hyphen_alert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.dependabot_sol_update_hyphen_alert.Input.Path,
                headers: Operations.dependabot_sol_update_hyphen_alert.Input.Headers = .init(),
                body: Operations.dependabot_sol_update_hyphen_alert.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/alerts/{alert_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependabot_hyphen_alert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependabot_hyphen_alert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_update_hyphen_alert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_update_hyphen_alert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_update_hyphen_alert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_update_hyphen_alert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.bad_request)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.bad_request {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Components.Responses.conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/alerts/{alert_number}/patch(dependabot/update-alert)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed_simple)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed_simple {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_scim_plus_json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .application_scim_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_scim_plus_json:
                    return "application/scim+json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .application_scim_plus_json
                ]
            }
        }
    }
    /// List repository secrets
    ///
    /// Lists all secrets available in a repository without revealing their encrypted
    /// values.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/get(dependabot/list-repo-secrets)`.
    public enum dependabot_sol_list_hyphen_repo_hyphen_secrets {
        public static let id: Swift.String = "dependabot/list-repo-secrets"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Path,
                query: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Query = .init(),
                headers: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/content/json/secrets`.
                        public var secrets: [Components.Schemas.dependabot_hyphen_secret]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - secrets:
                        public init(
                            total_count: Swift.Int,
                            secrets: [Components.Schemas.dependabot_hyphen_secret]
                        ) {
                            self.total_count = total_count
                            self.secrets = secrets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case secrets
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/GET/responses/200/content/application\/json`.
                    case json(Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Headers = .init(),
                    body: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/get(dependabot/list-repo-secrets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_list_hyphen_repo_hyphen_secrets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository public key
    ///
    /// Gets your public key, which you need to encrypt secrets. You need to
    /// encrypt a secret before you can create or update secrets. Anyone with read access
    /// to the repository can use this endpoint.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/public-key`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/public-key/get(dependabot/get-repo-public-key)`.
    public enum dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key {
        public static let id: Swift.String = "dependabot/get-repo-public-key"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Path,
                headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/public-key/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependabot_hyphen_public_hyphen_key)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependabot_hyphen_public_hyphen_key {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/public-key/get(dependabot/get-repo-public-key)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_get_hyphen_repo_hyphen_public_hyphen_key.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a repository secret
    ///
    /// Gets a single repository secret without revealing its encrypted value.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/get(dependabot/get-repo-secret)`.
    public enum dependabot_sol_get_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "dependabot/get-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.dependabot_hyphen_secret)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.dependabot_hyphen_secret {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/get(dependabot/get-repo-secret)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dependabot_sol_get_hyphen_repo_hyphen_secret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create or update a repository secret
    ///
    /// Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    /// [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)`.
    public enum dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "dependabot/create-or-update-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/requestBody/json/encrypted_value`.
                    public var encrypted_value: Swift.String?
                    /// ID of the key you used to encrypt the secret.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/requestBody/json/key_id`.
                    public var key_id: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - encrypted_value: Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
                    ///   - key_id: ID of the key you used to encrypt the secret.
                    public init(
                        encrypted_value: Swift.String? = nil,
                        key_id: Swift.String? = nil
                    ) {
                        self.encrypted_value = encrypted_value
                        self.key_id = key_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case encrypted_value
                        case key_id
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/requestBody/content/application\/json`.
                case json(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body.jsonPayload)
            }
            public var body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Path,
                headers: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Headers = .init(),
                body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.empty_hyphen_object)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.empty_hyphen_object {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response when creating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent)
            /// Response when updating a secret
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/put(dependabot/create-or-update-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_create_hyphen_or_hyphen_update_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a repository secret
    ///
    /// Deletes a secret in a repository using the secret name.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/delete(dependabot/delete-repo-secret)`.
    public enum dependabot_sol_delete_hyphen_repo_hyphen_secret {
        public static let id: Swift.String = "dependabot/delete-repo-secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// The name of the secret.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/dependabot/secrets/{secret_name}/DELETE/path/secret_name`.
                public var secret_name: Components.Parameters.secret_hyphen_name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - secret_name: The name of the secret.
                public init(
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo,
                    secret_name: Components.Parameters.secret_hyphen_name
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.secret_name = secret_name
                }
            }
            public var path: Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/delete(dependabot/delete-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/dependabot/secrets/{secret_name}/delete(dependabot/delete-repo-secret)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.dependabot_sol_delete_hyphen_repo_hyphen_secret.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
