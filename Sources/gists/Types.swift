// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List gists for the authenticated user
    ///
    /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
    ///
    /// - Remark: HTTP `GET /gists`.
    /// - Remark: Generated from `#/paths//gists/get(gists/list)`.
    func gists_sol_list(_ input: Operations.gists_sol_list.Input) async throws -> Operations.gists_sol_list.Output
    /// Create a gist
    ///
    /// Allows you to add a new gist with one or more files.
    ///
    /// **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    ///
    /// - Remark: HTTP `POST /gists`.
    /// - Remark: Generated from `#/paths//gists/post(gists/create)`.
    func gists_sol_create(_ input: Operations.gists_sol_create.Input) async throws -> Operations.gists_sol_create.Output
    /// List public gists
    ///
    /// List public gists sorted by most recently updated to least recently updated.
    ///
    /// Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    ///
    /// - Remark: HTTP `GET /gists/public`.
    /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)`.
    func gists_sol_list_hyphen_public(_ input: Operations.gists_sol_list_hyphen_public.Input) async throws -> Operations.gists_sol_list_hyphen_public.Output
    /// List starred gists
    ///
    /// List the authenticated user's starred gists:
    ///
    /// - Remark: HTTP `GET /gists/starred`.
    /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)`.
    func gists_sol_list_hyphen_starred(_ input: Operations.gists_sol_list_hyphen_starred.Input) async throws -> Operations.gists_sol_list_hyphen_starred.Output
    /// Get a gist
    ///
    /// Gets a specified gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)`.
    func gists_sol_get(_ input: Operations.gists_sol_get.Input) async throws -> Operations.gists_sol_get.Output
    /// Update a gist
    ///
    /// Allows you to update a gist's description and to update, delete, or rename gist files. Files
    /// from the previous version of the gist that aren't explicitly changed during an edit
    /// are unchanged.
    ///
    /// At least one of `description` or `files` is required.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)`.
    func gists_sol_update(_ input: Operations.gists_sol_update.Input) async throws -> Operations.gists_sol_update.Output
    /// Delete a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)`.
    func gists_sol_delete(_ input: Operations.gists_sol_delete.Input) async throws -> Operations.gists_sol_delete.Output
    /// List gist comments
    ///
    /// Lists the comments on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)`.
    func gists_sol_list_hyphen_comments(_ input: Operations.gists_sol_list_hyphen_comments.Input) async throws -> Operations.gists_sol_list_hyphen_comments.Output
    /// Create a gist comment
    ///
    /// Creates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)`.
    func gists_sol_create_hyphen_comment(_ input: Operations.gists_sol_create_hyphen_comment.Input) async throws -> Operations.gists_sol_create_hyphen_comment.Output
    /// Get a gist comment
    ///
    /// Gets a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)`.
    func gists_sol_get_hyphen_comment(_ input: Operations.gists_sol_get_hyphen_comment.Input) async throws -> Operations.gists_sol_get_hyphen_comment.Output
    /// Update a gist comment
    ///
    /// Updates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/patch(gists/update-comment)`.
    func gists_sol_update_hyphen_comment(_ input: Operations.gists_sol_update_hyphen_comment.Input) async throws -> Operations.gists_sol_update_hyphen_comment.Output
    /// Delete a gist comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)`.
    func gists_sol_delete_hyphen_comment(_ input: Operations.gists_sol_delete_hyphen_comment.Input) async throws -> Operations.gists_sol_delete_hyphen_comment.Output
    /// List gist commits
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/commits`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)`.
    func gists_sol_list_hyphen_commits(_ input: Operations.gists_sol_list_hyphen_commits.Input) async throws -> Operations.gists_sol_list_hyphen_commits.Output
    /// List gist forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)`.
    func gists_sol_list_hyphen_forks(_ input: Operations.gists_sol_list_hyphen_forks.Input) async throws -> Operations.gists_sol_list_hyphen_forks.Output
    /// Fork a gist
    ///
    ///
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)`.
    func gists_sol_fork(_ input: Operations.gists_sol_fork.Input) async throws -> Operations.gists_sol_fork.Output
    /// Check if a gist is starred
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)`.
    func gists_sol_check_hyphen_is_hyphen_starred(_ input: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input) async throws -> Operations.gists_sol_check_hyphen_is_hyphen_starred.Output
    /// Star a gist
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)`.
    func gists_sol_star(_ input: Operations.gists_sol_star.Input) async throws -> Operations.gists_sol_star.Output
    /// Unstar a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)`.
    func gists_sol_unstar(_ input: Operations.gists_sol_unstar.Input) async throws -> Operations.gists_sol_unstar.Output
    /// Get a gist revision
    ///
    /// Gets a specified gist revision.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/{sha}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)`.
    func gists_sol_get_hyphen_revision(_ input: Operations.gists_sol_get_hyphen_revision.Input) async throws -> Operations.gists_sol_get_hyphen_revision.Output
    /// List gists for a user
    ///
    /// Lists public gists for the specified user:
    ///
    /// - Remark: HTTP `GET /users/{username}/gists`.
    /// - Remark: Generated from `#/paths//users/{username}/gists/get(gists/list-for-user)`.
    func gists_sol_list_hyphen_for_hyphen_user(_ input: Operations.gists_sol_list_hyphen_for_hyphen_user.Input) async throws -> Operations.gists_sol_list_hyphen_for_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List gists for the authenticated user
    ///
    /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
    ///
    /// - Remark: HTTP `GET /gists`.
    /// - Remark: Generated from `#/paths//gists/get(gists/list)`.
    public func gists_sol_list(
        query: Operations.gists_sol_list.Input.Query = .init(),
        headers: Operations.gists_sol_list.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list.Output {
        try await gists_sol_list(Operations.gists_sol_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a gist
    ///
    /// Allows you to add a new gist with one or more files.
    ///
    /// **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    ///
    /// - Remark: HTTP `POST /gists`.
    /// - Remark: Generated from `#/paths//gists/post(gists/create)`.
    public func gists_sol_create(
        headers: Operations.gists_sol_create.Input.Headers = .init(),
        body: Operations.gists_sol_create.Input.Body
    ) async throws -> Operations.gists_sol_create.Output {
        try await gists_sol_create(Operations.gists_sol_create.Input(
            headers: headers,
            body: body
        ))
    }
    /// List public gists
    ///
    /// List public gists sorted by most recently updated to least recently updated.
    ///
    /// Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    ///
    /// - Remark: HTTP `GET /gists/public`.
    /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)`.
    public func gists_sol_list_hyphen_public(
        query: Operations.gists_sol_list_hyphen_public.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_public.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_public.Output {
        try await gists_sol_list_hyphen_public(Operations.gists_sol_list_hyphen_public.Input(
            query: query,
            headers: headers
        ))
    }
    /// List starred gists
    ///
    /// List the authenticated user's starred gists:
    ///
    /// - Remark: HTTP `GET /gists/starred`.
    /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)`.
    public func gists_sol_list_hyphen_starred(
        query: Operations.gists_sol_list_hyphen_starred.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_starred.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_starred.Output {
        try await gists_sol_list_hyphen_starred(Operations.gists_sol_list_hyphen_starred.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get a gist
    ///
    /// Gets a specified gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)`.
    public func gists_sol_get(
        path: Operations.gists_sol_get.Input.Path,
        headers: Operations.gists_sol_get.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_get.Output {
        try await gists_sol_get(Operations.gists_sol_get.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a gist
    ///
    /// Allows you to update a gist's description and to update, delete, or rename gist files. Files
    /// from the previous version of the gist that aren't explicitly changed during an edit
    /// are unchanged.
    ///
    /// At least one of `description` or `files` is required.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)`.
    public func gists_sol_update(
        path: Operations.gists_sol_update.Input.Path,
        headers: Operations.gists_sol_update.Input.Headers = .init(),
        body: Operations.gists_sol_update.Input.Body
    ) async throws -> Operations.gists_sol_update.Output {
        try await gists_sol_update(Operations.gists_sol_update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)`.
    public func gists_sol_delete(
        path: Operations.gists_sol_delete.Input.Path,
        headers: Operations.gists_sol_delete.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_delete.Output {
        try await gists_sol_delete(Operations.gists_sol_delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// List gist comments
    ///
    /// Lists the comments on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)`.
    public func gists_sol_list_hyphen_comments(
        path: Operations.gists_sol_list_hyphen_comments.Input.Path,
        query: Operations.gists_sol_list_hyphen_comments.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_comments.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_comments.Output {
        try await gists_sol_list_hyphen_comments(Operations.gists_sol_list_hyphen_comments.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a gist comment
    ///
    /// Creates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)`.
    public func gists_sol_create_hyphen_comment(
        path: Operations.gists_sol_create_hyphen_comment.Input.Path,
        headers: Operations.gists_sol_create_hyphen_comment.Input.Headers = .init(),
        body: Operations.gists_sol_create_hyphen_comment.Input.Body
    ) async throws -> Operations.gists_sol_create_hyphen_comment.Output {
        try await gists_sol_create_hyphen_comment(Operations.gists_sol_create_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a gist comment
    ///
    /// Gets a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)`.
    public func gists_sol_get_hyphen_comment(
        path: Operations.gists_sol_get_hyphen_comment.Input.Path,
        headers: Operations.gists_sol_get_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_get_hyphen_comment.Output {
        try await gists_sol_get_hyphen_comment(Operations.gists_sol_get_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a gist comment
    ///
    /// Updates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/patch(gists/update-comment)`.
    public func gists_sol_update_hyphen_comment(
        path: Operations.gists_sol_update_hyphen_comment.Input.Path,
        headers: Operations.gists_sol_update_hyphen_comment.Input.Headers = .init(),
        body: Operations.gists_sol_update_hyphen_comment.Input.Body
    ) async throws -> Operations.gists_sol_update_hyphen_comment.Output {
        try await gists_sol_update_hyphen_comment(Operations.gists_sol_update_hyphen_comment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a gist comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)`.
    public func gists_sol_delete_hyphen_comment(
        path: Operations.gists_sol_delete_hyphen_comment.Input.Path,
        headers: Operations.gists_sol_delete_hyphen_comment.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_delete_hyphen_comment.Output {
        try await gists_sol_delete_hyphen_comment(Operations.gists_sol_delete_hyphen_comment.Input(
            path: path,
            headers: headers
        ))
    }
    /// List gist commits
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/commits`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)`.
    public func gists_sol_list_hyphen_commits(
        path: Operations.gists_sol_list_hyphen_commits.Input.Path,
        query: Operations.gists_sol_list_hyphen_commits.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_commits.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_commits.Output {
        try await gists_sol_list_hyphen_commits(Operations.gists_sol_list_hyphen_commits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List gist forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)`.
    public func gists_sol_list_hyphen_forks(
        path: Operations.gists_sol_list_hyphen_forks.Input.Path,
        query: Operations.gists_sol_list_hyphen_forks.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_forks.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_forks.Output {
        try await gists_sol_list_hyphen_forks(Operations.gists_sol_list_hyphen_forks.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Fork a gist
    ///
    ///
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)`.
    public func gists_sol_fork(
        path: Operations.gists_sol_fork.Input.Path,
        headers: Operations.gists_sol_fork.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_fork.Output {
        try await gists_sol_fork(Operations.gists_sol_fork.Input(
            path: path,
            headers: headers
        ))
    }
    /// Check if a gist is starred
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)`.
    public func gists_sol_check_hyphen_is_hyphen_starred(
        path: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Path,
        headers: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_check_hyphen_is_hyphen_starred.Output {
        try await gists_sol_check_hyphen_is_hyphen_starred(Operations.gists_sol_check_hyphen_is_hyphen_starred.Input(
            path: path,
            headers: headers
        ))
    }
    /// Star a gist
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)`.
    public func gists_sol_star(
        path: Operations.gists_sol_star.Input.Path,
        headers: Operations.gists_sol_star.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_star.Output {
        try await gists_sol_star(Operations.gists_sol_star.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unstar a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)`.
    public func gists_sol_unstar(
        path: Operations.gists_sol_unstar.Input.Path,
        headers: Operations.gists_sol_unstar.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_unstar.Output {
        try await gists_sol_unstar(Operations.gists_sol_unstar.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a gist revision
    ///
    /// Gets a specified gist revision.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/{sha}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)`.
    public func gists_sol_get_hyphen_revision(
        path: Operations.gists_sol_get_hyphen_revision.Input.Path,
        headers: Operations.gists_sol_get_hyphen_revision.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_get_hyphen_revision.Output {
        try await gists_sol_get_hyphen_revision(Operations.gists_sol_get_hyphen_revision.Input(
            path: path,
            headers: headers
        ))
    }
    /// List gists for a user
    ///
    /// Lists public gists for the specified user:
    ///
    /// - Remark: HTTP `GET /users/{username}/gists`.
    /// - Remark: Generated from `#/paths//users/{username}/gists/get(gists/list-for-user)`.
    public func gists_sol_list_hyphen_for_hyphen_user(
        path: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Path,
        query: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
        headers: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.gists_sol_list_hyphen_for_hyphen_user.Output {
        try await gists_sol_list_hyphen_for_hyphen_user(Operations.gists_sol_list_hyphen_for_hyphen_user.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// Base Gist
        ///
        /// - Remark: Generated from `#/components/schemas/base-gist`.
        public struct base_hyphen_gist: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/base-gist/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/git_pull_url`.
            public var git_pull_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/git_push_url`.
            public var git_push_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/files`.
            public struct filesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties`.
                public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties/filename`.
                    public var filename: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties/raw_url`.
                    public var raw_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/base-gist/files/additionalProperties/size`.
                    public var size: Swift.Int?
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - filename:
                    ///   - _type:
                    ///   - language:
                    ///   - raw_url:
                    ///   - size:
                    public init(
                        filename: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        language: Swift.String? = nil,
                        raw_url: Swift.String? = nil,
                        size: Swift.Int? = nil
                    ) {
                        self.filename = filename
                        self._type = _type
                        self.language = language
                        self.raw_url = raw_url
                        self.size = size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case filename
                        case _type = "type"
                        case language
                        case raw_url
                        case size
                    }
                }
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.base_hyphen_gist.filesPayload.additionalPropertiesPayload]
                /// Creates a new `filesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.base_hyphen_gist.filesPayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/base-gist/files`.
            public var files: Components.Schemas.base_hyphen_gist.filesPayload
            /// - Remark: Generated from `#/components/schemas/base-gist/public`.
            public var _public: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/base-gist/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/base-gist/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/base-gist/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/base-gist/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/base-gist/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/base-gist/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/base-gist/owner`.
            public var owner: Components.Schemas.simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/base-gist/truncated`.
            public var truncated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/base-gist/forks`.
            public var forks: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// - Remark: Generated from `#/components/schemas/base-gist/history`.
            public var history: [OpenAPIRuntime.OpenAPIValueContainer]?
            /// Creates a new `base_hyphen_gist`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - forks_url:
            ///   - commits_url:
            ///   - id:
            ///   - node_id:
            ///   - git_pull_url:
            ///   - git_push_url:
            ///   - html_url:
            ///   - files:
            ///   - _public:
            ///   - created_at:
            ///   - updated_at:
            ///   - description:
            ///   - comments:
            ///   - user:
            ///   - comments_url:
            ///   - owner:
            ///   - truncated:
            ///   - forks:
            ///   - history:
            public init(
                url: Swift.String,
                forks_url: Swift.String,
                commits_url: Swift.String,
                id: Swift.String,
                node_id: Swift.String,
                git_pull_url: Swift.String,
                git_push_url: Swift.String,
                html_url: Swift.String,
                files: Components.Schemas.base_hyphen_gist.filesPayload,
                _public: Swift.Bool,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                description: Swift.String? = nil,
                comments: Swift.Int,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                comments_url: Swift.String,
                owner: Components.Schemas.simple_hyphen_user? = nil,
                truncated: Swift.Bool? = nil,
                forks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                history: [OpenAPIRuntime.OpenAPIValueContainer]? = nil
            ) {
                self.url = url
                self.forks_url = forks_url
                self.commits_url = commits_url
                self.id = id
                self.node_id = node_id
                self.git_pull_url = git_pull_url
                self.git_push_url = git_push_url
                self.html_url = html_url
                self.files = files
                self._public = _public
                self.created_at = created_at
                self.updated_at = updated_at
                self.description = description
                self.comments = comments
                self.user = user
                self.comments_url = comments_url
                self.owner = owner
                self.truncated = truncated
                self.forks = forks
                self.history = history
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case forks_url
                case commits_url
                case id
                case node_id
                case git_pull_url
                case git_push_url
                case html_url
                case files
                case _public = "public"
                case created_at
                case updated_at
                case description
                case comments
                case user
                case comments_url
                case owner
                case truncated
                case forks
                case history
            }
        }
        /// Public User
        ///
        /// - Remark: Generated from `#/components/schemas/public-user`.
        public struct public_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/public-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/public-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/notification_email`.
            public var notification_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/hireable`.
            public var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/public-user/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/public-user/plan/collaborators`.
                public var collaborators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/public-user/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/private_repos`.
                public var private_repos: Swift.Int
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - collaborators:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                public init(
                    collaborators: Swift.Int,
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int
                ) {
                    self.collaborators = collaborators
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                }
                public enum CodingKeys: String, CodingKey {
                    case collaborators
                    case name
                    case space
                    case private_repos
                }
            }
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            public var plan: Components.Schemas.public_hyphen_user.planPayload?
            /// - Remark: Generated from `#/components/schemas/public-user/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/public-user/private_gists`.
            public var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/total_private_repos`.
            public var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/owned_private_repos`.
            public var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/disk_usage`.
            public var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/collaborators`.
            public var collaborators: Swift.Int?
            /// Creates a new `public_hyphen_user`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - notification_email:
            ///   - hireable:
            ///   - bio:
            ///   - twitter_username:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - created_at:
            ///   - updated_at:
            ///   - plan:
            ///   - suspended_at:
            ///   - private_gists:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - disk_usage:
            ///   - collaborators:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                notification_email: Swift.String? = nil,
                hireable: Swift.Bool? = nil,
                bio: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                plan: Components.Schemas.public_hyphen_user.planPayload? = nil,
                suspended_at: Foundation.Date? = nil,
                private_gists: Swift.Int? = nil,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.notification_email = notification_email
                self.hireable = hireable
                self.bio = bio
                self.twitter_username = twitter_username
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.created_at = created_at
                self.updated_at = updated_at
                self.plan = plan
                self.suspended_at = suspended_at
                self.private_gists = private_gists
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.disk_usage = disk_usage
                self.collaborators = collaborators
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case name
                case company
                case blog
                case location
                case email
                case notification_email
                case hireable
                case bio
                case twitter_username
                case public_repos
                case public_gists
                case followers
                case following
                case created_at
                case updated_at
                case plan
                case suspended_at
                case private_gists
                case total_private_repos
                case owned_private_repos
                case disk_usage
                case collaborators
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                login = try container.decode(
                    Swift.String.self,
                    forKey: .login
                )
                id = try container.decode(
                    Swift.Int.self,
                    forKey: .id
                )
                node_id = try container.decode(
                    Swift.String.self,
                    forKey: .node_id
                )
                avatar_url = try container.decode(
                    Swift.String.self,
                    forKey: .avatar_url
                )
                gravatar_id = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .gravatar_id
                )
                url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                html_url = try container.decode(
                    Swift.String.self,
                    forKey: .html_url
                )
                followers_url = try container.decode(
                    Swift.String.self,
                    forKey: .followers_url
                )
                following_url = try container.decode(
                    Swift.String.self,
                    forKey: .following_url
                )
                gists_url = try container.decode(
                    Swift.String.self,
                    forKey: .gists_url
                )
                starred_url = try container.decode(
                    Swift.String.self,
                    forKey: .starred_url
                )
                subscriptions_url = try container.decode(
                    Swift.String.self,
                    forKey: .subscriptions_url
                )
                organizations_url = try container.decode(
                    Swift.String.self,
                    forKey: .organizations_url
                )
                repos_url = try container.decode(
                    Swift.String.self,
                    forKey: .repos_url
                )
                events_url = try container.decode(
                    Swift.String.self,
                    forKey: .events_url
                )
                received_events_url = try container.decode(
                    Swift.String.self,
                    forKey: .received_events_url
                )
                _type = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                site_admin = try container.decode(
                    Swift.Bool.self,
                    forKey: .site_admin
                )
                name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                company = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .company
                )
                blog = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .blog
                )
                location = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .location
                )
                email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .email
                )
                notification_email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .notification_email
                )
                hireable = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hireable
                )
                bio = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .bio
                )
                twitter_username = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .twitter_username
                )
                public_repos = try container.decode(
                    Swift.Int.self,
                    forKey: .public_repos
                )
                public_gists = try container.decode(
                    Swift.Int.self,
                    forKey: .public_gists
                )
                followers = try container.decode(
                    Swift.Int.self,
                    forKey: .followers
                )
                following = try container.decode(
                    Swift.Int.self,
                    forKey: .following
                )
                created_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .created_at
                )
                updated_at = try container.decode(
                    Foundation.Date.self,
                    forKey: .updated_at
                )
                plan = try container.decodeIfPresent(
                    Components.Schemas.public_hyphen_user.planPayload.self,
                    forKey: .plan
                )
                suspended_at = try container.decodeIfPresent(
                    Foundation.Date.self,
                    forKey: .suspended_at
                )
                private_gists = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .private_gists
                )
                total_private_repos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .total_private_repos
                )
                owned_private_repos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .owned_private_repos
                )
                disk_usage = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .disk_usage
                )
                collaborators = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .collaborators
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "login",
                    "id",
                    "node_id",
                    "avatar_url",
                    "gravatar_id",
                    "url",
                    "html_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "starred_url",
                    "subscriptions_url",
                    "organizations_url",
                    "repos_url",
                    "events_url",
                    "received_events_url",
                    "type",
                    "site_admin",
                    "name",
                    "company",
                    "blog",
                    "location",
                    "email",
                    "notification_email",
                    "hireable",
                    "bio",
                    "twitter_username",
                    "public_repos",
                    "public_gists",
                    "followers",
                    "following",
                    "created_at",
                    "updated_at",
                    "plan",
                    "suspended_at",
                    "private_gists",
                    "total_private_repos",
                    "owned_private_repos",
                    "disk_usage",
                    "collaborators"
                ])
            }
        }
        /// Gist History
        ///
        /// - Remark: Generated from `#/components/schemas/gist-history`.
        public struct gist_hyphen_history: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gist-history/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/gist-history/version`.
            public var version: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-history/committed_at`.
            public var committed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/gist-history/change_status`.
            public struct change_statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gist-history/change_status/total`.
                public var total: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gist-history/change_status/additions`.
                public var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gist-history/change_status/deletions`.
                public var deletions: Swift.Int?
                /// Creates a new `change_statusPayload`.
                ///
                /// - Parameters:
                ///   - total:
                ///   - additions:
                ///   - deletions:
                public init(
                    total: Swift.Int? = nil,
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil
                ) {
                    self.total = total
                    self.additions = additions
                    self.deletions = deletions
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case additions
                    case deletions
                }
            }
            /// - Remark: Generated from `#/components/schemas/gist-history/change_status`.
            public var change_status: Components.Schemas.gist_hyphen_history.change_statusPayload?
            /// - Remark: Generated from `#/components/schemas/gist-history/url`.
            public var url: Swift.String?
            /// Creates a new `gist_hyphen_history`.
            ///
            /// - Parameters:
            ///   - user:
            ///   - version:
            ///   - committed_at:
            ///   - change_status:
            ///   - url:
            public init(
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                version: Swift.String? = nil,
                committed_at: Foundation.Date? = nil,
                change_status: Components.Schemas.gist_hyphen_history.change_statusPayload? = nil,
                url: Swift.String? = nil
            ) {
                self.user = user
                self.version = version
                self.committed_at = committed_at
                self.change_status = change_status
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case user
                case version
                case committed_at
                case change_status
                case url
            }
        }
        /// Gist Simple
        ///
        /// - Remark: Generated from `#/components/schemas/gist-simple`.
        public struct gist_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload`.
            public struct forksPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload/user`.
                public var user: Components.Schemas.public_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload/created_at`.
                public var created_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/gist-simple/forksPayload/updated_at`.
                public var updated_at: Foundation.Date?
                /// Creates a new `forksPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - url:
                ///   - user:
                ///   - created_at:
                ///   - updated_at:
                public init(
                    id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    user: Components.Schemas.public_hyphen_user? = nil,
                    created_at: Foundation.Date? = nil,
                    updated_at: Foundation.Date? = nil
                ) {
                    self.id = id
                    self.url = url
                    self.user = user
                    self.created_at = created_at
                    self.updated_at = updated_at
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case url
                    case user
                    case created_at
                    case updated_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/gist-simple/forks`.
            public typealias forksPayload = [Components.Schemas.gist_hyphen_simple.forksPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/gist-simple/forks`.
            @available(*, deprecated)
            public var forks: Components.Schemas.gist_hyphen_simple.forksPayload?
            /// - Remark: Generated from `#/components/schemas/gist-simple/history`.
            @available(*, deprecated)
            public var history: [Components.Schemas.gist_hyphen_history]?
            /// Gist
            ///
            /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of`.
            public struct fork_ofPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/forks_url`.
                public var forks_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/commits_url`.
                public var commits_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/node_id`.
                public var node_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/git_pull_url`.
                public var git_pull_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/git_push_url`.
                public var git_push_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/html_url`.
                public var html_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files`.
                public struct filesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties`.
                    public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties/filename`.
                        public var filename: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties/type`.
                        public var _type: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties/language`.
                        public var language: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties/raw_url`.
                        public var raw_url: Swift.String?
                        /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files/additionalProperties/size`.
                        public var size: Swift.Int?
                        /// Creates a new `additionalPropertiesPayload`.
                        ///
                        /// - Parameters:
                        ///   - filename:
                        ///   - _type:
                        ///   - language:
                        ///   - raw_url:
                        ///   - size:
                        public init(
                            filename: Swift.String? = nil,
                            _type: Swift.String? = nil,
                            language: Swift.String? = nil,
                            raw_url: Swift.String? = nil,
                            size: Swift.Int? = nil
                        ) {
                            self.filename = filename
                            self._type = _type
                            self.language = language
                            self.raw_url = raw_url
                            self.size = size
                        }
                        public enum CodingKeys: String, CodingKey {
                            case filename
                            case _type = "type"
                            case language
                            case raw_url
                            case size
                        }
                    }
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Components.Schemas.gist_hyphen_simple.fork_ofPayload.filesPayload.additionalPropertiesPayload]
                    /// Creates a new `filesPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Components.Schemas.gist_hyphen_simple.fork_ofPayload.filesPayload.additionalPropertiesPayload] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/files`.
                public var files: Components.Schemas.gist_hyphen_simple.fork_ofPayload.filesPayload
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/public`.
                public var _public: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/created_at`.
                public var created_at: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/updated_at`.
                public var updated_at: Foundation.Date
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/comments`.
                public var comments: Swift.Int
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/user`.
                public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/comments_url`.
                public var comments_url: Swift.String
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/owner`.
                public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/truncated`.
                public var truncated: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/forks`.
                public var forks: [OpenAPIRuntime.OpenAPIValueContainer]?
                /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of/history`.
                public var history: [OpenAPIRuntime.OpenAPIValueContainer]?
                /// Creates a new `fork_ofPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - forks_url:
                ///   - commits_url:
                ///   - id:
                ///   - node_id:
                ///   - git_pull_url:
                ///   - git_push_url:
                ///   - html_url:
                ///   - files:
                ///   - _public:
                ///   - created_at:
                ///   - updated_at:
                ///   - description:
                ///   - comments:
                ///   - user:
                ///   - comments_url:
                ///   - owner:
                ///   - truncated:
                ///   - forks:
                ///   - history:
                public init(
                    url: Swift.String,
                    forks_url: Swift.String,
                    commits_url: Swift.String,
                    id: Swift.String,
                    node_id: Swift.String,
                    git_pull_url: Swift.String,
                    git_push_url: Swift.String,
                    html_url: Swift.String,
                    files: Components.Schemas.gist_hyphen_simple.fork_ofPayload.filesPayload,
                    _public: Swift.Bool,
                    created_at: Foundation.Date,
                    updated_at: Foundation.Date,
                    description: Swift.String? = nil,
                    comments: Swift.Int,
                    user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                    comments_url: Swift.String,
                    owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                    truncated: Swift.Bool? = nil,
                    forks: [OpenAPIRuntime.OpenAPIValueContainer]? = nil,
                    history: [OpenAPIRuntime.OpenAPIValueContainer]? = nil
                ) {
                    self.url = url
                    self.forks_url = forks_url
                    self.commits_url = commits_url
                    self.id = id
                    self.node_id = node_id
                    self.git_pull_url = git_pull_url
                    self.git_push_url = git_push_url
                    self.html_url = html_url
                    self.files = files
                    self._public = _public
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.description = description
                    self.comments = comments
                    self.user = user
                    self.comments_url = comments_url
                    self.owner = owner
                    self.truncated = truncated
                    self.forks = forks
                    self.history = history
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case forks_url
                    case commits_url
                    case id
                    case node_id
                    case git_pull_url
                    case git_push_url
                    case html_url
                    case files
                    case _public = "public"
                    case created_at
                    case updated_at
                    case description
                    case comments
                    case user
                    case comments_url
                    case owner
                    case truncated
                    case forks
                    case history
                }
            }
            /// Gist
            ///
            /// - Remark: Generated from `#/components/schemas/gist-simple/fork_of`.
            public var fork_of: Components.Schemas.gist_hyphen_simple.fork_ofPayload?
            /// - Remark: Generated from `#/components/schemas/gist-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/forks_url`.
            public var forks_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/commits_url`.
            public var commits_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/node_id`.
            public var node_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/git_pull_url`.
            public var git_pull_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/git_push_url`.
            public var git_push_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/html_url`.
            public var html_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/files`.
            public struct filesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties`.
                public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/filename`.
                    public var filename: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/language`.
                    public var language: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/raw_url`.
                    public var raw_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/size`.
                    public var size: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/truncated`.
                    public var truncated: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/gist-simple/files/additionalProperties/content`.
                    public var content: Swift.String?
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - filename:
                    ///   - _type:
                    ///   - language:
                    ///   - raw_url:
                    ///   - size:
                    ///   - truncated:
                    ///   - content:
                    public init(
                        filename: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        language: Swift.String? = nil,
                        raw_url: Swift.String? = nil,
                        size: Swift.Int? = nil,
                        truncated: Swift.Bool? = nil,
                        content: Swift.String? = nil
                    ) {
                        self.filename = filename
                        self._type = _type
                        self.language = language
                        self.raw_url = raw_url
                        self.size = size
                        self.truncated = truncated
                        self.content = content
                    }
                    public enum CodingKeys: String, CodingKey {
                        case filename
                        case _type = "type"
                        case language
                        case raw_url
                        case size
                        case truncated
                        case content
                    }
                }
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.gist_hyphen_simple.filesPayload.additionalPropertiesPayload?]
                /// Creates a new `filesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.gist_hyphen_simple.filesPayload.additionalPropertiesPayload?] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/gist-simple/files`.
            public var files: Components.Schemas.gist_hyphen_simple.filesPayload?
            /// - Remark: Generated from `#/components/schemas/gist-simple/public`.
            public var _public: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/gist-simple/created_at`.
            public var created_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/updated_at`.
            public var updated_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/comments`.
            public var comments: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/gist-simple/user`.
            public var user: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/comments_url`.
            public var comments_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/gist-simple/owner`.
            public var owner: Components.Schemas.simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/gist-simple/truncated`.
            public var truncated: Swift.Bool?
            /// Creates a new `gist_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - forks:
            ///   - history:
            ///   - fork_of: Gist
            ///   - url:
            ///   - forks_url:
            ///   - commits_url:
            ///   - id:
            ///   - node_id:
            ///   - git_pull_url:
            ///   - git_push_url:
            ///   - html_url:
            ///   - files:
            ///   - _public:
            ///   - created_at:
            ///   - updated_at:
            ///   - description:
            ///   - comments:
            ///   - user:
            ///   - comments_url:
            ///   - owner:
            ///   - truncated:
            public init(
                forks: Components.Schemas.gist_hyphen_simple.forksPayload? = nil,
                history: [Components.Schemas.gist_hyphen_history]? = nil,
                fork_of: Components.Schemas.gist_hyphen_simple.fork_ofPayload? = nil,
                url: Swift.String? = nil,
                forks_url: Swift.String? = nil,
                commits_url: Swift.String? = nil,
                id: Swift.String? = nil,
                node_id: Swift.String? = nil,
                git_pull_url: Swift.String? = nil,
                git_push_url: Swift.String? = nil,
                html_url: Swift.String? = nil,
                files: Components.Schemas.gist_hyphen_simple.filesPayload? = nil,
                _public: Swift.Bool? = nil,
                created_at: Swift.String? = nil,
                updated_at: Swift.String? = nil,
                description: Swift.String? = nil,
                comments: Swift.Int? = nil,
                user: Swift.String? = nil,
                comments_url: Swift.String? = nil,
                owner: Components.Schemas.simple_hyphen_user? = nil,
                truncated: Swift.Bool? = nil
            ) {
                self.forks = forks
                self.history = history
                self.fork_of = fork_of
                self.url = url
                self.forks_url = forks_url
                self.commits_url = commits_url
                self.id = id
                self.node_id = node_id
                self.git_pull_url = git_pull_url
                self.git_push_url = git_push_url
                self.html_url = html_url
                self.files = files
                self._public = _public
                self.created_at = created_at
                self.updated_at = updated_at
                self.description = description
                self.comments = comments
                self.user = user
                self.comments_url = comments_url
                self.owner = owner
                self.truncated = truncated
            }
            public enum CodingKeys: String, CodingKey {
                case forks
                case history
                case fork_of
                case url
                case forks_url
                case commits_url
                case id
                case node_id
                case git_pull_url
                case git_push_url
                case html_url
                case files
                case _public = "public"
                case created_at
                case updated_at
                case description
                case comments
                case user
                case comments_url
                case owner
                case truncated
            }
        }
        /// A comment made to a gist.
        ///
        /// - Remark: Generated from `#/components/schemas/gist-comment`.
        public struct gist_hyphen_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gist-comment/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/gist-comment/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/gist-comment/url`.
            public var url: Swift.String
            /// The comment text.
            ///
            /// - Remark: Generated from `#/components/schemas/gist-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/gist-comment/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/gist-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/gist-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/gist-comment/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// Creates a new `gist_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - body: The comment text.
            ///   - user:
            ///   - created_at:
            ///   - updated_at:
            ///   - author_association:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                body: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                author_association: Components.Schemas.author_hyphen_association
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.body = body
                self.user = user
                self.created_at = created_at
                self.updated_at = updated_at
                self.author_association = author_association
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case body
                case user
                case created_at
                case updated_at
                case author_association
            }
        }
        /// Gist Commit
        ///
        /// - Remark: Generated from `#/components/schemas/gist-commit`.
        public struct gist_hyphen_commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/gist-commit/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/gist-commit/version`.
            public var version: Swift.String
            /// - Remark: Generated from `#/components/schemas/gist-commit/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/gist-commit/change_status`.
            public struct change_statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/gist-commit/change_status/total`.
                public var total: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gist-commit/change_status/additions`.
                public var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/gist-commit/change_status/deletions`.
                public var deletions: Swift.Int?
                /// Creates a new `change_statusPayload`.
                ///
                /// - Parameters:
                ///   - total:
                ///   - additions:
                ///   - deletions:
                public init(
                    total: Swift.Int? = nil,
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil
                ) {
                    self.total = total
                    self.additions = additions
                    self.deletions = deletions
                }
                public enum CodingKeys: String, CodingKey {
                    case total
                    case additions
                    case deletions
                }
            }
            /// - Remark: Generated from `#/components/schemas/gist-commit/change_status`.
            public var change_status: Components.Schemas.gist_hyphen_commit.change_statusPayload
            /// - Remark: Generated from `#/components/schemas/gist-commit/committed_at`.
            public var committed_at: Foundation.Date
            /// Creates a new `gist_hyphen_commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - version:
            ///   - user:
            ///   - change_status:
            ///   - committed_at:
            public init(
                url: Swift.String,
                version: Swift.String,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                change_status: Components.Schemas.gist_hyphen_commit.change_statusPayload,
                committed_at: Foundation.Date
            ) {
                self.url = url
                self.version = version
                self.user = user
                self.change_status = change_status
                self.committed_at = committed_at
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case version
                case user
                case change_status
                case committed_at
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
        ///
        /// - Remark: Generated from `#/components/parameters/since`.
        public typealias since = Foundation.Date
        /// The unique identifier of the gist.
        ///
        /// - Remark: Generated from `#/components/parameters/gist-id`.
        public typealias gist_hyphen_id = Swift.String
        /// The unique identifier of the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-id`.
        public typealias comment_hyphen_id = Swift.Int
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct requires_authentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.requires_authentication.Body
            /// Creates a new `requires_authentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.requires_authentication.Body) {
                self.body = body
            }
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct forbidden_gist: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden_gist/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    public struct blockPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/reason`.
                        public var reason: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/created_at`.
                        public var created_at: Swift.String?
                        /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block/html_url`.
                        public var html_url: Swift.String?
                        /// Creates a new `blockPayload`.
                        ///
                        /// - Parameters:
                        ///   - reason:
                        ///   - created_at:
                        ///   - html_url:
                        public init(
                            reason: Swift.String? = nil,
                            created_at: Swift.String? = nil,
                            html_url: Swift.String? = nil
                        ) {
                            self.reason = reason
                            self.created_at = created_at
                            self.html_url = html_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case reason
                            case created_at
                            case html_url
                        }
                    }
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/block`.
                    public var block: Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/forbidden_gist/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - block:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        block: Components.Responses.forbidden_gist.Body.jsonPayload.blockPayload? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.block = block
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/forbidden_gist/content/application\/json`.
                case json(Components.Responses.forbidden_gist.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.forbidden_gist.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden_gist.Body
            /// Creates a new `forbidden_gist`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden_gist.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List gists for the authenticated user
    ///
    /// Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
    ///
    /// - Remark: HTTP `GET /gists`.
    /// - Remark: Generated from `#/paths//gists/get(gists/list)`.
    public enum gists_sol_list {
        public static let id: Swift.String = "gists/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/gists/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/gists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.gists_sol_list.Input.Query = .init(),
                headers: Operations.gists_sol_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.base_hyphen_gist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.base_hyphen_gist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/get(gists/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/get(gists/list)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/get(gists/list)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a gist
    ///
    /// Allows you to add a new gist with one or more files.
    ///
    /// **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
    ///
    /// - Remark: HTTP `POST /gists`.
    /// - Remark: Generated from `#/paths//gists/post(gists/create)`.
    public enum gists_sol_create {
        public static let id: Swift.String = "gists/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/gists/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Description of the gist
                    ///
                    /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// Names and content for the files that make up the gist
                    ///
                    /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/files`.
                    public struct filesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/files/additionalProperties`.
                        public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                            /// Content of the file
                            ///
                            /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/files/additionalProperties/content`.
                            public var content: Swift.String
                            /// Creates a new `additionalPropertiesPayload`.
                            ///
                            /// - Parameters:
                            ///   - content: Content of the file
                            public init(content: Swift.String) {
                                self.content = content
                            }
                            public enum CodingKeys: String, CodingKey {
                                case content
                            }
                        }
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Operations.gists_sol_create.Input.Body.jsonPayload.filesPayload.additionalPropertiesPayload]
                        /// Creates a new `filesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Operations.gists_sol_create.Input.Body.jsonPayload.filesPayload.additionalPropertiesPayload] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// Names and content for the files that make up the gist
                    ///
                    /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/files`.
                    public var files: Operations.gists_sol_create.Input.Body.jsonPayload.filesPayload
                    /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/public`.
                    @frozen public enum _publicPayload: Codable, Hashable, Sendable {
                        /// Flag indicating whether the gist is public
                        ///
                        /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/public/case1`.
                        case case1(Swift.Bool)
                        /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/public/case2`.
                        @frozen public enum Case2Payload: String, Codable, Hashable, Sendable {
                            case _true = "true"
                            case _false = "false"
                        }
                        /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/public/case2`.
                        case case2(Operations.gists_sol_create.Input.Body.jsonPayload._publicPayload.Case2Payload)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/gists/POST/requestBody/json/public`.
                    public var _public: Operations.gists_sol_create.Input.Body.jsonPayload._publicPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: Description of the gist
                    ///   - files: Names and content for the files that make up the gist
                    ///   - _public:
                    public init(
                        description: Swift.String? = nil,
                        files: Operations.gists_sol_create.Input.Body.jsonPayload.filesPayload,
                        _public: Operations.gists_sol_create.Input.Body.jsonPayload._publicPayload? = nil
                    ) {
                        self.description = description
                        self.files = files
                        self._public = _public
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case files
                        case _public = "public"
                    }
                }
                /// - Remark: Generated from `#/paths/gists/POST/requestBody/content/application\/json`.
                case json(Operations.gists_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.gists_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.gists_sol_create.Input.Headers = .init(),
                body: Operations.gists_sol_create.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_create.Output.Created.Headers
                /// - Remark: Generated from `#/paths/gists/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_create.Output.Created.Headers = .init(),
                    body: Operations.gists_sol_create.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/post(gists/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.gists_sol_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.gists_sol_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//gists/post(gists/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/post(gists/create)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/post(gists/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/post(gists/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List public gists
    ///
    /// List public gists sorted by most recently updated to least recently updated.
    ///
    /// Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
    ///
    /// - Remark: HTTP `GET /gists/public`.
    /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)`.
    public enum gists_sol_list_hyphen_public {
        public static let id: Swift.String = "gists/list-public"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/public/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/gists/public/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/public/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/public/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_public.Input.Query
            /// - Remark: Generated from `#/paths/gists/public/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_public.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_public.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_public.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.gists_sol_list_hyphen_public.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_public.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/public/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/public/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_public.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/public/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/public/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.base_hyphen_gist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.base_hyphen_gist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_public.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_public.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_public.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_public.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_public.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/public/get(gists/list-public)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List starred gists
    ///
    /// List the authenticated user's starred gists:
    ///
    /// - Remark: HTTP `GET /gists/starred`.
    /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)`.
    public enum gists_sol_list_hyphen_starred {
        public static let id: Swift.String = "gists/list-starred"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/starred/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/gists/starred/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/starred/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/starred/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_starred.Input.Query
            /// - Remark: Generated from `#/paths/gists/starred/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_starred.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_starred.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_starred.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.gists_sol_list_hyphen_starred.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_starred.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/starred/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/starred/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_starred.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/starred/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/starred/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.base_hyphen_gist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.base_hyphen_gist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_starred.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_starred.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_starred.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_starred.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_starred.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.requires_authentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.requires_authentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/starred/get(gists/list-starred)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a gist
    ///
    /// Gets a specified gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)`.
    public enum gists_sol_get {
        public static let id: Swift.String = "gists/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_get.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_get.Input.Path,
                headers: Operations.gists_sol_get.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden Gist
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden_gist)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden_gist {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/get(gists/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a gist
    ///
    /// Allows you to update a gist's description and to update, delete, or rename gist files. Files
    /// from the previous version of the gist that aren't explicitly changed during an edit
    /// are unchanged.
    ///
    /// At least one of `description` or `files` is required.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)`.
    public enum gists_sol_update {
        public static let id: Swift.String = "gists/update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_update.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_update.Input.Headers
            /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The description of the gist.
                    ///
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
                    /// (including extension) of the targeted gist file. For example: `hello.py`.
                    ///
                    /// To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
                    /// deleted if the specified object does not contain at least one of `content` or `filename`.
                    ///
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/files`.
                    public struct filesPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/files/additionalProperties`.
                        public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                            /// The new content of the file.
                            ///
                            /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/files/additionalProperties/content`.
                            public var content: Swift.String?
                            /// The new filename for the file.
                            ///
                            /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/files/additionalProperties/filename`.
                            public var filename: Swift.String?
                            /// Creates a new `additionalPropertiesPayload`.
                            ///
                            /// - Parameters:
                            ///   - content: The new content of the file.
                            ///   - filename: The new filename for the file.
                            public init(
                                content: Swift.String? = nil,
                                filename: Swift.String? = nil
                            ) {
                                self.content = content
                                self.filename = filename
                            }
                            public enum CodingKeys: String, CodingKey {
                                case content
                                case filename
                            }
                        }
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Operations.gists_sol_update.Input.Body.jsonPayload.filesPayload.additionalPropertiesPayload?]
                        /// Creates a new `filesPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Operations.gists_sol_update.Input.Body.jsonPayload.filesPayload.additionalPropertiesPayload?] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
                    /// (including extension) of the targeted gist file. For example: `hello.py`.
                    ///
                    /// To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
                    /// deleted if the specified object does not contain at least one of `content` or `filename`.
                    ///
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/json/files`.
                    public var files: Operations.gists_sol_update.Input.Body.jsonPayload.filesPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - description: The description of the gist.
                    ///   - files: The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
                    public init(
                        description: Swift.String? = nil,
                        files: Operations.gists_sol_update.Input.Body.jsonPayload.filesPayload? = nil
                    ) {
                        self.description = description
                        self.files = files
                    }
                    public enum CodingKeys: String, CodingKey {
                        case description
                        case files
                    }
                }
                /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.gists_sol_update.Input.Body.jsonPayload)
            }
            public var body: Operations.gists_sol_update.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.gists_sol_update.Input.Path,
                headers: Operations.gists_sol_update.Input.Headers = .init(),
                body: Operations.gists_sol_update.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/patch(gists/update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)`.
    public enum gists_sol_delete {
        public static let id: Swift.String = "gists/delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/DELETE/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_delete.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_delete.Input.Path,
                headers: Operations.gists_sol_delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.gists_sol_delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.gists_sol_delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/delete(gists/delete)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List gist comments
    ///
    /// Lists the comments on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)`.
    public enum gists_sol_list_hyphen_comments {
        public static let id: Swift.String = "gists/list-comments"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_list_hyphen_comments.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_comments.Input.Query
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_comments.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_comments.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_comments.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.gists_sol_list_hyphen_comments.Input.Path,
                query: Operations.gists_sol_list_hyphen_comments.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_comments.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_comments.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.gist_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.gist_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_comments.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_comments.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_comments.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_comments.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_comments.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/get(gists/list-comments)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a gist comment
    ///
    /// Creates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/comments`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)`.
    public enum gists_sol_create_hyphen_comment {
        public static let id: Swift.String = "gists/create-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_create_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_create_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_create_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_create_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The comment text.
                    ///
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The comment text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.gists_sol_create_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.gists_sol_create_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.gists_sol_create_hyphen_comment.Input.Path,
                headers: Operations.gists_sol_create_hyphen_comment.Input.Headers = .init(),
                body: Operations.gists_sol_create_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_create_hyphen_comment.Output.Created.Headers
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_create_hyphen_comment.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_create_hyphen_comment.Output.Created.Headers = .init(),
                    body: Operations.gists_sol_create_hyphen_comment.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.gists_sol_create_hyphen_comment.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.gists_sol_create_hyphen_comment.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/post(gists/create-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a gist comment
    ///
    /// Gets a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)`.
    public enum gists_sol_get_hyphen_comment {
        public static let id: Swift.String = "gists/get-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    gist_id: Components.Parameters.gist_hyphen_id,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.gist_id = gist_id
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.gists_sol_get_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_get_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_get_hyphen_comment.Input.Path,
                headers: Operations.gists_sol_get_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_get_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_get_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_get_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_get_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden Gist
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/get(gists/get-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden_gist)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden_gist {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a gist comment
    ///
    /// Updates a comment on a gist.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `PATCH /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/patch(gists/update-comment)`.
    public enum gists_sol_update_hyphen_comment {
        public static let id: Swift.String = "gists/update-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    gist_id: Components.Parameters.gist_hyphen_id,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.gist_id = gist_id
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.gists_sol_update_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_update_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_update_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_update_hyphen_comment.Input.Headers
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The comment text.
                    ///
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The comment text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.gists_sol_update_hyphen_comment.Input.Body.jsonPayload)
            }
            public var body: Operations.gists_sol_update_hyphen_comment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.gists_sol_update_hyphen_comment.Input.Path,
                headers: Operations.gists_sol_update_hyphen_comment.Input.Headers = .init(),
                body: Operations.gists_sol_update_hyphen_comment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_update_hyphen_comment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_update_hyphen_comment.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/patch(gists/update-comment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_update_hyphen_comment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_update_hyphen_comment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/patch(gists/update-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a gist comment
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/comments/{comment_id}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)`.
    public enum gists_sol_delete_hyphen_comment {
        public static let id: Swift.String = "gists/delete-comment"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/DELETE/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// The unique identifier of the comment.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/DELETE/path/comment_id`.
                public var comment_id: Components.Parameters.comment_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                ///   - comment_id: The unique identifier of the comment.
                public init(
                    gist_id: Components.Parameters.gist_hyphen_id,
                    comment_id: Components.Parameters.comment_hyphen_id
                ) {
                    self.gist_id = gist_id
                    self.comment_id = comment_id
                }
            }
            public var path: Operations.gists_sol_delete_hyphen_comment.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/comments/{comment_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_delete_hyphen_comment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_delete_hyphen_comment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_delete_hyphen_comment.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_delete_hyphen_comment.Input.Path,
                headers: Operations.gists_sol_delete_hyphen_comment.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.gists_sol_delete_hyphen_comment.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.gists_sol_delete_hyphen_comment.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/comments/{comment_id}/delete(gists/delete-comment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List gist commits
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/commits`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)`.
    public enum gists_sol_list_hyphen_commits {
        public static let id: Swift.String = "gists/list-commits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_list_hyphen_commits.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_commits.Input.Query
            /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.gists_sol_list_hyphen_commits.Input.Path,
                query: Operations.gists_sol_list_hyphen_commits.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_commits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/responses/200/headers/Link`.
                    public var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Swift.String? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_commits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.gist_hyphen_commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.gist_hyphen_commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_commits.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_commits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/commits/get(gists/list-commits)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List gist forks
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)`.
    public enum gists_sol_list_hyphen_forks {
        public static let id: Swift.String = "gists/list-forks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_list_hyphen_forks.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_forks.Input.Query
            /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_forks.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_forks.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_forks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.gists_sol_list_hyphen_forks.Input.Path,
                query: Operations.gists_sol_list_hyphen_forks.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_forks.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_forks.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.gist_hyphen_simple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.gist_hyphen_simple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_forks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_forks.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_forks.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_forks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_forks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/get(gists/list-forks)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fork a gist
    ///
    ///
    ///
    /// - Remark: HTTP `POST /gists/{gist_id}/forks`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)`.
    public enum gists_sol_fork {
        public static let id: Swift.String = "gists/fork"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_fork.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_fork.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_fork.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_fork.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_fork.Input.Path,
                headers: Operations.gists_sol_fork.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/responses/201/headers/Location`.
                    public var Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Location:
                    public init(Location: Swift.String? = nil) {
                        self.Location = Location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_fork.Output.Created.Headers
                /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/forks/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.base_hyphen_gist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.base_hyphen_gist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_fork.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_fork.Output.Created.Headers = .init(),
                    body: Operations.gists_sol_fork.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.gists_sol_fork.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.gists_sol_fork.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/forks/post(gists/fork)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check if a gist is starred
    ///
    ///
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)`.
    public enum gists_sol_check_hyphen_is_hyphen_starred {
        public static let id: Swift.String = "gists/check-is-starred"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_check_hyphen_is_hyphen_starred.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_check_hyphen_is_hyphen_starred.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Path,
                headers: Operations.gists_sol_check_hyphen_is_hyphen_starred.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if gist is starred
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `jsonPayload`.
                        public init() {}
                        public init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/star/GET/responses/404/content/application\/json`.
                    case json(Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if gist is not starred
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.gists_sol_check_hyphen_is_hyphen_starred.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/get(gists/check-is-starred)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Star a gist
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)`.
    public enum gists_sol_star {
        public static let id: Swift.String = "gists/star"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/star/PUT/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_star.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_star.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_star.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_star.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_star.Input.Path,
                headers: Operations.gists_sol_star.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.gists_sol_star.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.gists_sol_star.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/put(gists/star)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Unstar a gist
    ///
    ///
    ///
    /// - Remark: HTTP `DELETE /gists/{gist_id}/star`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)`.
    public enum gists_sol_unstar {
        public static let id: Swift.String = "gists/unstar"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/star/DELETE/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                public init(gist_id: Components.Parameters.gist_hyphen_id) {
                    self.gist_id = gist_id
                }
            }
            public var path: Operations.gists_sol_unstar.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/star/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_unstar.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_unstar.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_unstar.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_unstar.Input.Path,
                headers: Operations.gists_sol_unstar.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.gists_sol_unstar.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.gists_sol_unstar.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/star/delete(gists/unstar)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a gist revision
    ///
    /// Gets a specified gist revision.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
    ///
    /// - Remark: HTTP `GET /gists/{gist_id}/{sha}`.
    /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)`.
    public enum gists_sol_get_hyphen_revision {
        public static let id: Swift.String = "gists/get-revision"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the gist.
                ///
                /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/path/gist_id`.
                public var gist_id: Components.Parameters.gist_hyphen_id
                /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/path/sha`.
                public var sha: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - gist_id: The unique identifier of the gist.
                ///   - sha:
                public init(
                    gist_id: Components.Parameters.gist_hyphen_id,
                    sha: Swift.String
                ) {
                    self.gist_id = gist_id
                    self.sha = sha
                }
            }
            public var path: Operations.gists_sol_get_hyphen_revision.Input.Path
            /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get_hyphen_revision.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_get_hyphen_revision.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_get_hyphen_revision.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.gists_sol_get_hyphen_revision.Input.Path,
                headers: Operations.gists_sol_get_hyphen_revision.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gists/{gist_id}/{sha}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.gist_hyphen_simple)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.gist_hyphen_simple {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_get_hyphen_revision.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gists_sol_get_hyphen_revision.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_get_hyphen_revision.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_get_hyphen_revision.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//gists/{gist_id}/{sha}/get(gists/get-revision)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List gists for a user
    ///
    /// Lists public gists for the specified user:
    ///
    /// - Remark: HTTP `GET /users/{username}/gists`.
    /// - Remark: Generated from `#/paths//users/{username}/gists/get(gists/list-for-user)`.
    public enum gists_sol_list_hyphen_for_hyphen_user {
        public static let id: Swift.String = "gists/list-for-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/gists/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/gists/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/query/since`.
                public var since: Components.Parameters.since?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    since: Components.Parameters.since? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.since = since
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/users/{username}/gists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_for_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gists_sol_list_hyphen_for_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Path,
                query: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Query = .init(),
                headers: Operations.gists_sol_list_hyphen_for_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/gists/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/users/{username}/gists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/gists/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.base_hyphen_gist])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.base_hyphen_gist] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/gists/get(gists/list-for-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gists_sol_list_hyphen_for_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//users/{username}/gists/get(gists/list-for-user)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
