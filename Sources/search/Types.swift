// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Search code
    ///
    /// Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
    ///
    /// `q=addClass+in:file+language:js+repo:jquery/jquery`
    ///
    /// This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
    ///
    /// Considerations for code search:
    ///
    /// Due to the complexity of searching code, there are a few restrictions on how searches are performed:
    ///
    /// *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
    /// *   Only files smaller than 384 KB are searchable.
    /// *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
    /// language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
    ///
    /// This endpoint requires you to authenticate and limits you to 10 requests per minute.
    ///
    /// - Remark: HTTP `GET /search/code`.
    /// - Remark: Generated from `#/paths//search/code/get(search/code)`.
    func search_sol_code(_ input: Operations.search_sol_code.Input) async throws -> Operations.search_sol_code.Output
    /// Search commits
    ///
    /// Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
    /// metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
    ///
    /// `q=repo:octocat/Spoon-Knife+css`
    ///
    /// - Remark: HTTP `GET /search/commits`.
    /// - Remark: Generated from `#/paths//search/commits/get(search/commits)`.
    func search_sol_commits(_ input: Operations.search_sol_commits.Input) async throws -> Operations.search_sol_commits.Output
    /// Search issues and pull requests
    ///
    /// Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
    /// search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
    ///
    /// `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
    ///
    /// This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
    ///
    /// **Note:** For requests made by GitHub Apps with a user access token, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    ///
    /// - Remark: HTTP `GET /search/issues`.
    /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)`.
    func search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests(_ input: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input) async throws -> Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output
    /// Search labels
    ///
    /// Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
    ///
    /// `q=bug+defect+enhancement&repository_id=64778136`
    ///
    /// The labels that best match the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/labels`.
    /// - Remark: Generated from `#/paths//search/labels/get(search/labels)`.
    func search_sol_labels(_ input: Operations.search_sol_labels.Input) async throws -> Operations.search_sol_labels.Output
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    func search_sol_repos(_ input: Operations.search_sol_repos.Input) async throws -> Operations.search_sol_repos.Output
    /// Search topics
    ///
    /// Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
    ///
    /// When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
    ///
    /// `q=ruby+is:featured`
    ///
    /// This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/topics`.
    /// - Remark: Generated from `#/paths//search/topics/get(search/topics)`.
    func search_sol_topics(_ input: Operations.search_sol_topics.Input) async throws -> Operations.search_sol_topics.Output
    /// Search users
    ///
    /// Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you're looking for a list of popular users, you might try this query:
    ///
    /// `q=tom+repos:%3E42+followers:%3E1000`
    ///
    /// This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
    ///
    /// This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
    ///
    /// - Remark: HTTP `GET /search/users`.
    /// - Remark: Generated from `#/paths//search/users/get(search/users)`.
    func search_sol_users(_ input: Operations.search_sol_users.Input) async throws -> Operations.search_sol_users.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Search code
    ///
    /// Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
    ///
    /// `q=addClass+in:file+language:js+repo:jquery/jquery`
    ///
    /// This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
    ///
    /// Considerations for code search:
    ///
    /// Due to the complexity of searching code, there are a few restrictions on how searches are performed:
    ///
    /// *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
    /// *   Only files smaller than 384 KB are searchable.
    /// *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
    /// language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
    ///
    /// This endpoint requires you to authenticate and limits you to 10 requests per minute.
    ///
    /// - Remark: HTTP `GET /search/code`.
    /// - Remark: Generated from `#/paths//search/code/get(search/code)`.
    public func search_sol_code(
        query: Operations.search_sol_code.Input.Query,
        headers: Operations.search_sol_code.Input.Headers = .init()
    ) async throws -> Operations.search_sol_code.Output {
        try await search_sol_code(Operations.search_sol_code.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search commits
    ///
    /// Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
    /// metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
    ///
    /// `q=repo:octocat/Spoon-Knife+css`
    ///
    /// - Remark: HTTP `GET /search/commits`.
    /// - Remark: Generated from `#/paths//search/commits/get(search/commits)`.
    public func search_sol_commits(
        query: Operations.search_sol_commits.Input.Query,
        headers: Operations.search_sol_commits.Input.Headers = .init()
    ) async throws -> Operations.search_sol_commits.Output {
        try await search_sol_commits(Operations.search_sol_commits.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search issues and pull requests
    ///
    /// Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
    /// search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
    ///
    /// `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
    ///
    /// This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
    ///
    /// **Note:** For requests made by GitHub Apps with a user access token, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    ///
    /// - Remark: HTTP `GET /search/issues`.
    /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)`.
    public func search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests(
        query: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Query,
        headers: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Headers = .init()
    ) async throws -> Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output {
        try await search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests(Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search labels
    ///
    /// Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
    ///
    /// `q=bug+defect+enhancement&repository_id=64778136`
    ///
    /// The labels that best match the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/labels`.
    /// - Remark: Generated from `#/paths//search/labels/get(search/labels)`.
    public func search_sol_labels(
        query: Operations.search_sol_labels.Input.Query,
        headers: Operations.search_sol_labels.Input.Headers = .init()
    ) async throws -> Operations.search_sol_labels.Output {
        try await search_sol_labels(Operations.search_sol_labels.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    public func search_sol_repos(
        query: Operations.search_sol_repos.Input.Query,
        headers: Operations.search_sol_repos.Input.Headers = .init()
    ) async throws -> Operations.search_sol_repos.Output {
        try await search_sol_repos(Operations.search_sol_repos.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search topics
    ///
    /// Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
    ///
    /// When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
    ///
    /// `q=ruby+is:featured`
    ///
    /// This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/topics`.
    /// - Remark: Generated from `#/paths//search/topics/get(search/topics)`.
    public func search_sol_topics(
        query: Operations.search_sol_topics.Input.Query,
        headers: Operations.search_sol_topics.Input.Headers = .init()
    ) async throws -> Operations.search_sol_topics.Output {
        try await search_sol_topics(Operations.search_sol_topics.Input(
            query: query,
            headers: headers
        ))
    }
    /// Search users
    ///
    /// Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you're looking for a list of popular users, you might try this query:
    ///
    /// `q=tom+repos:%3E42+followers:%3E1000`
    ///
    /// This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
    ///
    /// This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
    ///
    /// - Remark: HTTP `GET /search/users`.
    /// - Remark: Generated from `#/paths//search/users/get(search/users)`.
    public func search_sol_users(
        query: Operations.search_sol_users.Input.Query,
        headers: Operations.search_sol_users.Input.Headers = .init()
    ) async throws -> Operations.search_sol_users.Output {
        try await search_sol_users(Operations.search_sol_users.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        public struct repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repository/organization`.
            public var organization: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            public var permissions: Components.Schemas.repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            public var has_downloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public struct template_repositoryPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/id`.
                public var id: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/full_name`.
                public var full_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public struct ownerPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/login`.
                    public var login: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/node_id`.
                    public var node_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/avatar_url`.
                    public var avatar_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gravatar_id`.
                    public var gravatar_id: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/url`.
                    public var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/html_url`.
                    public var html_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/followers_url`.
                    public var followers_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/following_url`.
                    public var following_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/gists_url`.
                    public var gists_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/starred_url`.
                    public var starred_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/subscriptions_url`.
                    public var subscriptions_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/organizations_url`.
                    public var organizations_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/repos_url`.
                    public var repos_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/events_url`.
                    public var events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/received_events_url`.
                    public var received_events_url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/type`.
                    public var _type: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner/site_admin`.
                    public var site_admin: Swift.Bool?
                    /// Creates a new `ownerPayload`.
                    ///
                    /// - Parameters:
                    ///   - login:
                    ///   - id:
                    ///   - node_id:
                    ///   - avatar_url:
                    ///   - gravatar_id:
                    ///   - url:
                    ///   - html_url:
                    ///   - followers_url:
                    ///   - following_url:
                    ///   - gists_url:
                    ///   - starred_url:
                    ///   - subscriptions_url:
                    ///   - organizations_url:
                    ///   - repos_url:
                    ///   - events_url:
                    ///   - received_events_url:
                    ///   - _type:
                    ///   - site_admin:
                    public init(
                        login: Swift.String? = nil,
                        id: Swift.Int? = nil,
                        node_id: Swift.String? = nil,
                        avatar_url: Swift.String? = nil,
                        gravatar_id: Swift.String? = nil,
                        url: Swift.String? = nil,
                        html_url: Swift.String? = nil,
                        followers_url: Swift.String? = nil,
                        following_url: Swift.String? = nil,
                        gists_url: Swift.String? = nil,
                        starred_url: Swift.String? = nil,
                        subscriptions_url: Swift.String? = nil,
                        organizations_url: Swift.String? = nil,
                        repos_url: Swift.String? = nil,
                        events_url: Swift.String? = nil,
                        received_events_url: Swift.String? = nil,
                        _type: Swift.String? = nil,
                        site_admin: Swift.Bool? = nil
                    ) {
                        self.login = login
                        self.id = id
                        self.node_id = node_id
                        self.avatar_url = avatar_url
                        self.gravatar_id = gravatar_id
                        self.url = url
                        self.html_url = html_url
                        self.followers_url = followers_url
                        self.following_url = following_url
                        self.gists_url = gists_url
                        self.starred_url = starred_url
                        self.subscriptions_url = subscriptions_url
                        self.organizations_url = organizations_url
                        self.repos_url = repos_url
                        self.events_url = events_url
                        self.received_events_url = received_events_url
                        self._type = _type
                        self.site_admin = site_admin
                    }
                    public enum CodingKeys: String, CodingKey {
                        case login
                        case id
                        case node_id
                        case avatar_url
                        case gravatar_id
                        case url
                        case html_url
                        case followers_url
                        case following_url
                        case gists_url
                        case starred_url
                        case subscriptions_url
                        case organizations_url
                        case repos_url
                        case events_url
                        case received_events_url
                        case _type = "type"
                        case site_admin
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/owner`.
                public var owner: Components.Schemas.repository.template_repositoryPayload.ownerPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/private`.
                public var _private: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/description`.
                public var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/fork`.
                public var fork: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archive_url`.
                public var archive_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/assignees_url`.
                public var assignees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/blobs_url`.
                public var blobs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/branches_url`.
                public var branches_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/collaborators_url`.
                public var collaborators_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/comments_url`.
                public var comments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/commits_url`.
                public var commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/compare_url`.
                public var compare_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contents_url`.
                public var contents_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/contributors_url`.
                public var contributors_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/deployments_url`.
                public var deployments_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/downloads_url`.
                public var downloads_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/events_url`.
                public var events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_url`.
                public var forks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_commits_url`.
                public var git_commits_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_refs_url`.
                public var git_refs_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_tags_url`.
                public var git_tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/git_url`.
                public var git_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_comment_url`.
                public var issue_comment_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issue_events_url`.
                public var issue_events_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/issues_url`.
                public var issues_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/keys_url`.
                public var keys_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/labels_url`.
                public var labels_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/languages_url`.
                public var languages_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merges_url`.
                public var merges_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/milestones_url`.
                public var milestones_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/notifications_url`.
                public var notifications_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pulls_url`.
                public var pulls_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/releases_url`.
                public var releases_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/ssh_url`.
                public var ssh_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_url`.
                public var stargazers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/statuses_url`.
                public var statuses_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_url`.
                public var subscribers_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscription_url`.
                public var subscription_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/tags_url`.
                public var tags_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/teams_url`.
                public var teams_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/trees_url`.
                public var trees_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/clone_url`.
                public var clone_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/mirror_url`.
                public var mirror_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/hooks_url`.
                public var hooks_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/svn_url`.
                public var svn_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/homepage`.
                public var homepage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/language`.
                public var language: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/forks_count`.
                public var forks_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/stargazers_count`.
                public var stargazers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/watchers_count`.
                public var watchers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/default_branch`.
                public var default_branch: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/open_issues_count`.
                public var open_issues_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/is_template`.
                public var is_template: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/topics`.
                public var topics: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_issues`.
                public var has_issues: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_projects`.
                public var has_projects: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_wiki`.
                public var has_wiki: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_pages`.
                public var has_pages: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/has_downloads`.
                public var has_downloads: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/archived`.
                public var archived: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/disabled`.
                public var disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/visibility`.
                public var visibility: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/pushed_at`.
                public var pushed_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/created_at`.
                public var created_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/updated_at`.
                public var updated_at: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public struct permissionsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/admin`.
                    public var admin: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/maintain`.
                    public var maintain: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/push`.
                    public var push: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/triage`.
                    public var triage: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions/pull`.
                    public var pull: Swift.Bool?
                    /// Creates a new `permissionsPayload`.
                    ///
                    /// - Parameters:
                    ///   - admin:
                    ///   - maintain:
                    ///   - push:
                    ///   - triage:
                    ///   - pull:
                    public init(
                        admin: Swift.Bool? = nil,
                        maintain: Swift.Bool? = nil,
                        push: Swift.Bool? = nil,
                        triage: Swift.Bool? = nil,
                        pull: Swift.Bool? = nil
                    ) {
                        self.admin = admin
                        self.maintain = maintain
                        self.push = push
                        self.triage = triage
                        self.pull = pull
                    }
                    public enum CodingKeys: String, CodingKey {
                        case admin
                        case maintain
                        case push
                        case triage
                        case pull
                    }
                }
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/permissions`.
                public var permissions: Components.Schemas.repository.template_repositoryPayload.permissionsPayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_rebase_merge`.
                public var allow_rebase_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/temp_clone_token`.
                public var temp_clone_token: Swift.String?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_squash_merge`.
                public var allow_squash_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_auto_merge`.
                public var allow_auto_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/delete_branch_on_merge`.
                public var delete_branch_on_merge: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_update_branch`.
                public var allow_update_branch: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/use_squash_pr_title_as_default`.
                public var use_squash_pr_title_as_default: Swift.Bool?
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
                }
                /// The default value for a squash merge commit title:
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_title`.
                public var squash_merge_commit_title: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_titlePayload?
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                    case BLANK = "BLANK"
                }
                /// The default value for a squash merge commit message:
                ///
                /// - `PR_BODY` - default to the pull request's body.
                /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/squash_merge_commit_message`.
                public var squash_merge_commit_message: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_messagePayload?
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                    case PR_TITLE = "PR_TITLE"
                    case MERGE_MESSAGE = "MERGE_MESSAGE"
                }
                /// The default value for a merge commit title.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_title`.
                public var merge_commit_title: Components.Schemas.repository.template_repositoryPayload.merge_commit_titlePayload?
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                    case PR_BODY = "PR_BODY"
                    case PR_TITLE = "PR_TITLE"
                    case BLANK = "BLANK"
                }
                /// The default value for a merge commit message.
                ///
                /// - `PR_TITLE` - default to the pull request's title.
                /// - `PR_BODY` - default to the pull request's body.
                /// - `BLANK` - default to a blank commit message.
                ///
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/merge_commit_message`.
                public var merge_commit_message: Components.Schemas.repository.template_repositoryPayload.merge_commit_messagePayload?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/allow_merge_commit`.
                public var allow_merge_commit: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/subscribers_count`.
                public var subscribers_count: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/repository/template_repository/network_count`.
                public var network_count: Swift.Int?
                /// Creates a new `template_repositoryPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - name:
                ///   - full_name:
                ///   - owner:
                ///   - _private:
                ///   - html_url:
                ///   - description:
                ///   - fork:
                ///   - url:
                ///   - archive_url:
                ///   - assignees_url:
                ///   - blobs_url:
                ///   - branches_url:
                ///   - collaborators_url:
                ///   - comments_url:
                ///   - commits_url:
                ///   - compare_url:
                ///   - contents_url:
                ///   - contributors_url:
                ///   - deployments_url:
                ///   - downloads_url:
                ///   - events_url:
                ///   - forks_url:
                ///   - git_commits_url:
                ///   - git_refs_url:
                ///   - git_tags_url:
                ///   - git_url:
                ///   - issue_comment_url:
                ///   - issue_events_url:
                ///   - issues_url:
                ///   - keys_url:
                ///   - labels_url:
                ///   - languages_url:
                ///   - merges_url:
                ///   - milestones_url:
                ///   - notifications_url:
                ///   - pulls_url:
                ///   - releases_url:
                ///   - ssh_url:
                ///   - stargazers_url:
                ///   - statuses_url:
                ///   - subscribers_url:
                ///   - subscription_url:
                ///   - tags_url:
                ///   - teams_url:
                ///   - trees_url:
                ///   - clone_url:
                ///   - mirror_url:
                ///   - hooks_url:
                ///   - svn_url:
                ///   - homepage:
                ///   - language:
                ///   - forks_count:
                ///   - stargazers_count:
                ///   - watchers_count:
                ///   - size:
                ///   - default_branch:
                ///   - open_issues_count:
                ///   - is_template:
                ///   - topics:
                ///   - has_issues:
                ///   - has_projects:
                ///   - has_wiki:
                ///   - has_pages:
                ///   - has_downloads:
                ///   - archived:
                ///   - disabled:
                ///   - visibility:
                ///   - pushed_at:
                ///   - created_at:
                ///   - updated_at:
                ///   - permissions:
                ///   - allow_rebase_merge:
                ///   - temp_clone_token:
                ///   - allow_squash_merge:
                ///   - allow_auto_merge:
                ///   - delete_branch_on_merge:
                ///   - allow_update_branch:
                ///   - use_squash_pr_title_as_default:
                ///   - squash_merge_commit_title: The default value for a squash merge commit title:
                ///   - squash_merge_commit_message: The default value for a squash merge commit message:
                ///   - merge_commit_title: The default value for a merge commit title.
                ///   - merge_commit_message: The default value for a merge commit message.
                ///   - allow_merge_commit:
                ///   - subscribers_count:
                ///   - network_count:
                public init(
                    id: Swift.Int? = nil,
                    node_id: Swift.String? = nil,
                    name: Swift.String? = nil,
                    full_name: Swift.String? = nil,
                    owner: Components.Schemas.repository.template_repositoryPayload.ownerPayload? = nil,
                    _private: Swift.Bool? = nil,
                    html_url: Swift.String? = nil,
                    description: Swift.String? = nil,
                    fork: Swift.Bool? = nil,
                    url: Swift.String? = nil,
                    archive_url: Swift.String? = nil,
                    assignees_url: Swift.String? = nil,
                    blobs_url: Swift.String? = nil,
                    branches_url: Swift.String? = nil,
                    collaborators_url: Swift.String? = nil,
                    comments_url: Swift.String? = nil,
                    commits_url: Swift.String? = nil,
                    compare_url: Swift.String? = nil,
                    contents_url: Swift.String? = nil,
                    contributors_url: Swift.String? = nil,
                    deployments_url: Swift.String? = nil,
                    downloads_url: Swift.String? = nil,
                    events_url: Swift.String? = nil,
                    forks_url: Swift.String? = nil,
                    git_commits_url: Swift.String? = nil,
                    git_refs_url: Swift.String? = nil,
                    git_tags_url: Swift.String? = nil,
                    git_url: Swift.String? = nil,
                    issue_comment_url: Swift.String? = nil,
                    issue_events_url: Swift.String? = nil,
                    issues_url: Swift.String? = nil,
                    keys_url: Swift.String? = nil,
                    labels_url: Swift.String? = nil,
                    languages_url: Swift.String? = nil,
                    merges_url: Swift.String? = nil,
                    milestones_url: Swift.String? = nil,
                    notifications_url: Swift.String? = nil,
                    pulls_url: Swift.String? = nil,
                    releases_url: Swift.String? = nil,
                    ssh_url: Swift.String? = nil,
                    stargazers_url: Swift.String? = nil,
                    statuses_url: Swift.String? = nil,
                    subscribers_url: Swift.String? = nil,
                    subscription_url: Swift.String? = nil,
                    tags_url: Swift.String? = nil,
                    teams_url: Swift.String? = nil,
                    trees_url: Swift.String? = nil,
                    clone_url: Swift.String? = nil,
                    mirror_url: Swift.String? = nil,
                    hooks_url: Swift.String? = nil,
                    svn_url: Swift.String? = nil,
                    homepage: Swift.String? = nil,
                    language: Swift.String? = nil,
                    forks_count: Swift.Int? = nil,
                    stargazers_count: Swift.Int? = nil,
                    watchers_count: Swift.Int? = nil,
                    size: Swift.Int? = nil,
                    default_branch: Swift.String? = nil,
                    open_issues_count: Swift.Int? = nil,
                    is_template: Swift.Bool? = nil,
                    topics: [Swift.String]? = nil,
                    has_issues: Swift.Bool? = nil,
                    has_projects: Swift.Bool? = nil,
                    has_wiki: Swift.Bool? = nil,
                    has_pages: Swift.Bool? = nil,
                    has_downloads: Swift.Bool? = nil,
                    archived: Swift.Bool? = nil,
                    disabled: Swift.Bool? = nil,
                    visibility: Swift.String? = nil,
                    pushed_at: Swift.String? = nil,
                    created_at: Swift.String? = nil,
                    updated_at: Swift.String? = nil,
                    permissions: Components.Schemas.repository.template_repositoryPayload.permissionsPayload? = nil,
                    allow_rebase_merge: Swift.Bool? = nil,
                    temp_clone_token: Swift.String? = nil,
                    allow_squash_merge: Swift.Bool? = nil,
                    allow_auto_merge: Swift.Bool? = nil,
                    delete_branch_on_merge: Swift.Bool? = nil,
                    allow_update_branch: Swift.Bool? = nil,
                    use_squash_pr_title_as_default: Swift.Bool? = nil,
                    squash_merge_commit_title: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_titlePayload? = nil,
                    squash_merge_commit_message: Components.Schemas.repository.template_repositoryPayload.squash_merge_commit_messagePayload? = nil,
                    merge_commit_title: Components.Schemas.repository.template_repositoryPayload.merge_commit_titlePayload? = nil,
                    merge_commit_message: Components.Schemas.repository.template_repositoryPayload.merge_commit_messagePayload? = nil,
                    allow_merge_commit: Swift.Bool? = nil,
                    subscribers_count: Swift.Int? = nil,
                    network_count: Swift.Int? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.name = name
                    self.full_name = full_name
                    self.owner = owner
                    self._private = _private
                    self.html_url = html_url
                    self.description = description
                    self.fork = fork
                    self.url = url
                    self.archive_url = archive_url
                    self.assignees_url = assignees_url
                    self.blobs_url = blobs_url
                    self.branches_url = branches_url
                    self.collaborators_url = collaborators_url
                    self.comments_url = comments_url
                    self.commits_url = commits_url
                    self.compare_url = compare_url
                    self.contents_url = contents_url
                    self.contributors_url = contributors_url
                    self.deployments_url = deployments_url
                    self.downloads_url = downloads_url
                    self.events_url = events_url
                    self.forks_url = forks_url
                    self.git_commits_url = git_commits_url
                    self.git_refs_url = git_refs_url
                    self.git_tags_url = git_tags_url
                    self.git_url = git_url
                    self.issue_comment_url = issue_comment_url
                    self.issue_events_url = issue_events_url
                    self.issues_url = issues_url
                    self.keys_url = keys_url
                    self.labels_url = labels_url
                    self.languages_url = languages_url
                    self.merges_url = merges_url
                    self.milestones_url = milestones_url
                    self.notifications_url = notifications_url
                    self.pulls_url = pulls_url
                    self.releases_url = releases_url
                    self.ssh_url = ssh_url
                    self.stargazers_url = stargazers_url
                    self.statuses_url = statuses_url
                    self.subscribers_url = subscribers_url
                    self.subscription_url = subscription_url
                    self.tags_url = tags_url
                    self.teams_url = teams_url
                    self.trees_url = trees_url
                    self.clone_url = clone_url
                    self.mirror_url = mirror_url
                    self.hooks_url = hooks_url
                    self.svn_url = svn_url
                    self.homepage = homepage
                    self.language = language
                    self.forks_count = forks_count
                    self.stargazers_count = stargazers_count
                    self.watchers_count = watchers_count
                    self.size = size
                    self.default_branch = default_branch
                    self.open_issues_count = open_issues_count
                    self.is_template = is_template
                    self.topics = topics
                    self.has_issues = has_issues
                    self.has_projects = has_projects
                    self.has_wiki = has_wiki
                    self.has_pages = has_pages
                    self.has_downloads = has_downloads
                    self.archived = archived
                    self.disabled = disabled
                    self.visibility = visibility
                    self.pushed_at = pushed_at
                    self.created_at = created_at
                    self.updated_at = updated_at
                    self.permissions = permissions
                    self.allow_rebase_merge = allow_rebase_merge
                    self.temp_clone_token = temp_clone_token
                    self.allow_squash_merge = allow_squash_merge
                    self.allow_auto_merge = allow_auto_merge
                    self.delete_branch_on_merge = delete_branch_on_merge
                    self.allow_update_branch = allow_update_branch
                    self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                    self.squash_merge_commit_title = squash_merge_commit_title
                    self.squash_merge_commit_message = squash_merge_commit_message
                    self.merge_commit_title = merge_commit_title
                    self.merge_commit_message = merge_commit_message
                    self.allow_merge_commit = allow_merge_commit
                    self.subscribers_count = subscribers_count
                    self.network_count = network_count
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case name
                    case full_name
                    case owner
                    case _private = "private"
                    case html_url
                    case description
                    case fork
                    case url
                    case archive_url
                    case assignees_url
                    case blobs_url
                    case branches_url
                    case collaborators_url
                    case comments_url
                    case commits_url
                    case compare_url
                    case contents_url
                    case contributors_url
                    case deployments_url
                    case downloads_url
                    case events_url
                    case forks_url
                    case git_commits_url
                    case git_refs_url
                    case git_tags_url
                    case git_url
                    case issue_comment_url
                    case issue_events_url
                    case issues_url
                    case keys_url
                    case labels_url
                    case languages_url
                    case merges_url
                    case milestones_url
                    case notifications_url
                    case pulls_url
                    case releases_url
                    case ssh_url
                    case stargazers_url
                    case statuses_url
                    case subscribers_url
                    case subscription_url
                    case tags_url
                    case teams_url
                    case trees_url
                    case clone_url
                    case mirror_url
                    case hooks_url
                    case svn_url
                    case homepage
                    case language
                    case forks_count
                    case stargazers_count
                    case watchers_count
                    case size
                    case default_branch
                    case open_issues_count
                    case is_template
                    case topics
                    case has_issues
                    case has_projects
                    case has_wiki
                    case has_pages
                    case has_downloads
                    case archived
                    case disabled
                    case visibility
                    case pushed_at
                    case created_at
                    case updated_at
                    case permissions
                    case allow_rebase_merge
                    case temp_clone_token
                    case allow_squash_merge
                    case allow_auto_merge
                    case delete_branch_on_merge
                    case allow_update_branch
                    case use_squash_pr_title_as_default
                    case squash_merge_commit_title
                    case squash_merge_commit_message
                    case merge_commit_title
                    case merge_commit_message
                    case allow_merge_commit
                    case subscribers_count
                    case network_count
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/template_repository`.
            public var template_repository: Components.Schemas.repository.template_repositoryPayload?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            public var allow_update_branch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            public var use_squash_pr_title_as_default: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen public enum squash_merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            public var squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen public enum squash_merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case COMMIT_MESSAGES = "COMMIT_MESSAGES"
                case BLANK = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            public var squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen public enum merge_commit_titlePayload: String, Codable, Hashable, Sendable {
                case PR_TITLE = "PR_TITLE"
                case MERGE_MESSAGE = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            public var merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen public enum merge_commit_messagePayload: String, Codable, Hashable, Sendable {
                case PR_BODY = "PR_BODY"
                case PR_TITLE = "PR_TITLE"
                case BLANK = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            public var merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            public var starred_at: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            public var anonymous_access_enabled: Swift.Bool?
            /// Creates a new `repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - organization:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - has_discussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - template_repository:
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_update_branch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - use_squash_pr_title_as_default: Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
            ///   - squash_merge_commit_title: The default value for a squash merge commit title:
            ///   - squash_merge_commit_message: The default value for a squash merge commit message:
            ///   - merge_commit_title: The default value for a merge commit title.
            ///   - merge_commit_message: The default value for a merge commit message.
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            ///   - starred_at:
            ///   - anonymous_access_enabled: Whether anonymous git access is enabled for this repository
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                organization: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.repository.permissionsPayload? = nil,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                template_repository: Components.Schemas.repository.template_repositoryPayload? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_update_branch: Swift.Bool? = nil,
                use_squash_pr_title_as_default: Swift.Bool? = nil,
                squash_merge_commit_title: Components.Schemas.repository.squash_merge_commit_titlePayload? = nil,
                squash_merge_commit_message: Components.Schemas.repository.squash_merge_commit_messagePayload? = nil,
                merge_commit_title: Components.Schemas.repository.merge_commit_titlePayload? = nil,
                merge_commit_message: Components.Schemas.repository.merge_commit_messagePayload? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil,
                starred_at: Swift.String? = nil,
                anonymous_access_enabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.organization = organization
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.template_repository = template_repository
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_update_branch = allow_update_branch
                self.use_squash_pr_title_as_default = use_squash_pr_title_as_default
                self.squash_merge_commit_title = squash_merge_commit_title
                self.squash_merge_commit_message = squash_merge_commit_message
                self.merge_commit_title = merge_commit_title
                self.merge_commit_message = merge_commit_message
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
                self.starred_at = starred_at
                self.anonymous_access_enabled = anonymous_access_enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case organization
                case forks
                case permissions
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case template_repository
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_update_branch
                case use_squash_pr_title_as_default
                case squash_merge_commit_title
                case squash_merge_commit_message
                case merge_commit_title
                case merge_commit_message
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
                case starred_at
                case anonymous_access_enabled
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        public struct nullable_hyphen_milestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            public var node_id: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            public var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            public var state: Components.Schemas.nullable_hyphen_milestone.statePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            public var creator: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            public var closed_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            public var due_on: Foundation.Date?
            /// Creates a new `nullable_hyphen_milestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - html_url:
            ///   - labels_url:
            ///   - id:
            ///   - node_id:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - open_issues:
            ///   - closed_issues:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - due_on:
            public init(
                url: Swift.String,
                html_url: Swift.String,
                labels_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.nullable_hyphen_milestone.statePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                open_issues: Swift.Int,
                closed_issues: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                due_on: Foundation.Date? = nil
            ) {
                self.url = url
                self.html_url = html_url
                self.labels_url = labels_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.open_issues = open_issues
                self.closed_issues = closed_issues
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.due_on = due_on
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case html_url
                case labels_url
                case id
                case node_id
                case number
                case state
                case title
                case description
                case creator
                case open_issues
                case closed_issues
                case created_at
                case updated_at
                case closed_at
                case due_on
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        public struct nullable_hyphen_integration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            public var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            public var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            public var external_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            public var updated_at: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                public var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                public var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                public var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                public var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                public var deployments: Swift.String?
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                public init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                public enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                public func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            public var permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            public var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            public var installations_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            public var webhook_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            public var pem: Swift.String?
            /// Creates a new `nullable_hyphen_integration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - node_id:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - external_url:
            ///   - html_url:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installations_count: The number of installations associated with the GitHub app
            ///   - client_id:
            ///   - client_secret:
            ///   - webhook_secret:
            ///   - pem:
            public init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                node_id: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                external_url: Swift.String,
                html_url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                permissions: Components.Schemas.nullable_hyphen_integration.permissionsPayload,
                events: [Swift.String],
                installations_count: Swift.Int? = nil,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                webhook_secret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.node_id = node_id
                self.owner = owner
                self.name = name
                self.description = description
                self.external_url = external_url
                self.html_url = html_url
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.events = events
                self.installations_count = installations_count
                self.client_id = client_id
                self.client_secret = client_secret
                self.webhook_secret = webhook_secret
                self.pem = pem
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case slug
                case node_id
                case owner
                case name
                case description
                case external_url
                case html_url
                case created_at
                case updated_at
                case permissions
                case events
                case installations_count
                case client_id
                case client_secret
                case webhook_secret
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen public enum author_hyphen_association: String, Codable, Hashable, Sendable {
            case COLLABORATOR = "COLLABORATOR"
            case CONTRIBUTOR = "CONTRIBUTOR"
            case FIRST_TIMER = "FIRST_TIMER"
            case FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
            case MANNEQUIN = "MANNEQUIN"
            case MEMBER = "MEMBER"
            case NONE = "NONE"
            case OWNER = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        public struct nullable_hyphen_git_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            public var date: Swift.String?
            /// Creates a new `nullable_hyphen_git_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        public struct verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            public var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            public var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            public var signature: Swift.String?
            /// Creates a new `verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            public init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
            }
            public enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
            }
        }
        /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches`.
        public struct search_hyphen_result_hyphen_text_hyphen_matchesPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/object_url`.
            public var object_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/object_type`.
            public var object_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/property`.
            public var property: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/fragment`.
            public var fragment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload`.
            public struct matchesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload/text`.
                public var text: Swift.String?
                /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matchesPayload/indices`.
                public var indices: [Swift.Int]?
                /// Creates a new `matchesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - text:
                ///   - indices:
                public init(
                    text: Swift.String? = nil,
                    indices: [Swift.Int]? = nil
                ) {
                    self.text = text
                    self.indices = indices
                }
                public enum CodingKeys: String, CodingKey {
                    case text
                    case indices
                }
            }
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matches`.
            public typealias matchesPayload = [Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/search_hyphen_result_hyphen_text_hyphen_matches/matches`.
            public var matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayload?
            /// Creates a new `search_hyphen_result_hyphen_text_hyphen_matchesPayload`.
            ///
            /// - Parameters:
            ///   - object_url:
            ///   - object_type:
            ///   - property:
            ///   - fragment:
            ///   - matches:
            public init(
                object_url: Swift.String? = nil,
                object_type: Swift.String? = nil,
                property: Swift.String? = nil,
                fragment: Swift.String? = nil,
                matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload.matchesPayload? = nil
            ) {
                self.object_url = object_url
                self.object_type = object_type
                self.property = property
                self.fragment = fragment
                self.matches = matches
            }
            public enum CodingKeys: String, CodingKey {
                case object_url
                case object_type
                case property
                case fragment
                case matches
            }
        }
        /// - Remark: Generated from `#/components/schemas/search-result-text-matches`.
        public typealias search_hyphen_result_hyphen_text_hyphen_matches = [Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matchesPayload]
        /// Code Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/code-search-result-item`.
        public struct code_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/path`.
            public var path: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/file_size`.
            public var file_size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/last_modified_at`.
            public var last_modified_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/line_numbers`.
            public var line_numbers: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/code-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// Creates a new `code_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - path:
            ///   - sha:
            ///   - url:
            ///   - git_url:
            ///   - html_url:
            ///   - repository:
            ///   - score:
            ///   - file_size:
            ///   - language:
            ///   - last_modified_at:
            ///   - line_numbers:
            ///   - text_matches:
            public init(
                name: Swift.String,
                path: Swift.String,
                sha: Swift.String,
                url: Swift.String,
                git_url: Swift.String,
                html_url: Swift.String,
                repository: Components.Schemas.minimal_hyphen_repository,
                score: Swift.Double,
                file_size: Swift.Int? = nil,
                language: Swift.String? = nil,
                last_modified_at: Foundation.Date? = nil,
                line_numbers: [Swift.String]? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil
            ) {
                self.name = name
                self.path = path
                self.sha = sha
                self.url = url
                self.git_url = git_url
                self.html_url = html_url
                self.repository = repository
                self.score = score
                self.file_size = file_size
                self.language = language
                self.last_modified_at = last_modified_at
                self.line_numbers = line_numbers
                self.text_matches = text_matches
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case path
                case sha
                case url
                case git_url
                case html_url
                case repository
                case score
                case file_size
                case language
                case last_modified_at
                case line_numbers
                case text_matches
            }
        }
        /// Commit Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/commit-search-result-item`.
        public struct commit_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/sha`.
            public var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit`.
            public struct commitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/author`.
                public struct authorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/author/name`.
                    public var name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/author/email`.
                    public var email: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/author/date`.
                    public var date: Foundation.Date
                    /// Creates a new `authorPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - email:
                    ///   - date:
                    public init(
                        name: Swift.String,
                        email: Swift.String,
                        date: Foundation.Date
                    ) {
                        self.name = name
                        self.email = email
                        self.date = date
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case email
                        case date
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/author`.
                public var author: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload.authorPayload
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/committer`.
                public var committer: Components.Schemas.nullable_hyphen_git_hyphen_user?
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/comment_count`.
                public var comment_count: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/message`.
                public var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/tree`.
                public struct treePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/tree/sha`.
                    public var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/tree/url`.
                    public var url: Swift.String
                    /// Creates a new `treePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    public init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/tree`.
                public var tree: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload.treePayload
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit/verification`.
                public var verification: Components.Schemas.verification?
                /// Creates a new `commitPayload`.
                ///
                /// - Parameters:
                ///   - author:
                ///   - committer:
                ///   - comment_count:
                ///   - message:
                ///   - tree:
                ///   - url:
                ///   - verification:
                public init(
                    author: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload.authorPayload,
                    committer: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                    comment_count: Swift.Int,
                    message: Swift.String,
                    tree: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload.treePayload,
                    url: Swift.String,
                    verification: Components.Schemas.verification? = nil
                ) {
                    self.author = author
                    self.committer = committer
                    self.comment_count = comment_count
                    self.message = message
                    self.tree = tree
                    self.url = url
                    self.verification = verification
                }
                public enum CodingKeys: String, CodingKey {
                    case author
                    case committer
                    case comment_count
                    case message
                    case tree
                    case url
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/commit`.
            public var commit: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/author`.
            public var author: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/committer`.
            public var committer: Components.Schemas.nullable_hyphen_git_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parentsPayload`.
            public struct parentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parentsPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parentsPayload/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parentsPayload/sha`.
                public var sha: Swift.String?
                /// Creates a new `parentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - html_url:
                ///   - sha:
                public init(
                    url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    sha: Swift.String? = nil
                ) {
                    self.url = url
                    self.html_url = html_url
                    self.sha = sha
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case html_url
                    case sha
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parents`.
            public typealias parentsPayload = [Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.parentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/parents`.
            public var parents: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.parentsPayload
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/repository`.
            public var repository: Components.Schemas.minimal_hyphen_repository
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// Creates a new `commit_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - html_url:
            ///   - comments_url:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - repository:
            ///   - score:
            ///   - node_id:
            ///   - text_matches:
            public init(
                url: Swift.String,
                sha: Swift.String,
                html_url: Swift.String,
                comments_url: Swift.String,
                commit: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.commitPayload,
                author: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                committer: Components.Schemas.nullable_hyphen_git_hyphen_user? = nil,
                parents: Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item.parentsPayload,
                repository: Components.Schemas.minimal_hyphen_repository,
                score: Swift.Double,
                node_id: Swift.String,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil
            ) {
                self.url = url
                self.sha = sha
                self.html_url = html_url
                self.comments_url = comments_url
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.repository = repository
                self.score = score
                self.node_id = node_id
                self.text_matches = text_matches
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case sha
                case html_url
                case comments_url
                case commit
                case author
                case committer
                case parents
                case repository
                case score
                case node_id
                case text_matches
            }
        }
        /// Issue Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/issue-search-result-item`.
        public struct issue_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/locked`.
            public var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/active_lock_reason`.
            public var active_lock_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/assignees`.
            public var assignees: [Components.Schemas.simple_hyphen_user]?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/user`.
            public var user: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload`.
            public struct labelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/id`.
                public var id: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/node_id`.
                public var node_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/color`.
                public var color: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/default`.
                public var _default: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labelsPayload/description`.
                public var description: Swift.String?
                /// Creates a new `labelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - node_id:
                ///   - url:
                ///   - name:
                ///   - color:
                ///   - _default:
                ///   - description:
                public init(
                    id: Swift.Int64? = nil,
                    node_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    name: Swift.String? = nil,
                    color: Swift.String? = nil,
                    _default: Swift.Bool? = nil,
                    description: Swift.String? = nil
                ) {
                    self.id = id
                    self.node_id = node_id
                    self.url = url
                    self.name = name
                    self.color = color
                    self._default = _default
                    self.description = description
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case node_id
                    case url
                    case name
                    case color
                    case _default = "default"
                    case description
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labels`.
            public typealias labelsPayload = [Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item.labelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/labels`.
            public var labels: Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item.labelsPayload
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/state_reason`.
            public var state_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/assignee`.
            public var assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/milestone`.
            public var milestone: Components.Schemas.nullable_hyphen_milestone?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/comments`.
            public var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/closed_at`.
            public var closed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request`.
            public struct pull_requestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request/merged_at`.
                public var merged_at: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request/diff_url`.
                public var diff_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request/html_url`.
                public var html_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request/patch_url`.
                public var patch_url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request/url`.
                public var url: Swift.String?
                /// Creates a new `pull_requestPayload`.
                ///
                /// - Parameters:
                ///   - merged_at:
                ///   - diff_url:
                ///   - html_url:
                ///   - patch_url:
                ///   - url:
                public init(
                    merged_at: Foundation.Date? = nil,
                    diff_url: Swift.String? = nil,
                    html_url: Swift.String? = nil,
                    patch_url: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.merged_at = merged_at
                    self.diff_url = diff_url
                    self.html_url = html_url
                    self.patch_url = patch_url
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case merged_at
                    case diff_url
                    case html_url
                    case patch_url
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/pull_request`.
            public var pull_request: Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item.pull_requestPayload?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/author_association`.
            public var author_association: Components.Schemas.author_hyphen_association
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/draft`.
            public var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/repository`.
            public var repository: Components.Schemas.repository?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/body_html`.
            public var body_html: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/body_text`.
            public var body_text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/timeline_url`.
            public var timeline_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/performed_via_github_app`.
            public var performed_via_github_app: Components.Schemas.nullable_hyphen_integration?
            /// - Remark: Generated from `#/components/schemas/issue-search-result-item/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `issue_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - repository_url:
            ///   - labels_url:
            ///   - comments_url:
            ///   - events_url:
            ///   - html_url:
            ///   - id:
            ///   - node_id:
            ///   - number:
            ///   - title:
            ///   - locked:
            ///   - active_lock_reason:
            ///   - assignees:
            ///   - user:
            ///   - labels:
            ///   - state:
            ///   - state_reason:
            ///   - assignee:
            ///   - milestone:
            ///   - comments:
            ///   - created_at:
            ///   - updated_at:
            ///   - closed_at:
            ///   - text_matches:
            ///   - pull_request:
            ///   - body:
            ///   - score:
            ///   - author_association:
            ///   - draft:
            ///   - repository:
            ///   - body_html:
            ///   - body_text:
            ///   - timeline_url:
            ///   - performed_via_github_app:
            ///   - reactions:
            public init(
                url: Swift.String,
                repository_url: Swift.String,
                labels_url: Swift.String,
                comments_url: Swift.String,
                events_url: Swift.String,
                html_url: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                number: Swift.Int,
                title: Swift.String,
                locked: Swift.Bool,
                active_lock_reason: Swift.String? = nil,
                assignees: [Components.Schemas.simple_hyphen_user]? = nil,
                user: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                labels: Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item.labelsPayload,
                state: Swift.String,
                state_reason: Swift.String? = nil,
                assignee: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                milestone: Components.Schemas.nullable_hyphen_milestone? = nil,
                comments: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                closed_at: Foundation.Date? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil,
                pull_request: Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item.pull_requestPayload? = nil,
                body: Swift.String? = nil,
                score: Swift.Double,
                author_association: Components.Schemas.author_hyphen_association,
                draft: Swift.Bool? = nil,
                repository: Components.Schemas.repository? = nil,
                body_html: Swift.String? = nil,
                body_text: Swift.String? = nil,
                timeline_url: Swift.String? = nil,
                performed_via_github_app: Components.Schemas.nullable_hyphen_integration? = nil,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.url = url
                self.repository_url = repository_url
                self.labels_url = labels_url
                self.comments_url = comments_url
                self.events_url = events_url
                self.html_url = html_url
                self.id = id
                self.node_id = node_id
                self.number = number
                self.title = title
                self.locked = locked
                self.active_lock_reason = active_lock_reason
                self.assignees = assignees
                self.user = user
                self.labels = labels
                self.state = state
                self.state_reason = state_reason
                self.assignee = assignee
                self.milestone = milestone
                self.comments = comments
                self.created_at = created_at
                self.updated_at = updated_at
                self.closed_at = closed_at
                self.text_matches = text_matches
                self.pull_request = pull_request
                self.body = body
                self.score = score
                self.author_association = author_association
                self.draft = draft
                self.repository = repository
                self.body_html = body_html
                self.body_text = body_text
                self.timeline_url = timeline_url
                self.performed_via_github_app = performed_via_github_app
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case repository_url
                case labels_url
                case comments_url
                case events_url
                case html_url
                case id
                case node_id
                case number
                case title
                case locked
                case active_lock_reason
                case assignees
                case user
                case labels
                case state
                case state_reason
                case assignee
                case milestone
                case comments
                case created_at
                case updated_at
                case closed_at
                case text_matches
                case pull_request
                case body
                case score
                case author_association
                case draft
                case repository
                case body_html
                case body_text
                case timeline_url
                case performed_via_github_app
                case reactions
            }
        }
        /// Label Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/label-search-result-item`.
        public struct label_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/color`.
            public var color: Swift.String
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/default`.
            public var _default: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/label-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// Creates a new `label_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - name:
            ///   - color:
            ///   - _default:
            ///   - description:
            ///   - score:
            ///   - text_matches:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                name: Swift.String,
                color: Swift.String,
                _default: Swift.Bool,
                description: Swift.String? = nil,
                score: Swift.Double,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.name = name
                self.color = color
                self._default = _default
                self.description = description
                self.score = score
                self.text_matches = text_matches
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case name
                case color
                case _default = "default"
                case description
                case score
                case text_matches
            }
        }
        /// Repo Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/repo-search-result-item`.
        public struct repo_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/pushed_at`.
            public var pushed_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/watchers_count`.
            public var watchers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/master_branch`.
            public var master_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_issues`.
            public var has_issues: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_projects`.
            public var has_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_pages`.
            public var has_pages: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_downloads`.
            public var has_downloads: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions/pull`.
                public var pull: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/permissions`.
            public var permissions: Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repo-search-result-item/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// Creates a new `repo_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - created_at:
            ///   - updated_at:
            ///   - pushed_at:
            ///   - homepage:
            ///   - size:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - language:
            ///   - forks_count:
            ///   - open_issues_count:
            ///   - master_branch:
            ///   - default_branch:
            ///   - score:
            ///   - forks_url:
            ///   - keys_url:
            ///   - collaborators_url:
            ///   - teams_url:
            ///   - hooks_url:
            ///   - issue_events_url:
            ///   - events_url:
            ///   - assignees_url:
            ///   - branches_url:
            ///   - tags_url:
            ///   - blobs_url:
            ///   - git_tags_url:
            ///   - git_refs_url:
            ///   - trees_url:
            ///   - statuses_url:
            ///   - languages_url:
            ///   - stargazers_url:
            ///   - contributors_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - commits_url:
            ///   - git_commits_url:
            ///   - comments_url:
            ///   - issue_comment_url:
            ///   - contents_url:
            ///   - compare_url:
            ///   - merges_url:
            ///   - archive_url:
            ///   - downloads_url:
            ///   - issues_url:
            ///   - pulls_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - labels_url:
            ///   - releases_url:
            ///   - deployments_url:
            ///   - git_url:
            ///   - ssh_url:
            ///   - clone_url:
            ///   - svn_url:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - topics:
            ///   - mirror_url:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_pages:
            ///   - has_wiki:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - license:
            ///   - permissions:
            ///   - text_matches:
            ///   - temp_clone_token:
            ///   - allow_merge_commit:
            ///   - allow_squash_merge:
            ///   - allow_rebase_merge:
            ///   - allow_auto_merge:
            ///   - delete_branch_on_merge:
            ///   - allow_forking:
            ///   - is_template:
            ///   - web_commit_signoff_required:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                pushed_at: Foundation.Date,
                homepage: Swift.String? = nil,
                size: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                open_issues_count: Swift.Int,
                master_branch: Swift.String? = nil,
                default_branch: Swift.String,
                score: Swift.Double,
                forks_url: Swift.String,
                keys_url: Swift.String,
                collaborators_url: Swift.String,
                teams_url: Swift.String,
                hooks_url: Swift.String,
                issue_events_url: Swift.String,
                events_url: Swift.String,
                assignees_url: Swift.String,
                branches_url: Swift.String,
                tags_url: Swift.String,
                blobs_url: Swift.String,
                git_tags_url: Swift.String,
                git_refs_url: Swift.String,
                trees_url: Swift.String,
                statuses_url: Swift.String,
                languages_url: Swift.String,
                stargazers_url: Swift.String,
                contributors_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                commits_url: Swift.String,
                git_commits_url: Swift.String,
                comments_url: Swift.String,
                issue_comment_url: Swift.String,
                contents_url: Swift.String,
                compare_url: Swift.String,
                merges_url: Swift.String,
                archive_url: Swift.String,
                downloads_url: Swift.String,
                issues_url: Swift.String,
                pulls_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                labels_url: Swift.String,
                releases_url: Swift.String,
                deployments_url: Swift.String,
                git_url: Swift.String,
                ssh_url: Swift.String,
                clone_url: Swift.String,
                svn_url: Swift.String,
                forks: Swift.Int,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                topics: [Swift.String]? = nil,
                mirror_url: Swift.String? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_pages: Swift.Bool,
                has_wiki: Swift.Bool,
                has_downloads: Swift.Bool,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                permissions: Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item.permissionsPayload? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                is_template: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.created_at = created_at
                self.updated_at = updated_at
                self.pushed_at = pushed_at
                self.homepage = homepage
                self.size = size
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.language = language
                self.forks_count = forks_count
                self.open_issues_count = open_issues_count
                self.master_branch = master_branch
                self.default_branch = default_branch
                self.score = score
                self.forks_url = forks_url
                self.keys_url = keys_url
                self.collaborators_url = collaborators_url
                self.teams_url = teams_url
                self.hooks_url = hooks_url
                self.issue_events_url = issue_events_url
                self.events_url = events_url
                self.assignees_url = assignees_url
                self.branches_url = branches_url
                self.tags_url = tags_url
                self.blobs_url = blobs_url
                self.git_tags_url = git_tags_url
                self.git_refs_url = git_refs_url
                self.trees_url = trees_url
                self.statuses_url = statuses_url
                self.languages_url = languages_url
                self.stargazers_url = stargazers_url
                self.contributors_url = contributors_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.commits_url = commits_url
                self.git_commits_url = git_commits_url
                self.comments_url = comments_url
                self.issue_comment_url = issue_comment_url
                self.contents_url = contents_url
                self.compare_url = compare_url
                self.merges_url = merges_url
                self.archive_url = archive_url
                self.downloads_url = downloads_url
                self.issues_url = issues_url
                self.pulls_url = pulls_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.labels_url = labels_url
                self.releases_url = releases_url
                self.deployments_url = deployments_url
                self.git_url = git_url
                self.ssh_url = ssh_url
                self.clone_url = clone_url
                self.svn_url = svn_url
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.topics = topics
                self.mirror_url = mirror_url
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_pages = has_pages
                self.has_wiki = has_wiki
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.license = license
                self.permissions = permissions
                self.text_matches = text_matches
                self.temp_clone_token = temp_clone_token
                self.allow_merge_commit = allow_merge_commit
                self.allow_squash_merge = allow_squash_merge
                self.allow_rebase_merge = allow_rebase_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_forking = allow_forking
                self.is_template = is_template
                self.web_commit_signoff_required = web_commit_signoff_required
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case created_at
                case updated_at
                case pushed_at
                case homepage
                case size
                case stargazers_count
                case watchers_count
                case language
                case forks_count
                case open_issues_count
                case master_branch
                case default_branch
                case score
                case forks_url
                case keys_url
                case collaborators_url
                case teams_url
                case hooks_url
                case issue_events_url
                case events_url
                case assignees_url
                case branches_url
                case tags_url
                case blobs_url
                case git_tags_url
                case git_refs_url
                case trees_url
                case statuses_url
                case languages_url
                case stargazers_url
                case contributors_url
                case subscribers_url
                case subscription_url
                case commits_url
                case git_commits_url
                case comments_url
                case issue_comment_url
                case contents_url
                case compare_url
                case merges_url
                case archive_url
                case downloads_url
                case issues_url
                case pulls_url
                case milestones_url
                case notifications_url
                case labels_url
                case releases_url
                case deployments_url
                case git_url
                case ssh_url
                case clone_url
                case svn_url
                case forks
                case open_issues
                case watchers
                case topics
                case mirror_url
                case has_issues
                case has_projects
                case has_pages
                case has_wiki
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case license
                case permissions
                case text_matches
                case temp_clone_token
                case allow_merge_commit
                case allow_squash_merge
                case allow_rebase_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_forking
                case is_template
                case web_commit_signoff_required
            }
        }
        /// Topic Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/topic-search-result-item`.
        public struct topic_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/display_name`.
            public var display_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/short_description`.
            public var short_description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/created_by`.
            public var created_by: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/released`.
            public var released: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/featured`.
            public var featured: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/curated`.
            public var curated: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/repository_count`.
            public var repository_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/logo_url`.
            public var logo_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload`.
            public struct relatedPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation`.
                public struct topic_relationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation/topic_id`.
                    public var topic_id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation/relation_type`.
                    public var relation_type: Swift.String?
                    /// Creates a new `topic_relationPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - name:
                    ///   - topic_id:
                    ///   - relation_type:
                    public init(
                        id: Swift.Int? = nil,
                        name: Swift.String? = nil,
                        topic_id: Swift.Int? = nil,
                        relation_type: Swift.String? = nil
                    ) {
                        self.id = id
                        self.name = name
                        self.topic_id = topic_id
                        self.relation_type = relation_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case name
                        case topic_id
                        case relation_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/topic-search-result-item/relatedPayload/topic_relation`.
                public var topic_relation: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.relatedPayloadPayload.topic_relationPayload?
                /// Creates a new `relatedPayloadPayload`.
                ///
                /// - Parameters:
                ///   - topic_relation:
                public init(topic_relation: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.relatedPayloadPayload.topic_relationPayload? = nil) {
                    self.topic_relation = topic_relation
                }
                public enum CodingKeys: String, CodingKey {
                    case topic_relation
                }
            }
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/related`.
            public typealias relatedPayload = [Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.relatedPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/related`.
            public var related: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.relatedPayload?
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload`.
            public struct aliasesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation`.
                public struct topic_relationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation/id`.
                    public var id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation/name`.
                    public var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation/topic_id`.
                    public var topic_id: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation/relation_type`.
                    public var relation_type: Swift.String?
                    /// Creates a new `topic_relationPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - name:
                    ///   - topic_id:
                    ///   - relation_type:
                    public init(
                        id: Swift.Int? = nil,
                        name: Swift.String? = nil,
                        topic_id: Swift.Int? = nil,
                        relation_type: Swift.String? = nil
                    ) {
                        self.id = id
                        self.name = name
                        self.topic_id = topic_id
                        self.relation_type = relation_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case id
                        case name
                        case topic_id
                        case relation_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliasesPayload/topic_relation`.
                public var topic_relation: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.aliasesPayloadPayload.topic_relationPayload?
                /// Creates a new `aliasesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - topic_relation:
                public init(topic_relation: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.aliasesPayloadPayload.topic_relationPayload? = nil) {
                    self.topic_relation = topic_relation
                }
                public enum CodingKeys: String, CodingKey {
                    case topic_relation
                }
            }
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliases`.
            public typealias aliasesPayload = [Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.aliasesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/topic-search-result-item/aliases`.
            public var aliases: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.aliasesPayload?
            /// Creates a new `topic_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - display_name:
            ///   - short_description:
            ///   - description:
            ///   - created_by:
            ///   - released:
            ///   - created_at:
            ///   - updated_at:
            ///   - featured:
            ///   - curated:
            ///   - score:
            ///   - repository_count:
            ///   - logo_url:
            ///   - text_matches:
            ///   - related:
            ///   - aliases:
            public init(
                name: Swift.String,
                display_name: Swift.String? = nil,
                short_description: Swift.String? = nil,
                description: Swift.String? = nil,
                created_by: Swift.String? = nil,
                released: Swift.String? = nil,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                featured: Swift.Bool,
                curated: Swift.Bool,
                score: Swift.Double,
                repository_count: Swift.Int? = nil,
                logo_url: Swift.String? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil,
                related: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.relatedPayload? = nil,
                aliases: Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item.aliasesPayload? = nil
            ) {
                self.name = name
                self.display_name = display_name
                self.short_description = short_description
                self.description = description
                self.created_by = created_by
                self.released = released
                self.created_at = created_at
                self.updated_at = updated_at
                self.featured = featured
                self.curated = curated
                self.score = score
                self.repository_count = repository_count
                self.logo_url = logo_url
                self.text_matches = text_matches
                self.related = related
                self.aliases = aliases
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case display_name
                case short_description
                case description
                case created_by
                case released
                case created_at
                case updated_at
                case featured
                case curated
                case score
                case repository_count
                case logo_url
                case text_matches
                case related
                case aliases
            }
        }
        /// User Search Result Item
        ///
        /// - Remark: Generated from `#/components/schemas/user-search-result-item`.
        public struct user_hyphen_search_hyphen_result_hyphen_item: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/score`.
            public var score: Swift.Double
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/public_repos`.
            public var public_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/public_gists`.
            public var public_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/followers`.
            public var followers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/following`.
            public var following: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/bio`.
            public var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/hireable`.
            public var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/text_matches`.
            public var text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/user-search-result-item/suspended_at`.
            public var suspended_at: Foundation.Date?
            /// Creates a new `user_hyphen_search_hyphen_result_hyphen_item`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - score:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - events_url:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - created_at:
            ///   - updated_at:
            ///   - name:
            ///   - bio:
            ///   - email:
            ///   - location:
            ///   - site_admin:
            ///   - hireable:
            ///   - text_matches:
            ///   - blog:
            ///   - company:
            ///   - suspended_at:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                score: Swift.Double,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                events_url: Swift.String,
                public_repos: Swift.Int? = nil,
                public_gists: Swift.Int? = nil,
                followers: Swift.Int? = nil,
                following: Swift.Int? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                name: Swift.String? = nil,
                bio: Swift.String? = nil,
                email: Swift.String? = nil,
                location: Swift.String? = nil,
                site_admin: Swift.Bool,
                hireable: Swift.Bool? = nil,
                text_matches: Components.Schemas.search_hyphen_result_hyphen_text_hyphen_matches? = nil,
                blog: Swift.String? = nil,
                company: Swift.String? = nil,
                suspended_at: Foundation.Date? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.received_events_url = received_events_url
                self._type = _type
                self.score = score
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.events_url = events_url
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.created_at = created_at
                self.updated_at = updated_at
                self.name = name
                self.bio = bio
                self.email = email
                self.location = location
                self.site_admin = site_admin
                self.hireable = hireable
                self.text_matches = text_matches
                self.blog = blog
                self.company = company
                self.suspended_at = suspended_at
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case received_events_url
                case _type = "type"
                case score
                case following_url
                case gists_url
                case starred_url
                case events_url
                case public_repos
                case public_gists
                case followers
                case following
                case created_at
                case updated_at
                case name
                case bio
                case email
                case location
                case site_admin
                case hireable
                case text_matches
                case blog
                case company
                case suspended_at
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
        ///
        /// - Remark: Generated from `#/components/parameters/order`.
        @frozen public enum order: String, Codable, Hashable, Sendable {
            case desc = "desc"
            case asc = "asc"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
        public struct service_unavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    public var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    public var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    public var documentation_url: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentation_url:
                    public init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentation_url: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentation_url = documentation_url
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentation_url
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.service_unavailable.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.service_unavailable.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.service_unavailable.Body
            /// Creates a new `service_unavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.service_unavailable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Search code
    ///
    /// Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
    ///
    /// `q=addClass+in:file+language:js+repo:jquery/jquery`
    ///
    /// This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
    ///
    /// Considerations for code search:
    ///
    /// Due to the complexity of searching code, there are a few restrictions on how searches are performed:
    ///
    /// *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
    /// *   Only files smaller than 384 KB are searchable.
    /// *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
    /// language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
    ///
    /// This endpoint requires you to authenticate and limits you to 10 requests per minute.
    ///
    /// - Remark: HTTP `GET /search/code`.
    /// - Remark: Generated from `#/paths//search/code/get(search/code)`.
    public enum search_sol_code {
        public static let id: Swift.String = "search/code"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/code/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/code/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/code/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case indexed = "indexed"
                }
                /// **This field is deprecated.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/code/GET/query/sort`.
                @available(*, deprecated)
                public var sort: Operations.search_sol_code.Input.Query.sortPayload?
                /// - Remark: Generated from `#/paths/search/code/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// **This field is deprecated.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. 
                ///
                /// - Remark: Generated from `#/paths/search/code/GET/query/order`.
                @available(*, deprecated)
                public var order: Operations.search_sol_code.Input.Query.orderPayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/code/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/code/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
                ///   - sort: **This field is deprecated.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: **This field is deprecated.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. 
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_code.Input.Query.sortPayload? = nil,
                    order: Operations.search_sol_code.Input.Query.orderPayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_code.Input.Query
            /// - Remark: Generated from `#/paths/search/code/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_code.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_code.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_code.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_code.Input.Query,
                headers: Operations.search_sol_code.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.code_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.code_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/code/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_code.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_code.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_code.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_code.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/code/get(search/code)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_code.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_code.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/code/get(search/code)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//search/code/get(search/code)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/code/get(search/code)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//search/code/get(search/code)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search commits
    ///
    /// Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
    /// metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
    ///
    /// `q=repo:octocat/Spoon-Knife+css`
    ///
    /// - Remark: HTTP `GET /search/commits`.
    /// - Remark: Generated from `#/paths//search/commits/get(search/commits)`.
    public enum search_sol_commits {
        public static let id: Swift.String = "search/commits"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/commits/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/commits/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/commits/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case author_hyphen_date = "author-date"
                    case committer_hyphen_date = "committer-date"
                }
                /// Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/commits/GET/query/sort`.
                public var sort: Operations.search_sol_commits.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/commits/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/commits/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/commits/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
                ///   - sort: Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_commits.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_commits.Input.Query
            /// - Remark: Generated from `#/paths/search/commits/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_commits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_commits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_commits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_commits.Input.Query,
                headers: Operations.search_sol_commits.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.commit_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/commits/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_commits.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_commits.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_commits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_commits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/commits/get(search/commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_commits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_commits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/commits/get(search/commits)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search issues and pull requests
    ///
    /// Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
    /// search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
    ///
    /// `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
    ///
    /// This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
    ///
    /// **Note:** For requests made by GitHub Apps with a user access token, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    ///
    /// - Remark: HTTP `GET /search/issues`.
    /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)`.
    public enum search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests {
        public static let id: Swift.String = "search/issues-and-pull-requests"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/issues/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/issues/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/issues/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case comments = "comments"
                    case reactions = "reactions"
                    case reactions_hyphen__plus_1 = "reactions-+1"
                    case reactions_hyphen__hyphen_1 = "reactions--1"
                    case reactions_hyphen_smile = "reactions-smile"
                    case reactions_hyphen_thinking_face = "reactions-thinking_face"
                    case reactions_hyphen_heart = "reactions-heart"
                    case reactions_hyphen_tada = "reactions-tada"
                    case interactions = "interactions"
                    case created = "created"
                    case updated = "updated"
                }
                /// Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/issues/GET/query/sort`.
                public var sort: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/issues/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/issues/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/issues/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
                ///   - sort: Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Query
            /// - Remark: Generated from `#/paths/search/issues/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Query,
                headers: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.issue_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/issues/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_issues_hyphen_and_hyphen_pull_hyphen_requests.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//search/issues/get(search/issues-and-pull-requests)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search labels
    ///
    /// Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
    ///
    /// `q=bug+defect+enhancement&repository_id=64778136`
    ///
    /// The labels that best match the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/labels`.
    /// - Remark: Generated from `#/paths//search/labels/get(search/labels)`.
    public enum search_sol_labels {
        public static let id: Swift.String = "search/labels"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/labels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The id of the repository.
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/repository_id`.
                public var repository_id: Swift.Int
                /// The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/labels/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case created = "created"
                    case updated = "updated"
                }
                /// Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/sort`.
                public var sort: Operations.search_sol_labels.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/labels/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - repository_id: The id of the repository.
                ///   - q: The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
                ///   - sort: Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    repository_id: Swift.Int,
                    q: Swift.String,
                    sort: Operations.search_sol_labels.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.repository_id = repository_id
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_labels.Input.Query
            /// - Remark: Generated from `#/paths/search/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_labels.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_labels.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_labels.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_labels.Input.Query,
                headers: Operations.search_sol_labels.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.label_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.label_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/labels/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_labels.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_labels.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_labels.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_labels.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/labels/get(search/labels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_labels.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_labels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/labels/get(search/labels)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//search/labels/get(search/labels)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//search/labels/get(search/labels)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/labels/get(search/labels)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search repositories
    ///
    /// Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    ///
    /// `q=tetris+language:assembly&sort=stars&order=desc`
    ///
    /// This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/repositories`.
    /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)`.
    public enum search_sol_repos {
        public static let id: Swift.String = "search/repos"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/repositories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case stars = "stars"
                    case forks = "forks"
                    case help_hyphen_wanted_hyphen_issues = "help-wanted-issues"
                    case updated = "updated"
                }
                /// Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/sort`.
                public var sort: Operations.search_sol_repos.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/repositories/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
                ///   - sort: Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_repos.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_repos.Input.Query
            /// - Remark: Generated from `#/paths/search/repositories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_repos.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_repos.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_repos.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_repos.Input.Query,
                headers: Operations.search_sol_repos.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.repo_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/repositories/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_repos.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_repos.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_repos.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_repos.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_repos.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_repos.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/repositories/get(search/repos)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search topics
    ///
    /// Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
    ///
    /// When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
    ///
    /// `q=ruby+is:featured`
    ///
    /// This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
    ///
    /// - Remark: HTTP `GET /search/topics`.
    /// - Remark: Generated from `#/paths//search/topics/get(search/topics)`.
    public enum search_sol_topics {
        public static let id: Swift.String = "search/topics"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/topics/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
                ///
                /// - Remark: Generated from `#/paths/search/topics/GET/query/q`.
                public var q: Swift.String
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/topics/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/topics/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_topics.Input.Query
            /// - Remark: Generated from `#/paths/search/topics/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_topics.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_topics.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_topics.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_topics.Input.Query,
                headers: Operations.search_sol_topics.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.topic_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/topics/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_topics.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_topics.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_topics.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_topics.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/topics/get(search/topics)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_topics.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_topics.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/topics/get(search/topics)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Search users
    ///
    /// Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
    ///
    /// When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    ///
    /// For example, if you're looking for a list of popular users, you might try this query:
    ///
    /// `q=tom+repos:%3E42+followers:%3E1000`
    ///
    /// This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
    ///
    /// This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
    ///
    /// - Remark: HTTP `GET /search/users`.
    /// - Remark: Generated from `#/paths//search/users/get(search/users)`.
    public enum search_sol_users {
        public static let id: Swift.String = "search/users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
                ///
                /// - Remark: Generated from `#/paths/search/users/GET/query/q`.
                public var q: Swift.String
                /// - Remark: Generated from `#/paths/search/users/GET/query/sort`.
                @frozen public enum sortPayload: String, Codable, Hashable, Sendable {
                    case followers = "followers"
                    case repositories = "repositories"
                    case joined = "joined"
                }
                /// Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///
                /// - Remark: Generated from `#/paths/search/users/GET/query/sort`.
                public var sort: Operations.search_sol_users.Input.Query.sortPayload?
                /// - Remark: Generated from `#/components/parameters/order`.
                @frozen public enum order: String, Codable, Hashable, Sendable {
                    case desc = "desc"
                    case asc = "asc"
                }
                /// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///
                /// - Remark: Generated from `#/paths/search/users/GET/query/order`.
                public var order: Components.Parameters.order?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/users/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/search/users/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - q: The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
                ///   - sort: Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)
                ///   - order: Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    q: Swift.String,
                    sort: Operations.search_sol_users.Input.Query.sortPayload? = nil,
                    order: Components.Parameters.order? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.q = q
                    self.sort = sort
                    self.order = order
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.search_sol_users.Input.Query
            /// - Remark: Generated from `#/paths/search/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_users.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search_sol_users.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search_sol_users.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search_sol_users.Input.Query,
                headers: Operations.search_sol_users.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content/json/total_count`.
                        public var total_count: Swift.Int
                        /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content/json/incomplete_results`.
                        public var incomplete_results: Swift.Bool
                        /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.user_hyphen_search_hyphen_result_hyphen_item]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - total_count:
                        ///   - incomplete_results:
                        ///   - items:
                        public init(
                            total_count: Swift.Int,
                            incomplete_results: Swift.Bool,
                            items: [Components.Schemas.user_hyphen_search_hyphen_result_hyphen_item]
                        ) {
                            self.total_count = total_count
                            self.incomplete_results = incomplete_results
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case total_count
                            case incomplete_results
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/search/users/GET/responses/200/content/application\/json`.
                    case json(Operations.search_sol_users.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search_sol_users.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search_sol_users.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search_sol_users.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//search/users/get(search/users)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search_sol_users.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search_sol_users.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//search/users/get(search/users)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//search/users/get(search/users)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.service_unavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Components.Responses.service_unavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//search/users/get(search/users)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
