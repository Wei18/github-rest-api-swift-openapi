// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List teams
    ///
    /// Lists all teams in an organization that are visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/get(teams/list)`.
    func teams_sol_list(_ input: Operations.teams_sol_list.Input) async throws -> Operations.teams_sol_list.Output
    /// Create a team
    ///
    /// To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
    ///
    /// When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)`.
    func teams_sol_create(_ input: Operations.teams_sol_create.Input) async throws -> Operations.teams_sol_create.Output
    /// Get a team by name
    ///
    /// Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam NÃ¤me"` would become `my-team-name`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/get(teams/get-by-name)`.
    func teams_sol_get_hyphen_by_hyphen_name(_ input: Operations.teams_sol_get_hyphen_by_hyphen_name.Input) async throws -> Operations.teams_sol_get_hyphen_by_hyphen_name.Output
    /// Update a team
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)`.
    func teams_sol_update_hyphen_in_hyphen_org(_ input: Operations.teams_sol_update_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_update_hyphen_in_hyphen_org.Output
    /// Delete a team
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/delete(teams/delete-in-org)`.
    func teams_sol_delete_hyphen_in_hyphen_org(_ input: Operations.teams_sol_delete_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_delete_hyphen_in_hyphen_org.Output
    /// List discussions
    ///
    /// List all discussions on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/get(teams/list-discussions-in-org)`.
    func teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output
    /// Create a discussion
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/post(teams/create-discussion-in-org)`.
    func teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org(_ input: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output
    /// Get a discussion
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/get(teams/get-discussion-in-org)`.
    func teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org(_ input: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output
    /// Update a discussion
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/patch(teams/update-discussion-in-org)`.
    func teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org(_ input: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output
    /// Delete a discussion
    ///
    /// Delete a discussion from a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/delete(teams/delete-discussion-in-org)`.
    func teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org(_ input: Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Output
    /// List discussion comments
    ///
    /// List all comments on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-in-org)`.
    func teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output
    /// Create a discussion comment
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-in-org)`.
    func teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(_ input: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output
    /// Get a discussion comment
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-in-org)`.
    func teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(_ input: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output
    /// Update a discussion comment
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-in-org)`.
    func teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(_ input: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output
    /// Delete a discussion comment
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-in-org)`.
    func teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(_ input: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output
    /// List pending team invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/invitations/get(teams/list-pending-invitations-in-org)`.
    func teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output
    /// List team members
    ///
    /// Team members will include the members of child teams.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/members/get(teams/list-members-in-org)`.
    func teams_sol_list_hyphen_members_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output
    /// Get team membership for a user
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/get(teams/get-membership-for-user-in-org)`.
    func teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(_ input: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output
    /// Add or update team membership for a user
    ///
    /// Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)`.
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output
    /// Remove team membership for a user
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/delete(teams/remove-membership-for-user-in-org)`.
    func teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(_ input: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output
    /// List team projects
    ///
    /// Lists the organization projects for a team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/get(teams/list-projects-in-org)`.
    func teams_sol_list_hyphen_projects_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output
    /// Check team permissions for a project
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/get(teams/check-permissions-for-project-in-org)`.
    func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org(_ input: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output
    /// Add or update team project permissions
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/put(teams/add-or-update-project-permissions-in-org)`.
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output
    /// Remove a project from a team
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/delete(teams/remove-project-in-org)`.
    func teams_sol_remove_hyphen_project_hyphen_in_hyphen_org(_ input: Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Output
    /// List team repositories
    ///
    /// Lists a team's repositories visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/get(teams/list-repos-in-org)`.
    func teams_sol_list_hyphen_repos_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output
    /// Check team permissions for a repository
    ///
    /// Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
    ///
    /// If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
    ///
    /// If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)`.
    func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org(_ input: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output
    /// Add or update team repository permissions
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-in-org)`.
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Output
    /// Remove a repository from a team
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/delete(teams/remove-repo-in-org)`.
    func teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org(_ input: Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Output
    /// List child teams
    ///
    /// Lists the child teams of the team specified by `{team_slug}`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/teams/get(teams/list-child-in-org)`.
    func teams_sol_list_hyphen_child_hyphen_in_hyphen_org(_ input: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input) async throws -> Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output
    /// Get a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/get(teams/get-legacy)`.
    @available(*, deprecated)
    func teams_sol_get_hyphen_legacy(_ input: Operations.teams_sol_get_hyphen_legacy.Input) async throws -> Operations.teams_sol_get_hyphen_legacy.Output
    /// Update a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)`.
    @available(*, deprecated)
    func teams_sol_update_hyphen_legacy(_ input: Operations.teams_sol_update_hyphen_legacy.Input) async throws -> Operations.teams_sol_update_hyphen_legacy.Output
    /// Delete a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)`.
    @available(*, deprecated)
    func teams_sol_delete_hyphen_legacy(_ input: Operations.teams_sol_delete_hyphen_legacy.Input) async throws -> Operations.teams_sol_delete_hyphen_legacy.Output
    /// List discussions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
    ///
    /// List all discussions on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/get(teams/list-discussions-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_discussions_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output
    /// Create a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/post(teams/create-discussion-legacy)`.
    @available(*, deprecated)
    func teams_sol_create_hyphen_discussion_hyphen_legacy(_ input: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output
    /// Get a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/get(teams/get-discussion-legacy)`.
    @available(*, deprecated)
    func teams_sol_get_hyphen_discussion_hyphen_legacy(_ input: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output
    /// Update a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/patch(teams/update-discussion-legacy)`.
    @available(*, deprecated)
    func teams_sol_update_hyphen_discussion_hyphen_legacy(_ input: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output
    /// Delete a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
    ///
    /// Delete a discussion from a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/delete(teams/delete-discussion-legacy)`.
    @available(*, deprecated)
    func teams_sol_delete_hyphen_discussion_hyphen_legacy(_ input: Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Input) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Output
    /// List discussion comments (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
    ///
    /// List all comments on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output
    /// Create a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-legacy)`.
    @available(*, deprecated)
    func teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy(_ input: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output
    /// Get a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-legacy)`.
    @available(*, deprecated)
    func teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy(_ input: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output
    /// Update a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-legacy)`.
    @available(*, deprecated)
    func teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy(_ input: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output
    /// Delete a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-legacy)`.
    @available(*, deprecated)
    func teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy(_ input: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Input) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Output
    /// List pending team invitations (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/invitations`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/invitations/get(teams/list-pending-invitations-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output
    /// List team members (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/get(teams/list-members-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_members_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output
    /// Get team member (Legacy)
    ///
    /// The "Get team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/get(teams/get-member-legacy)`.
    @available(*, deprecated)
    func teams_sol_get_hyphen_member_hyphen_legacy(_ input: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Input) async throws -> Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output
    /// Add team member (Legacy)
    ///
    /// The "Add team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)`.
    @available(*, deprecated)
    func teams_sol_add_hyphen_member_hyphen_legacy(_ input: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input) async throws -> Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output
    /// Remove team member (Legacy)
    ///
    /// The "Remove team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/delete(teams/remove-member-legacy)`.
    @available(*, deprecated)
    func teams_sol_remove_hyphen_member_hyphen_legacy(_ input: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Input) async throws -> Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output
    /// Get team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/get(teams/get-membership-for-user-legacy)`.
    @available(*, deprecated)
    func teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(_ input: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input) async throws -> Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output
    /// Add or update team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)`.
    @available(*, deprecated)
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output
    /// Remove team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/delete(teams/remove-membership-for-user-legacy)`.
    @available(*, deprecated)
    func teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(_ input: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input) async throws -> Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output
    /// List team projects (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.
    ///
    /// Lists the organization projects for a team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/get(teams/list-projects-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_projects_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output
    /// Check team permissions for a project (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/get(teams/check-permissions-for-project-legacy)`.
    @available(*, deprecated)
    func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy(_ input: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output
    /// Add or update team project permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)`.
    @available(*, deprecated)
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output
    /// Remove a project from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)`.
    @available(*, deprecated)
    func teams_sol_remove_hyphen_project_hyphen_legacy(_ input: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input) async throws -> Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Output
    /// List team repositories (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/get(teams/list-repos-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_repos_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output
    /// Check team permissions for a repository (Legacy)
    ///
    /// **Note**: Repositories inherited through a parent team will also be checked.
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)`.
    @available(*, deprecated)
    func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy(_ input: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output
    /// Add or update team repository permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)`.
    @available(*, deprecated)
    func teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy(_ input: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Output
    /// Remove a repository from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/delete(teams/remove-repo-legacy)`.
    @available(*, deprecated)
    func teams_sol_remove_hyphen_repo_hyphen_legacy(_ input: Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Input) async throws -> Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Output
    /// List child teams (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/teams`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)`.
    @available(*, deprecated)
    func teams_sol_list_hyphen_child_hyphen_legacy(_ input: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input) async throws -> Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output
    /// List teams for the authenticated user
    ///
    /// List all of the teams across all of the organizations to which the authenticated
    /// user belongs.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
    ///
    /// When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
    ///
    /// - Remark: HTTP `GET /user/teams`.
    /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)`.
    func teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(_ input: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input) async throws -> Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List teams
    ///
    /// Lists all teams in an organization that are visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/get(teams/list)`.
    public func teams_sol_list(
        path: Operations.teams_sol_list.Input.Path,
        query: Operations.teams_sol_list.Input.Query = .init(),
        headers: Operations.teams_sol_list.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list.Output {
        try await teams_sol_list(Operations.teams_sol_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a team
    ///
    /// To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
    ///
    /// When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)`.
    public func teams_sol_create(
        path: Operations.teams_sol_create.Input.Path,
        headers: Operations.teams_sol_create.Input.Headers = .init(),
        body: Operations.teams_sol_create.Input.Body
    ) async throws -> Operations.teams_sol_create.Output {
        try await teams_sol_create(Operations.teams_sol_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a team by name
    ///
    /// Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam NÃ¤me"` would become `my-team-name`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/get(teams/get-by-name)`.
    public func teams_sol_get_hyphen_by_hyphen_name(
        path: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Path,
        headers: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_by_hyphen_name.Output {
        try await teams_sol_get_hyphen_by_hyphen_name(Operations.teams_sol_get_hyphen_by_hyphen_name.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a team
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)`.
    public func teams_sol_update_hyphen_in_hyphen_org(
        path: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.teams_sol_update_hyphen_in_hyphen_org.Output {
        try await teams_sol_update_hyphen_in_hyphen_org(Operations.teams_sol_update_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a team
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/delete(teams/delete-in-org)`.
    public func teams_sol_delete_hyphen_in_hyphen_org(path: Operations.teams_sol_delete_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_delete_hyphen_in_hyphen_org.Output {
        try await teams_sol_delete_hyphen_in_hyphen_org(Operations.teams_sol_delete_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List discussions
    ///
    /// List all discussions on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/get(teams/list-discussions-in-org)`.
    public func teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a discussion
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/post(teams/create-discussion-in-org)`.
    public func teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org(
        path: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Body
    ) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output {
        try await teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org(Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a discussion
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/get(teams/get-discussion-in-org)`.
    public func teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org(
        path: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output {
        try await teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org(Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a discussion
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/patch(teams/update-discussion-in-org)`.
    public func teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org(
        path: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output {
        try await teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org(Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a discussion
    ///
    /// Delete a discussion from a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/delete(teams/delete-discussion-in-org)`.
    public func teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Output {
        try await teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org(Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List discussion comments
    ///
    /// List all comments on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-in-org)`.
    public func teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a discussion comment
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-in-org)`.
    public func teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(
        path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
    ) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output {
        try await teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a discussion comment
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-in-org)`.
    public func teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(
        path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output {
        try await teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a discussion comment
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-in-org)`.
    public func teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(
        path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
    ) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output {
        try await teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a discussion comment
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-in-org)`.
    public func teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output {
        try await teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org(Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List pending team invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/invitations/get(teams/list-pending-invitations-in-org)`.
    public func teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List team members
    ///
    /// Team members will include the members of child teams.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/members/get(teams/list-members-in-org)`.
    public func teams_sol_list_hyphen_members_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_members_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get team membership for a user
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/get(teams/get-membership-for-user-in-org)`.
    public func teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(
        path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output {
        try await teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team membership for a user
    ///
    /// Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)`.
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove team membership for a user
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/delete(teams/remove-membership-for-user-in-org)`.
    public func teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output {
        try await teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List team projects
    ///
    /// Lists the organization projects for a team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/get(teams/list-projects-in-org)`.
    public func teams_sol_list_hyphen_projects_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_projects_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check team permissions for a project
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/get(teams/check-permissions-for-project-in-org)`.
    public func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org(
        path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output {
        try await teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team project permissions
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/put(teams/add-or-update-project-permissions-in-org)`.
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Headers = .init(),
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a project from a team
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/delete(teams/remove-project-in-org)`.
    public func teams_sol_remove_hyphen_project_hyphen_in_hyphen_org(path: Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Output {
        try await teams_sol_remove_hyphen_project_hyphen_in_hyphen_org(Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List team repositories
    ///
    /// Lists a team's repositories visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/get(teams/list-repos-in-org)`.
    public func teams_sol_list_hyphen_repos_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_repos_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check team permissions for a repository
    ///
    /// Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
    ///
    /// If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
    ///
    /// If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)`.
    public func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org(
        path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Path,
        headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output {
        try await teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team repository permissions
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-in-org)`.
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Path,
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input(
            path: path,
            body: body
        ))
    }
    /// Remove a repository from a team
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/delete(teams/remove-repo-in-org)`.
    public func teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org(path: Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Output {
        try await teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org(Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Input(path: path))
    }
    /// List child teams
    ///
    /// Lists the child teams of the team specified by `{team_slug}`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/teams/get(teams/list-child-in-org)`.
    public func teams_sol_list_hyphen_child_hyphen_in_hyphen_org(
        path: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Path,
        query: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output {
        try await teams_sol_list_hyphen_child_hyphen_in_hyphen_org(Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/get(teams/get-legacy)`.
    @available(*, deprecated)
    public func teams_sol_get_hyphen_legacy(
        path: Operations.teams_sol_get_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_get_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_legacy.Output {
        try await teams_sol_get_hyphen_legacy(Operations.teams_sol_get_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)`.
    @available(*, deprecated)
    public func teams_sol_update_hyphen_legacy(
        path: Operations.teams_sol_update_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_update_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_legacy.Input.Body
    ) async throws -> Operations.teams_sol_update_hyphen_legacy.Output {
        try await teams_sol_update_hyphen_legacy(Operations.teams_sol_update_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)`.
    @available(*, deprecated)
    public func teams_sol_delete_hyphen_legacy(
        path: Operations.teams_sol_delete_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_delete_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_delete_hyphen_legacy.Output {
        try await teams_sol_delete_hyphen_legacy(Operations.teams_sol_delete_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// List discussions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
    ///
    /// List all discussions on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/get(teams/list-discussions-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_discussions_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_discussions_hyphen_legacy(Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/post(teams/create-discussion-legacy)`.
    @available(*, deprecated)
    public func teams_sol_create_hyphen_discussion_hyphen_legacy(
        path: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Body
    ) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output {
        try await teams_sol_create_hyphen_discussion_hyphen_legacy(Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/get(teams/get-discussion-legacy)`.
    @available(*, deprecated)
    public func teams_sol_get_hyphen_discussion_hyphen_legacy(
        path: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output {
        try await teams_sol_get_hyphen_discussion_hyphen_legacy(Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/patch(teams/update-discussion-legacy)`.
    @available(*, deprecated)
    public func teams_sol_update_hyphen_discussion_hyphen_legacy(
        path: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Body? = nil
    ) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output {
        try await teams_sol_update_hyphen_discussion_hyphen_legacy(Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
    ///
    /// Delete a discussion from a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/delete(teams/delete-discussion-legacy)`.
    @available(*, deprecated)
    public func teams_sol_delete_hyphen_discussion_hyphen_legacy(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Output {
        try await teams_sol_delete_hyphen_discussion_hyphen_legacy(Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Input(path: path))
    }
    /// List discussion comments (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
    ///
    /// List all comments on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy(Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-legacy)`.
    @available(*, deprecated)
    public func teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy(
        path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
    ) async throws -> Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output {
        try await teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-legacy)`.
    @available(*, deprecated)
    public func teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy(
        path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output {
        try await teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy(Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-legacy)`.
    @available(*, deprecated)
    public func teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy(
        path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
    ) async throws -> Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output {
        try await teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-legacy)`.
    @available(*, deprecated)
    public func teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Output {
        try await teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy(Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Input(path: path))
    }
    /// List pending team invitations (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/invitations`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/invitations/get(teams/list-pending-invitations-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy(Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List team members (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/get(teams/list-members-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_members_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_members_hyphen_legacy(Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get team member (Legacy)
    ///
    /// The "Get team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/get(teams/get-member-legacy)`.
    @available(*, deprecated)
    public func teams_sol_get_hyphen_member_hyphen_legacy(path: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output {
        try await teams_sol_get_hyphen_member_hyphen_legacy(Operations.teams_sol_get_hyphen_member_hyphen_legacy.Input(path: path))
    }
    /// Add team member (Legacy)
    ///
    /// The "Add team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)`.
    @available(*, deprecated)
    public func teams_sol_add_hyphen_member_hyphen_legacy(
        path: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output {
        try await teams_sol_add_hyphen_member_hyphen_legacy(Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Remove team member (Legacy)
    ///
    /// The "Remove team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/delete(teams/remove-member-legacy)`.
    @available(*, deprecated)
    public func teams_sol_remove_hyphen_member_hyphen_legacy(path: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output {
        try await teams_sol_remove_hyphen_member_hyphen_legacy(Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Input(path: path))
    }
    /// Get team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/get(teams/get-membership-for-user-legacy)`.
    @available(*, deprecated)
    public func teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(
        path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output {
        try await teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)`.
    @available(*, deprecated)
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/delete(teams/remove-membership-for-user-legacy)`.
    @available(*, deprecated)
    public func teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output {
        try await teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input(path: path))
    }
    /// List team projects (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.
    ///
    /// Lists the organization projects for a team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/get(teams/list-projects-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_projects_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_projects_hyphen_legacy(Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check team permissions for a project (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/get(teams/check-permissions-for-project-legacy)`.
    @available(*, deprecated)
    public func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy(
        path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output {
        try await teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team project permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)`.
    @available(*, deprecated)
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a project from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)`.
    @available(*, deprecated)
    public func teams_sol_remove_hyphen_project_hyphen_legacy(
        path: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Output {
        try await teams_sol_remove_hyphen_project_hyphen_legacy(Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// List team repositories (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/get(teams/list-repos-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_repos_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_repos_hyphen_legacy(Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Check team permissions for a repository (Legacy)
    ///
    /// **Note**: Repositories inherited through a parent team will also be checked.
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)`.
    @available(*, deprecated)
    public func teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy(
        path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output {
        try await teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input(
            path: path,
            headers: headers
        ))
    }
    /// Add or update team repository permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)`.
    @available(*, deprecated)
    public func teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy(
        path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Path,
        headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Headers = .init(),
        body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body? = nil
    ) async throws -> Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Output {
        try await teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a repository from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/delete(teams/remove-repo-legacy)`.
    @available(*, deprecated)
    public func teams_sol_remove_hyphen_repo_hyphen_legacy(path: Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Input.Path) async throws -> Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Output {
        try await teams_sol_remove_hyphen_repo_hyphen_legacy(Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Input(path: path))
    }
    /// List child teams (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/teams`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)`.
    @available(*, deprecated)
    public func teams_sol_list_hyphen_child_hyphen_legacy(
        path: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Path,
        query: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output {
        try await teams_sol_list_hyphen_child_hyphen_legacy(Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List teams for the authenticated user
    ///
    /// List all of the teams across all of the organizations to which the authenticated
    /// user belongs.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
    ///
    /// When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
    ///
    /// - Remark: HTTP `GET /user/teams`.
    /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)`.
    public func teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(
        query: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
        headers: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output {
        try await teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user(Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        public struct simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        public struct nullable_hyphen_simple_hyphen_user: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            public var gravatar_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            public var subscriptions_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            public var organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            public var received_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            public var site_admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            public var starred_at: Swift.String?
            /// Creates a new `nullable_hyphen_simple_hyphen_user`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - avatar_url:
            ///   - gravatar_id:
            ///   - url:
            ///   - html_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - starred_url:
            ///   - subscriptions_url:
            ///   - organizations_url:
            ///   - repos_url:
            ///   - events_url:
            ///   - received_events_url:
            ///   - _type:
            ///   - site_admin:
            ///   - starred_at:
            public init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                node_id: Swift.String,
                avatar_url: Swift.String,
                gravatar_id: Swift.String? = nil,
                url: Swift.String,
                html_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                starred_url: Swift.String,
                subscriptions_url: Swift.String,
                organizations_url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                received_events_url: Swift.String,
                _type: Swift.String,
                site_admin: Swift.Bool,
                starred_at: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.node_id = node_id
                self.avatar_url = avatar_url
                self.gravatar_id = gravatar_id
                self.url = url
                self.html_url = html_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.starred_url = starred_url
                self.subscriptions_url = subscriptions_url
                self.organizations_url = organizations_url
                self.repos_url = repos_url
                self.events_url = events_url
                self.received_events_url = received_events_url
                self._type = _type
                self.site_admin = site_admin
                self.starred_at = starred_at
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case node_id
                case avatar_url
                case gravatar_id
                case url
                case html_url
                case followers_url
                case following_url
                case gists_url
                case starred_url
                case subscriptions_url
                case organizations_url
                case repos_url
                case events_url
                case received_events_url
                case _type = "type"
                case site_admin
                case starred_at
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        public struct validation_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            public var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            public var documentation_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload`.
            public struct errorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/resource`.
                public var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/field`.
                public var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/message`.
                public var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/code`.
                public var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/index`.
                public var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/errorsPayload/value`.
                public var value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload?
                /// Creates a new `errorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                public init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.validation_hyphen_error.errorsPayloadPayload.valuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public typealias errorsPayload = [Components.Schemas.validation_hyphen_error.errorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            public var errors: Components.Schemas.validation_hyphen_error.errorsPayload?
            /// Creates a new `validation_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - errors:
            public init(
                message: Swift.String,
                documentation_url: Swift.String,
                errors: Components.Schemas.validation_hyphen_error.errorsPayload? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case errors
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        public struct nullable_hyphen_license_hyphen_simple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            public var spdx_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `nullable_hyphen_license_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdx_id:
            ///   - node_id:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdx_id: Swift.String? = nil,
                node_id: Swift.String,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdx_id = spdx_id
                self.node_id = node_id
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdx_id
                case node_id
                case html_url
            }
        }
        /// Code Of Conduct
        ///
        /// - Remark: Generated from `#/components/schemas/code-of-conduct`.
        public struct code_hyphen_of_hyphen_conduct: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/key`.
            public var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/code-of-conduct/html_url`.
            public var html_url: Swift.String?
            /// Creates a new `code_hyphen_of_hyphen_conduct`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - body:
            ///   - html_url:
            public init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String,
                body: Swift.String? = nil,
                html_url: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.body = body
                self.html_url = html_url
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case body
                case html_url
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        public struct nullable_hyphen_team_hyphen_simple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            public var members_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            public var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            public var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            public var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            public var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            public var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `nullable_hyphen_team_hyphen_simple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - members_url:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - html_url:
            ///   - repositories_url:
            ///   - slug:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                members_url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                html_url: Swift.String,
                repositories_url: Swift.String,
                slug: Swift.String,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.members_url = members_url
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.html_url = html_url
                self.repositories_url = repositories_url
                self.slug = slug
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case members_url
                case name
                case description
                case permission
                case privacy
                case notification_setting
                case html_url
                case repositories_url
                case slug
                case ldap_dn
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        public struct team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            public var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            public var notification_setting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                public var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                public var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                public init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            public var permissions: Components.Schemas.team.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// Creates a new `team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notification_setting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - html_url:
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notification_setting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.team.permissionsPayload? = nil,
                url: Swift.String,
                html_url: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.html_url = html_url
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case permissions
                case url
                case html_url
                case members_url
                case repositories_url
                case parent
            }
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        public struct reaction_hyphen_rollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            public var total_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            public var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            public var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            public var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            public var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            public var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            public var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            public var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            public var rocket: Swift.Int
            /// Creates a new `reaction_hyphen_rollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - total_count:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            public init(
                url: Swift.String,
                total_count: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.total_count = total_count
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case total_count
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// - Remark: Generated from `#/components/schemas/security-and-analysis`.
        public struct security_hyphen_and_hyphen_analysis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public struct advanced_securityPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload?
                /// Creates a new `advanced_securityPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/advanced_security`.
            public var advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload?
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public struct dependabot_security_updatesPayload: Codable, Hashable, Sendable {
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// The enablement status of Dependabot security updates for the repository.
                ///
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload?
                /// Creates a new `dependabot_security_updatesPayload`.
                ///
                /// - Parameters:
                ///   - status: The enablement status of Dependabot security updates for the repository.
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// Enable or disable Dependabot security updates for the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/dependabot_security_updates`.
            public var dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public struct secret_scanningPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload?
                /// Creates a new `secret_scanningPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning`.
            public var secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public struct secret_scanning_push_protectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload?
                /// Creates a new `secret_scanning_push_protectionPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_push_protection`.
            public var secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload?
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public struct secret_scanning_non_provider_patternsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case enabled = "enabled"
                    case disabled = "disabled"
                }
                /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns/status`.
                public var status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload?
                /// Creates a new `secret_scanning_non_provider_patternsPayload`.
                ///
                /// - Parameters:
                ///   - status:
                public init(status: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload.statusPayload? = nil) {
                    self.status = status
                }
                public enum CodingKeys: String, CodingKey {
                    case status
                }
            }
            /// - Remark: Generated from `#/components/schemas/security-and-analysis/secret_scanning_non_provider_patterns`.
            public var secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload?
            /// Creates a new `security_hyphen_and_hyphen_analysis`.
            ///
            /// - Parameters:
            ///   - advanced_security:
            ///   - dependabot_security_updates: Enable or disable Dependabot security updates for the repository.
            ///   - secret_scanning:
            ///   - secret_scanning_push_protection:
            ///   - secret_scanning_non_provider_patterns:
            public init(
                advanced_security: Components.Schemas.security_hyphen_and_hyphen_analysis.advanced_securityPayload? = nil,
                dependabot_security_updates: Components.Schemas.security_hyphen_and_hyphen_analysis.dependabot_security_updatesPayload? = nil,
                secret_scanning: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanningPayload? = nil,
                secret_scanning_push_protection: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_push_protectionPayload? = nil,
                secret_scanning_non_provider_patterns: Components.Schemas.security_hyphen_and_hyphen_analysis.secret_scanning_non_provider_patternsPayload? = nil
            ) {
                self.advanced_security = advanced_security
                self.dependabot_security_updates = dependabot_security_updates
                self.secret_scanning = secret_scanning
                self.secret_scanning_push_protection = secret_scanning_push_protection
                self.secret_scanning_non_provider_patterns = secret_scanning_non_provider_patterns
            }
            public enum CodingKeys: String, CodingKey {
                case advanced_security
                case dependabot_security_updates
                case secret_scanning
                case secret_scanning_push_protection
                case secret_scanning_non_provider_patterns
            }
        }
        /// Minimal Repository
        ///
        /// - Remark: Generated from `#/components/schemas/minimal-repository`.
        public struct minimal_hyphen_repository: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/minimal-repository/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/minimal-repository/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/owner`.
            public var owner: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/minimal-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/minimal-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/git_url`.
            public var git_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/ssh_url`.
            public var ssh_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/clone_url`.
            public var clone_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/minimal-repository/svn_url`.
            public var svn_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks_count`.
            public var forks_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/stargazers_count`.
            public var stargazers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers_count`.
            public var watchers_count: Swift.Int?
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/minimal-repository/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/default_branch`.
            public var default_branch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues_count`.
            public var open_issues_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/topics`.
            public var topics: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_issues`.
            public var has_issues: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_projects`.
            public var has_projects: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_wiki`.
            public var has_wiki: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_pages`.
            public var has_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_downloads`.
            public var has_downloads: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/has_discussions`.
            public var has_discussions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/archived`.
            public var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/disabled`.
            public var disabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/admin`.
                public var admin: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/push`.
                public var push: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions/pull`.
                public var pull: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - maintain:
                ///   - push:
                ///   - triage:
                ///   - pull:
                public init(
                    admin: Swift.Bool? = nil,
                    maintain: Swift.Bool? = nil,
                    push: Swift.Bool? = nil,
                    triage: Swift.Bool? = nil,
                    pull: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.maintain = maintain
                    self.push = push
                    self.triage = triage
                    self.pull = pull
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case maintain
                    case push
                    case triage
                    case pull
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/permissions`.
            public var permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/code_of_conduct`.
            public var code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public struct licensePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/key`.
                public var key: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/name`.
                public var name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/spdx_id`.
                public var spdx_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/minimal-repository/license/node_id`.
                public var node_id: Swift.String?
                /// Creates a new `licensePayload`.
                ///
                /// - Parameters:
                ///   - key:
                ///   - name:
                ///   - spdx_id:
                ///   - url:
                ///   - node_id:
                public init(
                    key: Swift.String? = nil,
                    name: Swift.String? = nil,
                    spdx_id: Swift.String? = nil,
                    url: Swift.String? = nil,
                    node_id: Swift.String? = nil
                ) {
                    self.key = key
                    self.name = name
                    self.spdx_id = spdx_id
                    self.url = url
                    self.node_id = node_id
                }
                public enum CodingKeys: String, CodingKey {
                    case key
                    case name
                    case spdx_id
                    case url
                    case node_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/minimal-repository/license`.
            public var license: Components.Schemas.minimal_hyphen_repository.licensePayload?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/forks`.
            public var forks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/open_issues`.
            public var open_issues: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/watchers`.
            public var watchers: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/minimal-repository/security_and_analysis`.
            public var security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis?
            /// Creates a new `minimal_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - full_name:
            ///   - owner:
            ///   - _private:
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - default_branch:
            ///   - open_issues_count:
            ///   - is_template:
            ///   - topics:
            ///   - has_issues:
            ///   - has_projects:
            ///   - has_wiki:
            ///   - has_pages:
            ///   - has_downloads:
            ///   - has_discussions:
            ///   - archived:
            ///   - disabled:
            ///   - visibility:
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - permissions:
            ///   - role_name:
            ///   - temp_clone_token:
            ///   - delete_branch_on_merge:
            ///   - subscribers_count:
            ///   - network_count:
            ///   - code_of_conduct:
            ///   - license:
            ///   - forks:
            ///   - open_issues:
            ///   - watchers:
            ///   - allow_forking:
            ///   - web_commit_signoff_required:
            ///   - security_and_analysis:
            public init(
                id: Swift.Int64,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                owner: Components.Schemas.simple_hyphen_user,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String? = nil,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String? = nil,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String? = nil,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String? = nil,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int? = nil,
                stargazers_count: Swift.Int? = nil,
                watchers_count: Swift.Int? = nil,
                size: Swift.Int? = nil,
                default_branch: Swift.String? = nil,
                open_issues_count: Swift.Int? = nil,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool? = nil,
                has_projects: Swift.Bool? = nil,
                has_wiki: Swift.Bool? = nil,
                has_pages: Swift.Bool? = nil,
                has_downloads: Swift.Bool? = nil,
                has_discussions: Swift.Bool? = nil,
                archived: Swift.Bool? = nil,
                disabled: Swift.Bool? = nil,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                permissions: Components.Schemas.minimal_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                temp_clone_token: Swift.String? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                code_of_conduct: Components.Schemas.code_hyphen_of_hyphen_conduct? = nil,
                license: Components.Schemas.minimal_hyphen_repository.licensePayload? = nil,
                forks: Swift.Int? = nil,
                open_issues: Swift.Int? = nil,
                watchers: Swift.Int? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                security_and_analysis: Components.Schemas.security_hyphen_and_hyphen_analysis? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.has_discussions = has_discussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.permissions = permissions
                self.role_name = role_name
                self.temp_clone_token = temp_clone_token
                self.delete_branch_on_merge = delete_branch_on_merge
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.code_of_conduct = code_of_conduct
                self.license = license
                self.forks = forks
                self.open_issues = open_issues
                self.watchers = watchers
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.security_and_analysis = security_and_analysis
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case has_discussions
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case permissions
                case role_name
                case temp_clone_token
                case delete_branch_on_merge
                case subscribers_count
                case network_count
                case code_of_conduct
                case license
                case forks
                case open_issues
                case watchers
                case allow_forking
                case web_commit_signoff_required
                case security_and_analysis
            }
        }
        /// Organization Invitation
        ///
        /// - Remark: Generated from `#/components/schemas/organization-invitation`.
        public struct organization_hyphen_invitation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/organization-invitation/id`.
            public var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/organization-invitation/login`.
            public var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/role`.
            public var role: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/failed_at`.
            public var failed_at: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/failed_reason`.
            public var failed_reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/organization-invitation/inviter`.
            public var inviter: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/organization-invitation/team_count`.
            public var team_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/organization-invitation/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/invitation_teams_url`.
            public var invitation_teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/organization-invitation/invitation_source`.
            public var invitation_source: Swift.String?
            /// Creates a new `organization_hyphen_invitation`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - login:
            ///   - email:
            ///   - role:
            ///   - created_at:
            ///   - failed_at:
            ///   - failed_reason:
            ///   - inviter:
            ///   - team_count:
            ///   - node_id:
            ///   - invitation_teams_url:
            ///   - invitation_source:
            public init(
                id: Swift.Int64,
                login: Swift.String? = nil,
                email: Swift.String? = nil,
                role: Swift.String,
                created_at: Swift.String,
                failed_at: Swift.String? = nil,
                failed_reason: Swift.String? = nil,
                inviter: Components.Schemas.simple_hyphen_user,
                team_count: Swift.Int,
                node_id: Swift.String,
                invitation_teams_url: Swift.String,
                invitation_source: Swift.String? = nil
            ) {
                self.id = id
                self.login = login
                self.email = email
                self.role = role
                self.created_at = created_at
                self.failed_at = failed_at
                self.failed_reason = failed_reason
                self.inviter = inviter
                self.team_count = team_count
                self.node_id = node_id
                self.invitation_teams_url = invitation_teams_url
                self.invitation_source = invitation_source
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case login
                case email
                case role
                case created_at
                case failed_at
                case failed_reason
                case inviter
                case team_count
                case node_id
                case invitation_teams_url
                case invitation_source
            }
        }
        /// Team Organization
        ///
        /// - Remark: Generated from `#/components/schemas/team-organization`.
        public struct team_hyphen_organization: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team-organization/login`.
            public var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-organization/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/repos_url`.
            public var repos_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/public_members_url`.
            public var public_members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/avatar_url`.
            public var avatar_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/company`.
            public var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/blog`.
            public var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/location`.
            public var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/twitter_username`.
            public var twitter_username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/is_verified`.
            public var is_verified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/has_organization_projects`.
            public var has_organization_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-organization/has_repository_projects`.
            public var has_repository_projects: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-organization/public_repos`.
            public var public_repos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-organization/public_gists`.
            public var public_gists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-organization/followers`.
            public var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-organization/following`.
            public var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-organization/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-organization/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-organization/total_private_repos`.
            public var total_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-organization/owned_private_repos`.
            public var owned_private_repos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-organization/private_gists`.
            public var private_gists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-organization/disk_usage`.
            public var disk_usage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-organization/collaborators`.
            public var collaborators: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-organization/billing_email`.
            public var billing_email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/plan`.
            public struct planPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team-organization/plan/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/team-organization/plan/space`.
                public var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/team-organization/plan/private_repos`.
                public var private_repos: Swift.Int
                /// - Remark: Generated from `#/components/schemas/team-organization/plan/filled_seats`.
                public var filled_seats: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/team-organization/plan/seats`.
                public var seats: Swift.Int?
                /// Creates a new `planPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - space:
                ///   - private_repos:
                ///   - filled_seats:
                ///   - seats:
                public init(
                    name: Swift.String,
                    space: Swift.Int,
                    private_repos: Swift.Int,
                    filled_seats: Swift.Int? = nil,
                    seats: Swift.Int? = nil
                ) {
                    self.name = name
                    self.space = space
                    self.private_repos = private_repos
                    self.filled_seats = filled_seats
                    self.seats = seats
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case space
                    case private_repos
                    case filled_seats
                    case seats
                }
            }
            /// - Remark: Generated from `#/components/schemas/team-organization/plan`.
            public var plan: Components.Schemas.team_hyphen_organization.planPayload?
            /// - Remark: Generated from `#/components/schemas/team-organization/default_repository_permission`.
            public var default_repository_permission: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_repositories`.
            public var members_can_create_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/two_factor_requirement_enabled`.
            public var two_factor_requirement_enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_allowed_repository_creation_type`.
            public var members_allowed_repository_creation_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_public_repositories`.
            public var members_can_create_public_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_private_repositories`.
            public var members_can_create_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_internal_repositories`.
            public var members_can_create_internal_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_pages`.
            public var members_can_create_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_public_pages`.
            public var members_can_create_public_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_create_private_pages`.
            public var members_can_create_private_pages: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/members_can_fork_private_repositories`.
            public var members_can_fork_private_repositories: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-organization/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-organization/archived_at`.
            public var archived_at: Foundation.Date?
            /// Creates a new `team_hyphen_organization`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - node_id:
            ///   - url:
            ///   - repos_url:
            ///   - events_url:
            ///   - hooks_url:
            ///   - issues_url:
            ///   - members_url:
            ///   - public_members_url:
            ///   - avatar_url:
            ///   - description:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - twitter_username:
            ///   - is_verified:
            ///   - has_organization_projects:
            ///   - has_repository_projects:
            ///   - public_repos:
            ///   - public_gists:
            ///   - followers:
            ///   - following:
            ///   - html_url:
            ///   - created_at:
            ///   - _type:
            ///   - total_private_repos:
            ///   - owned_private_repos:
            ///   - private_gists:
            ///   - disk_usage:
            ///   - collaborators:
            ///   - billing_email:
            ///   - plan:
            ///   - default_repository_permission:
            ///   - members_can_create_repositories:
            ///   - two_factor_requirement_enabled:
            ///   - members_allowed_repository_creation_type:
            ///   - members_can_create_public_repositories:
            ///   - members_can_create_private_repositories:
            ///   - members_can_create_internal_repositories:
            ///   - members_can_create_pages:
            ///   - members_can_create_public_pages:
            ///   - members_can_create_private_pages:
            ///   - members_can_fork_private_repositories:
            ///   - web_commit_signoff_required:
            ///   - updated_at:
            ///   - archived_at:
            public init(
                login: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                repos_url: Swift.String,
                events_url: Swift.String,
                hooks_url: Swift.String,
                issues_url: Swift.String,
                members_url: Swift.String,
                public_members_url: Swift.String,
                avatar_url: Swift.String,
                description: Swift.String? = nil,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                twitter_username: Swift.String? = nil,
                is_verified: Swift.Bool? = nil,
                has_organization_projects: Swift.Bool,
                has_repository_projects: Swift.Bool,
                public_repos: Swift.Int,
                public_gists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                html_url: Swift.String,
                created_at: Foundation.Date,
                _type: Swift.String,
                total_private_repos: Swift.Int? = nil,
                owned_private_repos: Swift.Int? = nil,
                private_gists: Swift.Int? = nil,
                disk_usage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil,
                billing_email: Swift.String? = nil,
                plan: Components.Schemas.team_hyphen_organization.planPayload? = nil,
                default_repository_permission: Swift.String? = nil,
                members_can_create_repositories: Swift.Bool? = nil,
                two_factor_requirement_enabled: Swift.Bool? = nil,
                members_allowed_repository_creation_type: Swift.String? = nil,
                members_can_create_public_repositories: Swift.Bool? = nil,
                members_can_create_private_repositories: Swift.Bool? = nil,
                members_can_create_internal_repositories: Swift.Bool? = nil,
                members_can_create_pages: Swift.Bool? = nil,
                members_can_create_public_pages: Swift.Bool? = nil,
                members_can_create_private_pages: Swift.Bool? = nil,
                members_can_fork_private_repositories: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                updated_at: Foundation.Date,
                archived_at: Foundation.Date? = nil
            ) {
                self.login = login
                self.id = id
                self.node_id = node_id
                self.url = url
                self.repos_url = repos_url
                self.events_url = events_url
                self.hooks_url = hooks_url
                self.issues_url = issues_url
                self.members_url = members_url
                self.public_members_url = public_members_url
                self.avatar_url = avatar_url
                self.description = description
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.twitter_username = twitter_username
                self.is_verified = is_verified
                self.has_organization_projects = has_organization_projects
                self.has_repository_projects = has_repository_projects
                self.public_repos = public_repos
                self.public_gists = public_gists
                self.followers = followers
                self.following = following
                self.html_url = html_url
                self.created_at = created_at
                self._type = _type
                self.total_private_repos = total_private_repos
                self.owned_private_repos = owned_private_repos
                self.private_gists = private_gists
                self.disk_usage = disk_usage
                self.collaborators = collaborators
                self.billing_email = billing_email
                self.plan = plan
                self.default_repository_permission = default_repository_permission
                self.members_can_create_repositories = members_can_create_repositories
                self.two_factor_requirement_enabled = two_factor_requirement_enabled
                self.members_allowed_repository_creation_type = members_allowed_repository_creation_type
                self.members_can_create_public_repositories = members_can_create_public_repositories
                self.members_can_create_private_repositories = members_can_create_private_repositories
                self.members_can_create_internal_repositories = members_can_create_internal_repositories
                self.members_can_create_pages = members_can_create_pages
                self.members_can_create_public_pages = members_can_create_public_pages
                self.members_can_create_private_pages = members_can_create_private_pages
                self.members_can_fork_private_repositories = members_can_fork_private_repositories
                self.web_commit_signoff_required = web_commit_signoff_required
                self.updated_at = updated_at
                self.archived_at = archived_at
            }
            public enum CodingKeys: String, CodingKey {
                case login
                case id
                case node_id
                case url
                case repos_url
                case events_url
                case hooks_url
                case issues_url
                case members_url
                case public_members_url
                case avatar_url
                case description
                case name
                case company
                case blog
                case location
                case email
                case twitter_username
                case is_verified
                case has_organization_projects
                case has_repository_projects
                case public_repos
                case public_gists
                case followers
                case following
                case html_url
                case created_at
                case _type = "type"
                case total_private_repos
                case owned_private_repos
                case private_gists
                case disk_usage
                case collaborators
                case billing_email
                case plan
                case default_repository_permission
                case members_can_create_repositories
                case two_factor_requirement_enabled
                case members_allowed_repository_creation_type
                case members_can_create_public_repositories
                case members_can_create_private_repositories
                case members_can_create_internal_repositories
                case members_can_create_pages
                case members_can_create_public_pages
                case members_can_create_private_pages
                case members_can_fork_private_repositories
                case web_commit_signoff_required
                case updated_at
                case archived_at
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-full`.
        public struct team_hyphen_full: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-full/node_id`.
            public var node_id: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/html_url`.
            public var html_url: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/slug`.
            public var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/description`.
            public var description: Swift.String?
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/privacy`.
            @frozen public enum privacyPayload: String, Codable, Hashable, Sendable {
                case closed = "closed"
                case secret = "secret"
            }
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/privacy`.
            public var privacy: Components.Schemas.team_hyphen_full.privacyPayload?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/notification_setting`.
            @frozen public enum notification_settingPayload: String, Codable, Hashable, Sendable {
                case notifications_enabled = "notifications_enabled"
                case notifications_disabled = "notifications_disabled"
            }
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/notification_setting`.
            public var notification_setting: Components.Schemas.team_hyphen_full.notification_settingPayload?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/permission`.
            public var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/members_url`.
            public var members_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/repositories_url`.
            public var repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-full/parent`.
            public var parent: Components.Schemas.nullable_hyphen_team_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/team-full/members_count`.
            public var members_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-full/repos_count`.
            public var repos_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-full/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-full/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-full/organization`.
            public var organization: Components.Schemas.team_hyphen_organization
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-full/ldap_dn`.
            public var ldap_dn: Swift.String?
            /// Creates a new `team_hyphen_full`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - node_id:
            ///   - url: URL for the team
            ///   - html_url:
            ///   - name: Name of the team
            ///   - slug:
            ///   - description:
            ///   - privacy: The level of privacy this team should have
            ///   - notification_setting: The notification setting the team has set
            ///   - permission: Permission that the team will have for its repositories
            ///   - members_url:
            ///   - repositories_url:
            ///   - parent:
            ///   - members_count:
            ///   - repos_count:
            ///   - created_at:
            ///   - updated_at:
            ///   - organization:
            ///   - ldap_dn: Distinguished Name (DN) that team maps to within LDAP environment
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Components.Schemas.team_hyphen_full.privacyPayload? = nil,
                notification_setting: Components.Schemas.team_hyphen_full.notification_settingPayload? = nil,
                permission: Swift.String,
                members_url: Swift.String,
                repositories_url: Swift.String,
                parent: Components.Schemas.nullable_hyphen_team_hyphen_simple? = nil,
                members_count: Swift.Int,
                repos_count: Swift.Int,
                created_at: Foundation.Date,
                updated_at: Foundation.Date,
                organization: Components.Schemas.team_hyphen_organization,
                ldap_dn: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.url = url
                self.html_url = html_url
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notification_setting = notification_setting
                self.permission = permission
                self.members_url = members_url
                self.repositories_url = repositories_url
                self.parent = parent
                self.members_count = members_count
                self.repos_count = repos_count
                self.created_at = created_at
                self.updated_at = updated_at
                self.organization = organization
                self.ldap_dn = ldap_dn
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case url
                case html_url
                case name
                case slug
                case description
                case privacy
                case notification_setting
                case permission
                case members_url
                case repositories_url
                case parent
                case members_count
                case repos_count
                case created_at
                case updated_at
                case organization
                case ldap_dn
            }
        }
        /// A team discussion is a persistent record of a free-form conversation within a team.
        ///
        /// - Remark: Generated from `#/components/schemas/team-discussion`.
        public struct team_hyphen_discussion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team-discussion/author`.
            public var author: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The main text of the discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/body_html`.
            public var body_html: Swift.String
            /// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/body_version`.
            public var body_version: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/comments_count`.
            public var comments_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-discussion/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-discussion/last_edited_at`.
            public var last_edited_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/team-discussion/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/node_id`.
            public var node_id: Swift.String
            /// The unique sequence number of a team discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/number`.
            public var number: Swift.Int
            /// Whether or not this discussion should be pinned for easy retrieval.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/pinned`.
            public var pinned: Swift.Bool
            /// Whether or not this discussion should be restricted to team members and organization owners.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-discussion/team_url`.
            public var team_url: Swift.String
            /// The title of the discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-discussion/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `team_hyphen_discussion`.
            ///
            /// - Parameters:
            ///   - author:
            ///   - body: The main text of the discussion.
            ///   - body_html:
            ///   - body_version: The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
            ///   - comments_count:
            ///   - comments_url:
            ///   - created_at:
            ///   - last_edited_at:
            ///   - html_url:
            ///   - node_id:
            ///   - number: The unique sequence number of a team discussion.
            ///   - pinned: Whether or not this discussion should be pinned for easy retrieval.
            ///   - _private: Whether or not this discussion should be restricted to team members and organization owners.
            ///   - team_url:
            ///   - title: The title of the discussion.
            ///   - updated_at:
            ///   - url:
            ///   - reactions:
            public init(
                author: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String,
                body_html: Swift.String,
                body_version: Swift.String,
                comments_count: Swift.Int,
                comments_url: Swift.String,
                created_at: Foundation.Date,
                last_edited_at: Foundation.Date? = nil,
                html_url: Swift.String,
                node_id: Swift.String,
                number: Swift.Int,
                pinned: Swift.Bool,
                _private: Swift.Bool,
                team_url: Swift.String,
                title: Swift.String,
                updated_at: Foundation.Date,
                url: Swift.String,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.author = author
                self.body = body
                self.body_html = body_html
                self.body_version = body_version
                self.comments_count = comments_count
                self.comments_url = comments_url
                self.created_at = created_at
                self.last_edited_at = last_edited_at
                self.html_url = html_url
                self.node_id = node_id
                self.number = number
                self.pinned = pinned
                self._private = _private
                self.team_url = team_url
                self.title = title
                self.updated_at = updated_at
                self.url = url
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case body
                case body_html
                case body_version
                case comments_count
                case comments_url
                case created_at
                case last_edited_at
                case html_url
                case node_id
                case number
                case pinned
                case _private = "private"
                case team_url
                case title
                case updated_at
                case url
                case reactions
            }
        }
        /// A reply to a discussion within a team.
        ///
        /// - Remark: Generated from `#/components/schemas/team-discussion-comment`.
        public struct team_hyphen_discussion_hyphen_comment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/author`.
            public var author: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// The main text of the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/body`.
            public var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/body_html`.
            public var body_html: Swift.String
            /// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/body_version`.
            public var body_version: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/created_at`.
            public var created_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/last_edited_at`.
            public var last_edited_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/discussion_url`.
            public var discussion_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/node_id`.
            public var node_id: Swift.String
            /// The unique sequence number of a team discussion comment.
            ///
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/updated_at`.
            public var updated_at: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-discussion-comment/reactions`.
            public var reactions: Components.Schemas.reaction_hyphen_rollup?
            /// Creates a new `team_hyphen_discussion_hyphen_comment`.
            ///
            /// - Parameters:
            ///   - author:
            ///   - body: The main text of the comment.
            ///   - body_html:
            ///   - body_version: The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
            ///   - created_at:
            ///   - last_edited_at:
            ///   - discussion_url:
            ///   - html_url:
            ///   - node_id:
            ///   - number: The unique sequence number of a team discussion comment.
            ///   - updated_at:
            ///   - url:
            ///   - reactions:
            public init(
                author: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                body: Swift.String,
                body_html: Swift.String,
                body_version: Swift.String,
                created_at: Foundation.Date,
                last_edited_at: Foundation.Date? = nil,
                discussion_url: Swift.String,
                html_url: Swift.String,
                node_id: Swift.String,
                number: Swift.Int,
                updated_at: Foundation.Date,
                url: Swift.String,
                reactions: Components.Schemas.reaction_hyphen_rollup? = nil
            ) {
                self.author = author
                self.body = body
                self.body_html = body_html
                self.body_version = body_version
                self.created_at = created_at
                self.last_edited_at = last_edited_at
                self.discussion_url = discussion_url
                self.html_url = html_url
                self.node_id = node_id
                self.number = number
                self.updated_at = updated_at
                self.url = url
                self.reactions = reactions
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case body
                case body_html
                case body_version
                case created_at
                case last_edited_at
                case discussion_url
                case html_url
                case node_id
                case number
                case updated_at
                case url
                case reactions
            }
        }
        /// Team Membership
        ///
        /// - Remark: Generated from `#/components/schemas/team-membership`.
        public struct team_hyphen_membership: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team-membership/url`.
            public var url: Swift.String
            /// The role of the user in the team.
            ///
            /// - Remark: Generated from `#/components/schemas/team-membership/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case member = "member"
                case maintainer = "maintainer"
            }
            /// The role of the user in the team.
            ///
            /// - Remark: Generated from `#/components/schemas/team-membership/role`.
            public var role: Components.Schemas.team_hyphen_membership.rolePayload
            /// The state of the user's membership in the team.
            ///
            /// - Remark: Generated from `#/components/schemas/team-membership/state`.
            @frozen public enum statePayload: String, Codable, Hashable, Sendable {
                case active = "active"
                case pending = "pending"
            }
            /// The state of the user's membership in the team.
            ///
            /// - Remark: Generated from `#/components/schemas/team-membership/state`.
            public var state: Components.Schemas.team_hyphen_membership.statePayload
            /// Creates a new `team_hyphen_membership`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - role: The role of the user in the team.
            ///   - state: The state of the user's membership in the team.
            public init(
                url: Swift.String,
                role: Components.Schemas.team_hyphen_membership.rolePayload,
                state: Components.Schemas.team_hyphen_membership.statePayload
            ) {
                self.url = url
                self.role = role
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case role
                case state
            }
        }
        /// A team's access to a project.
        ///
        /// - Remark: Generated from `#/components/schemas/team-project`.
        public struct team_hyphen_project: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team-project/owner_url`.
            public var owner_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/columns_url`.
            public var columns_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-project/node_id`.
            public var node_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/body`.
            public var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-project/number`.
            public var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-project/state`.
            public var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/creator`.
            public var creator: Components.Schemas.simple_hyphen_user
            /// - Remark: Generated from `#/components/schemas/team-project/created_at`.
            public var created_at: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-project/updated_at`.
            public var updated_at: Swift.String
            /// The organization permission for this project. Only present when owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/team-project/organization_permission`.
            public var organization_permission: Swift.String?
            /// Whether the project is private or not. Only present when owner is an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/team-project/private`.
            public var _private: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-project/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team-project/permissions/read`.
                public var read: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team-project/permissions/write`.
                public var write: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team-project/permissions/admin`.
                public var admin: Swift.Bool
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - read:
                ///   - write:
                ///   - admin:
                public init(
                    read: Swift.Bool,
                    write: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.read = read
                    self.write = write
                    self.admin = admin
                }
                public enum CodingKeys: String, CodingKey {
                    case read
                    case write
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team-project/permissions`.
            public var permissions: Components.Schemas.team_hyphen_project.permissionsPayload
            /// Creates a new `team_hyphen_project`.
            ///
            /// - Parameters:
            ///   - owner_url:
            ///   - url:
            ///   - html_url:
            ///   - columns_url:
            ///   - id:
            ///   - node_id:
            ///   - name:
            ///   - body:
            ///   - number:
            ///   - state:
            ///   - creator:
            ///   - created_at:
            ///   - updated_at:
            ///   - organization_permission: The organization permission for this project. Only present when owner is an organization.
            ///   - _private: Whether the project is private or not. Only present when owner is an organization.
            ///   - permissions:
            public init(
                owner_url: Swift.String,
                url: Swift.String,
                html_url: Swift.String,
                columns_url: Swift.String,
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                body: Swift.String? = nil,
                number: Swift.Int,
                state: Swift.String,
                creator: Components.Schemas.simple_hyphen_user,
                created_at: Swift.String,
                updated_at: Swift.String,
                organization_permission: Swift.String? = nil,
                _private: Swift.Bool? = nil,
                permissions: Components.Schemas.team_hyphen_project.permissionsPayload
            ) {
                self.owner_url = owner_url
                self.url = url
                self.html_url = html_url
                self.columns_url = columns_url
                self.id = id
                self.node_id = node_id
                self.name = name
                self.body = body
                self.number = number
                self.state = state
                self.creator = creator
                self.created_at = created_at
                self.updated_at = updated_at
                self.organization_permission = organization_permission
                self._private = _private
                self.permissions = permissions
            }
            public enum CodingKeys: String, CodingKey {
                case owner_url
                case url
                case html_url
                case columns_url
                case id
                case node_id
                case name
                case body
                case number
                case state
                case creator
                case created_at
                case updated_at
                case organization_permission
                case _private = "private"
                case permissions
            }
        }
        /// A team's access to a repository.
        ///
        /// - Remark: Generated from `#/components/schemas/team-repository`.
        public struct team_hyphen_repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/node_id`.
            public var node_id: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/license`.
            public var license: Components.Schemas.nullable_hyphen_license_hyphen_simple?
            /// - Remark: Generated from `#/components/schemas/team-repository/forks`.
            public var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/permissions`.
            public struct permissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team-repository/permissions/admin`.
                public var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team-repository/permissions/pull`.
                public var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team-repository/permissions/triage`.
                public var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/team-repository/permissions/push`.
                public var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team-repository/permissions/maintain`.
                public var maintain: Swift.Bool?
                /// Creates a new `permissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                public init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                public enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/team-repository/permissions`.
            public var permissions: Components.Schemas.team_hyphen_repository.permissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team-repository/role_name`.
            public var role_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/owner`.
            public var owner: Components.Schemas.nullable_hyphen_simple_hyphen_user?
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/private`.
            public var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-repository/html_url`.
            public var html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/fork`.
            public var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-repository/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/archive_url`.
            public var archive_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/assignees_url`.
            public var assignees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/blobs_url`.
            public var blobs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/branches_url`.
            public var branches_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/collaborators_url`.
            public var collaborators_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/comments_url`.
            public var comments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/commits_url`.
            public var commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/compare_url`.
            public var compare_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/contents_url`.
            public var contents_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/contributors_url`.
            public var contributors_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/deployments_url`.
            public var deployments_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/downloads_url`.
            public var downloads_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/forks_url`.
            public var forks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/git_commits_url`.
            public var git_commits_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/git_refs_url`.
            public var git_refs_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/git_tags_url`.
            public var git_tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/git_url`.
            public var git_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/issue_comment_url`.
            public var issue_comment_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/issue_events_url`.
            public var issue_events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/labels_url`.
            public var labels_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/languages_url`.
            public var languages_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/merges_url`.
            public var merges_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/milestones_url`.
            public var milestones_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/pulls_url`.
            public var pulls_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/releases_url`.
            public var releases_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/ssh_url`.
            public var ssh_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/stargazers_url`.
            public var stargazers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/statuses_url`.
            public var statuses_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/subscribers_url`.
            public var subscribers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/subscription_url`.
            public var subscription_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/tags_url`.
            public var tags_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/teams_url`.
            public var teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/trees_url`.
            public var trees_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/clone_url`.
            public var clone_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/mirror_url`.
            public var mirror_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/hooks_url`.
            public var hooks_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/svn_url`.
            public var svn_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/homepage`.
            public var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/forks_count`.
            public var forks_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/stargazers_count`.
            public var stargazers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/watchers_count`.
            public var watchers_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/size`.
            public var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/default_branch`.
            public var default_branch: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-repository/open_issues_count`.
            public var open_issues_count: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/is_template`.
            public var is_template: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-repository/topics`.
            public var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/has_issues`.
            public var has_issues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/has_projects`.
            public var has_projects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/has_wiki`.
            public var has_wiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/team-repository/has_pages`.
            public var has_pages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/has_downloads`.
            public var has_downloads: Swift.Bool
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/archived`.
            public var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/disabled`.
            public var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-repository/pushed_at`.
            public var pushed_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/team-repository/created_at`.
            public var created_at: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/team-repository/updated_at`.
            public var updated_at: Foundation.Date?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/allow_rebase_merge`.
            public var allow_rebase_merge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-repository/temp_clone_token`.
            public var temp_clone_token: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/allow_squash_merge`.
            public var allow_squash_merge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/allow_auto_merge`.
            public var allow_auto_merge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/delete_branch_on_merge`.
            public var delete_branch_on_merge: Swift.Bool?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/allow_merge_commit`.
            public var allow_merge_commit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/allow_forking`.
            public var allow_forking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/team-repository/web_commit_signoff_required`.
            public var web_commit_signoff_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/team-repository/subscribers_count`.
            public var subscribers_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-repository/network_count`.
            public var network_count: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/team-repository/open_issues`.
            public var open_issues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/watchers`.
            public var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-repository/master_branch`.
            public var master_branch: Swift.String?
            /// Creates a new `team_hyphen_repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - node_id:
            ///   - name: The name of the repository.
            ///   - full_name:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - role_name:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - html_url:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archive_url:
            ///   - assignees_url:
            ///   - blobs_url:
            ///   - branches_url:
            ///   - collaborators_url:
            ///   - comments_url:
            ///   - commits_url:
            ///   - compare_url:
            ///   - contents_url:
            ///   - contributors_url:
            ///   - deployments_url:
            ///   - downloads_url:
            ///   - events_url:
            ///   - forks_url:
            ///   - git_commits_url:
            ///   - git_refs_url:
            ///   - git_tags_url:
            ///   - git_url:
            ///   - issue_comment_url:
            ///   - issue_events_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - labels_url:
            ///   - languages_url:
            ///   - merges_url:
            ///   - milestones_url:
            ///   - notifications_url:
            ///   - pulls_url:
            ///   - releases_url:
            ///   - ssh_url:
            ///   - stargazers_url:
            ///   - statuses_url:
            ///   - subscribers_url:
            ///   - subscription_url:
            ///   - tags_url:
            ///   - teams_url:
            ///   - trees_url:
            ///   - clone_url:
            ///   - mirror_url:
            ///   - hooks_url:
            ///   - svn_url:
            ///   - homepage:
            ///   - language:
            ///   - forks_count:
            ///   - stargazers_count:
            ///   - watchers_count:
            ///   - size:
            ///   - default_branch: The default branch of the repository.
            ///   - open_issues_count:
            ///   - is_template: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - has_issues: Whether issues are enabled.
            ///   - has_projects: Whether projects are enabled.
            ///   - has_wiki: Whether the wiki is enabled.
            ///   - has_pages:
            ///   - has_downloads: Whether downloads are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushed_at:
            ///   - created_at:
            ///   - updated_at:
            ///   - allow_rebase_merge: Whether to allow rebase merges for pull requests.
            ///   - temp_clone_token:
            ///   - allow_squash_merge: Whether to allow squash merges for pull requests.
            ///   - allow_auto_merge: Whether to allow Auto-merge to be used on pull requests.
            ///   - delete_branch_on_merge: Whether to delete head branches when pull requests are merged
            ///   - allow_merge_commit: Whether to allow merge commits for pull requests.
            ///   - allow_forking: Whether to allow forking this repo
            ///   - web_commit_signoff_required: Whether to require contributors to sign off on web-based commits
            ///   - subscribers_count:
            ///   - network_count:
            ///   - open_issues:
            ///   - watchers:
            ///   - master_branch:
            public init(
                id: Swift.Int,
                node_id: Swift.String,
                name: Swift.String,
                full_name: Swift.String,
                license: Components.Schemas.nullable_hyphen_license_hyphen_simple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.team_hyphen_repository.permissionsPayload? = nil,
                role_name: Swift.String? = nil,
                owner: Components.Schemas.nullable_hyphen_simple_hyphen_user? = nil,
                _private: Swift.Bool,
                html_url: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archive_url: Swift.String,
                assignees_url: Swift.String,
                blobs_url: Swift.String,
                branches_url: Swift.String,
                collaborators_url: Swift.String,
                comments_url: Swift.String,
                commits_url: Swift.String,
                compare_url: Swift.String,
                contents_url: Swift.String,
                contributors_url: Swift.String,
                deployments_url: Swift.String,
                downloads_url: Swift.String,
                events_url: Swift.String,
                forks_url: Swift.String,
                git_commits_url: Swift.String,
                git_refs_url: Swift.String,
                git_tags_url: Swift.String,
                git_url: Swift.String,
                issue_comment_url: Swift.String,
                issue_events_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                labels_url: Swift.String,
                languages_url: Swift.String,
                merges_url: Swift.String,
                milestones_url: Swift.String,
                notifications_url: Swift.String,
                pulls_url: Swift.String,
                releases_url: Swift.String,
                ssh_url: Swift.String,
                stargazers_url: Swift.String,
                statuses_url: Swift.String,
                subscribers_url: Swift.String,
                subscription_url: Swift.String,
                tags_url: Swift.String,
                teams_url: Swift.String,
                trees_url: Swift.String,
                clone_url: Swift.String,
                mirror_url: Swift.String? = nil,
                hooks_url: Swift.String,
                svn_url: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forks_count: Swift.Int,
                stargazers_count: Swift.Int,
                watchers_count: Swift.Int,
                size: Swift.Int,
                default_branch: Swift.String,
                open_issues_count: Swift.Int,
                is_template: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                has_issues: Swift.Bool,
                has_projects: Swift.Bool,
                has_wiki: Swift.Bool,
                has_pages: Swift.Bool,
                has_downloads: Swift.Bool,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushed_at: Foundation.Date? = nil,
                created_at: Foundation.Date? = nil,
                updated_at: Foundation.Date? = nil,
                allow_rebase_merge: Swift.Bool? = nil,
                temp_clone_token: Swift.String? = nil,
                allow_squash_merge: Swift.Bool? = nil,
                allow_auto_merge: Swift.Bool? = nil,
                delete_branch_on_merge: Swift.Bool? = nil,
                allow_merge_commit: Swift.Bool? = nil,
                allow_forking: Swift.Bool? = nil,
                web_commit_signoff_required: Swift.Bool? = nil,
                subscribers_count: Swift.Int? = nil,
                network_count: Swift.Int? = nil,
                open_issues: Swift.Int,
                watchers: Swift.Int,
                master_branch: Swift.String? = nil
            ) {
                self.id = id
                self.node_id = node_id
                self.name = name
                self.full_name = full_name
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.role_name = role_name
                self.owner = owner
                self._private = _private
                self.html_url = html_url
                self.description = description
                self.fork = fork
                self.url = url
                self.archive_url = archive_url
                self.assignees_url = assignees_url
                self.blobs_url = blobs_url
                self.branches_url = branches_url
                self.collaborators_url = collaborators_url
                self.comments_url = comments_url
                self.commits_url = commits_url
                self.compare_url = compare_url
                self.contents_url = contents_url
                self.contributors_url = contributors_url
                self.deployments_url = deployments_url
                self.downloads_url = downloads_url
                self.events_url = events_url
                self.forks_url = forks_url
                self.git_commits_url = git_commits_url
                self.git_refs_url = git_refs_url
                self.git_tags_url = git_tags_url
                self.git_url = git_url
                self.issue_comment_url = issue_comment_url
                self.issue_events_url = issue_events_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.labels_url = labels_url
                self.languages_url = languages_url
                self.merges_url = merges_url
                self.milestones_url = milestones_url
                self.notifications_url = notifications_url
                self.pulls_url = pulls_url
                self.releases_url = releases_url
                self.ssh_url = ssh_url
                self.stargazers_url = stargazers_url
                self.statuses_url = statuses_url
                self.subscribers_url = subscribers_url
                self.subscription_url = subscription_url
                self.tags_url = tags_url
                self.teams_url = teams_url
                self.trees_url = trees_url
                self.clone_url = clone_url
                self.mirror_url = mirror_url
                self.hooks_url = hooks_url
                self.svn_url = svn_url
                self.homepage = homepage
                self.language = language
                self.forks_count = forks_count
                self.stargazers_count = stargazers_count
                self.watchers_count = watchers_count
                self.size = size
                self.default_branch = default_branch
                self.open_issues_count = open_issues_count
                self.is_template = is_template
                self.topics = topics
                self.has_issues = has_issues
                self.has_projects = has_projects
                self.has_wiki = has_wiki
                self.has_pages = has_pages
                self.has_downloads = has_downloads
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushed_at = pushed_at
                self.created_at = created_at
                self.updated_at = updated_at
                self.allow_rebase_merge = allow_rebase_merge
                self.temp_clone_token = temp_clone_token
                self.allow_squash_merge = allow_squash_merge
                self.allow_auto_merge = allow_auto_merge
                self.delete_branch_on_merge = delete_branch_on_merge
                self.allow_merge_commit = allow_merge_commit
                self.allow_forking = allow_forking
                self.web_commit_signoff_required = web_commit_signoff_required
                self.subscribers_count = subscribers_count
                self.network_count = network_count
                self.open_issues = open_issues
                self.watchers = watchers
                self.master_branch = master_branch
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case node_id
                case name
                case full_name
                case license
                case forks
                case permissions
                case role_name
                case owner
                case _private = "private"
                case html_url
                case description
                case fork
                case url
                case archive_url
                case assignees_url
                case blobs_url
                case branches_url
                case collaborators_url
                case comments_url
                case commits_url
                case compare_url
                case contents_url
                case contributors_url
                case deployments_url
                case downloads_url
                case events_url
                case forks_url
                case git_commits_url
                case git_refs_url
                case git_tags_url
                case git_url
                case issue_comment_url
                case issue_events_url
                case issues_url
                case keys_url
                case labels_url
                case languages_url
                case merges_url
                case milestones_url
                case notifications_url
                case pulls_url
                case releases_url
                case ssh_url
                case stargazers_url
                case statuses_url
                case subscribers_url
                case subscription_url
                case tags_url
                case teams_url
                case trees_url
                case clone_url
                case mirror_url
                case hooks_url
                case svn_url
                case homepage
                case language
                case forks_count
                case stargazers_count
                case watchers_count
                case size
                case default_branch
                case open_issues_count
                case is_template
                case topics
                case has_issues
                case has_projects
                case has_wiki
                case has_pages
                case has_downloads
                case archived
                case disabled
                case visibility
                case pushed_at
                case created_at
                case updated_at
                case allow_rebase_merge
                case temp_clone_token
                case allow_squash_merge
                case allow_auto_merge
                case delete_branch_on_merge
                case allow_merge_commit
                case allow_forking
                case web_commit_signoff_required
                case subscribers_count
                case network_count
                case open_issues
                case watchers
                case master_branch
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The direction to sort the results by.
        ///
        /// - Remark: Generated from `#/components/parameters/direction`.
        @frozen public enum direction: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        public typealias per_hyphen_page = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        public typealias page = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        public typealias owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        public typealias repo = Swift.String
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
        /// The slug of the team name.
        ///
        /// - Remark: Generated from `#/components/parameters/team-slug`.
        public typealias team_hyphen_slug = Swift.String
        /// The number that identifies the discussion.
        ///
        /// - Remark: Generated from `#/components/parameters/discussion-number`.
        public typealias discussion_hyphen_number = Swift.Int
        /// The number that identifies the comment.
        ///
        /// - Remark: Generated from `#/components/parameters/comment-number`.
        public typealias comment_hyphen_number = Swift.Int
        /// The unique identifier of the project.
        ///
        /// - Remark: Generated from `#/components/parameters/project-id`.
        public typealias project_hyphen_id = Swift.Int
        /// The unique identifier of the team.
        ///
        /// - Remark: Generated from `#/components/parameters/team-id`.
        public typealias team_hyphen_id = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct validation_failed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.validation_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.validation_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.validation_failed.Body
            /// Creates a new `validation_failed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.validation_failed.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
        public struct forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.forbidden.Body
            /// Creates a new `forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.forbidden.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        public typealias link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List teams
    ///
    /// Lists all teams in an organization that are visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/get(teams/list)`.
    public enum teams_sol_list {
        public static let id: Swift.String = "teams/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.teams_sol_list.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list.Input.Path,
                query: Operations.teams_sol_list.Input.Query = .init(),
                headers: Operations.teams_sol_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/get(teams/list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/get(teams/list)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a team
    ///
    /// To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
    ///
    /// When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)`.
    public enum teams_sol_create {
        public static let id: Swift.String = "teams/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.teams_sol_create.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/name`.
                    public var name: Swift.String
                    /// The description of the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/description`.
                    public var description: Swift.String?
                    /// List GitHub IDs for organization members who will become team maintainers.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/maintainers`.
                    public var maintainers: [Swift.String]?
                    /// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/repo_names`.
                    public var repo_names: [Swift.String]?
                    /// The level of privacy this team should have. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// Default: `secret`  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.  
                    /// Default for child team: `closed`
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/privacy`.
                    @frozen public enum privacyPayload: String, Codable, Hashable, Sendable {
                        case secret = "secret"
                        case closed = "closed"
                    }
                    /// The level of privacy this team should have. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// Default: `secret`  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.  
                    /// Default for child team: `closed`
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/privacy`.
                    public var privacy: Operations.teams_sol_create.Input.Body.jsonPayload.privacyPayload?
                    /// The notification setting the team has chosen. The options are:  
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.  
                    /// Default: `notifications_enabled`
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/notification_setting`.
                    @frozen public enum notification_settingPayload: String, Codable, Hashable, Sendable {
                        case notifications_enabled = "notifications_enabled"
                        case notifications_disabled = "notifications_disabled"
                    }
                    /// The notification setting the team has chosen. The options are:  
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.  
                    /// Default: `notifications_enabled`
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/notification_setting`.
                    public var notification_setting: Operations.teams_sol_create.Input.Body.jsonPayload.notification_settingPayload?
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case pull = "pull"
                        case push = "push"
                    }
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_create.Input.Body.jsonPayload.permissionPayload?
                    /// The ID of a team to set as the parent team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/json/parent_team_id`.
                    public var parent_team_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the team.
                    ///   - description: The description of the team.
                    ///   - maintainers: List GitHub IDs for organization members who will become team maintainers.
                    ///   - repo_names: The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
                    ///   - privacy: The level of privacy this team should have. The options are:  
                    ///   - notification_setting: The notification setting the team has chosen. The options are:  
                    ///   - permission: **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///   - parent_team_id: The ID of a team to set as the parent team.
                    public init(
                        name: Swift.String,
                        description: Swift.String? = nil,
                        maintainers: [Swift.String]? = nil,
                        repo_names: [Swift.String]? = nil,
                        privacy: Operations.teams_sol_create.Input.Body.jsonPayload.privacyPayload? = nil,
                        notification_setting: Operations.teams_sol_create.Input.Body.jsonPayload.notification_settingPayload? = nil,
                        permission: Operations.teams_sol_create.Input.Body.jsonPayload.permissionPayload? = nil,
                        parent_team_id: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.maintainers = maintainers
                        self.repo_names = repo_names
                        self.privacy = privacy
                        self.notification_setting = notification_setting
                        self.permission = permission
                        self.parent_team_id = parent_team_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case maintainers
                        case repo_names
                        case privacy
                        case notification_setting
                        case permission
                        case parent_team_id
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/requestBody/content/application\/json`.
                case json(Operations.teams_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_create.Input.Path,
                headers: Operations.teams_sol_create.Input.Headers = .init(),
                body: Operations.teams_sol_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/post(teams/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a team by name
    ///
    /// Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam NÃ¤me"` would become `my-team-name`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/get(teams/get-by-name)`.
    public enum teams_sol_get_hyphen_by_hyphen_name {
        public static let id: Swift.String = "teams/get-by-name"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_by_hyphen_name.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_by_hyphen_name.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Path,
                headers: Operations.teams_sol_get_hyphen_by_hyphen_name.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_by_hyphen_name.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_by_hyphen_name.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/get(teams/get-by-name)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_by_hyphen_name.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_by_hyphen_name.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/get(teams/get-by-name)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a team
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)`.
    public enum teams_sol_update_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/update-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/name`.
                    public var name: Swift.String?
                    /// The description of the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/privacy`.
                    @frozen public enum privacyPayload: String, Codable, Hashable, Sendable {
                        case secret = "secret"
                        case closed = "closed"
                    }
                    /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/privacy`.
                    public var privacy: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.privacyPayload?
                    /// The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/notification_setting`.
                    @frozen public enum notification_settingPayload: String, Codable, Hashable, Sendable {
                        case notifications_enabled = "notifications_enabled"
                        case notifications_disabled = "notifications_disabled"
                    }
                    /// The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/notification_setting`.
                    public var notification_setting: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.notification_settingPayload?
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case pull = "pull"
                        case push = "push"
                        case admin = "admin"
                    }
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.permissionPayload?
                    /// The ID of a team to set as the parent team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/json/parent_team_id`.
                    public var parent_team_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the team.
                    ///   - description: The description of the team.
                    ///   - privacy: The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
                    ///   - notification_setting: The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///   - permission: **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///   - parent_team_id: The ID of a team to set as the parent team.
                    public init(
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        privacy: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.privacyPayload? = nil,
                        notification_setting: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.notification_settingPayload? = nil,
                        permission: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload.permissionPayload? = nil,
                        parent_team_id: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.privacy = privacy
                        self.notification_setting = notification_setting
                        self.permission = permission
                        self.parent_team_id = parent_team_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case privacy
                        case notification_setting
                        case permission
                        case parent_team_id
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_in_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response when the updated information already exists
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/PATCH/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_update_hyphen_in_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/patch(teams/update-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a team
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/delete(teams/delete-in-org)`.
    public enum teams_sol_delete_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/delete-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_delete_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/delete(teams/delete-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List discussions
    ///
    /// List all discussions on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/get(teams/list-discussions-in-org)`.
    public enum teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-discussions-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Pinned discussions only filter
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/query/pinned`.
                public var pinned: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - pinned: Pinned discussions only filter
                public init(
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil,
                    pinned: Swift.String? = nil
                ) {
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                    self.pinned = pinned
                }
            }
            public var query: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_discussion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_discussion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/get(teams/list-discussions-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_discussions_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a discussion
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/post(teams/create-discussion-in-org)`.
    public enum teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/create-discussion-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion post's title.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// The discussion post's body text.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The discussion post's title.
                    ///   - body: The discussion post's body text.
                    ///   - _private: Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                    public init(
                        title: Swift.String,
                        body: Swift.String,
                        _private: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self._private = _private
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/requestBody/content/application\/json`.
                case json(Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/post(teams/create-discussion-in-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_create_hyphen_discussion_hyphen_in_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a discussion
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/get(teams/get-discussion-in-org)`.
    public enum teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/get-discussion-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/get(teams/get-discussion-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a discussion
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/patch(teams/update-discussion-in-org)`.
    public enum teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/update-discussion-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion post's title.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The discussion post's body text.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The discussion post's title.
                    ///   - body: The discussion post's body text.
                    public init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil
                    ) {
                        self.title = title
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/patch(teams/update-discussion-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_discussion_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a discussion
    ///
    /// Delete a discussion from a team's page.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/delete(teams/delete-discussion-in-org)`.
    public enum teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/delete-discussion-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/DELETE/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/delete(teams/delete-discussion-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_discussion_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List discussion comments
    ///
    /// List all comments on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-in-org)`.
    public enum teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-discussion-comments-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_discussion_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_discussion_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a discussion comment
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-in-org)`.
    public enum teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/create-discussion-comment-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion comment's body text.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The discussion comment's body text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-in-org)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a discussion comment
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-in-org)`.
    public enum teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/get-discussion-comment-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a discussion comment
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-in-org)`.
    public enum teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/update-discussion-comment-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion comment's body text.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The discussion comment's body text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a discussion comment
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-in-org)`.
    public enum teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/delete-discussion-comment-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List pending team invitations
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/invitations`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/invitations/get(teams/list-pending-invitations-in-org)`.
    public enum teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-pending-invitations-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/invitations/get(teams/list-pending-invitations-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List team members
    ///
    /// Team members will include the members of child teams.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/members`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/members/get(teams/list-members-in-org)`.
    public enum teams_sol_list_hyphen_members_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-members-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/query/role`.
                @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                    case member = "member"
                    case maintainer = "maintainer"
                    case all = "all"
                }
                /// Filters members returned by their role in the team.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/query/role`.
                public var role: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Query.rolePayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - role: Filters members returned by their role in the team.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    role: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Query.rolePayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.role = role
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/members/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/members/get(teams/list-members-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_members_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team membership for a user
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/get(teams/get-membership-for-user-in-org)`.
    public enum teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/get-membership-for-user-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/get(teams/get-membership-for-user-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// if user has no team membership
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/get(teams/get-membership-for-user-in-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team membership for a user
    ///
    /// Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/add-or-update-membership-for-user-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The role that this user should have in the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/requestBody/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                        case member = "member"
                        case maintainer = "maintainer"
                    }
                    /// The role that this user should have in the team.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/requestBody/json/role`.
                    public var role: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body.jsonPayload.rolePayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role that this user should have in the team.
                    public init(role: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body.jsonPayload.rolePayload? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Forbidden if team synchronization is set up
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Unprocessable Entity if you attempt to add an organization to a team
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/put(teams/add-or-update-membership-for-user-in-org)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove team membership for a user
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/delete(teams/remove-membership-for-user-in-org)`.
    public enum teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/remove-membership-for-user-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/memberships/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - username: The handle for the GitHub user account.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    username: Components.Parameters.username
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/delete(teams/remove-membership-for-user-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Forbidden if team synchronization is set up
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/memberships/{username}/delete(teams/remove-membership-for-user-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_in_hyphen_org.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List team projects
    ///
    /// Lists the organization projects for a team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/get(teams/list-projects-in-org)`.
    public enum teams_sol_list_hyphen_projects_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-projects-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_project])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_project] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/get(teams/list-projects-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_projects_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check team permissions for a project
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/get(teams/check-permissions-for-project-in-org)`.
    public enum teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/check-permissions-for-project-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - project_id: The unique identifier of the project.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/get(teams/check-permissions-for-project-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if project is not managed by this team
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/get(teams/check-permissions-for-project-in-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_in_hyphen_org.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team project permissions
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/put(teams/add-or-update-project-permissions-in-org)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/add-or-update-project-permissions-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - project_id: The unique identifier of the project.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Headers
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                    }
                    /// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body.jsonPayload.permissionPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    public init(permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body.jsonPayload.permissionPayload? = nil) {
                        self.permission = permission
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Headers = .init(),
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/put(teams/add-or-update-project-permissions-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/responses/403/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/responses/403/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/responses/403/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/PUT/responses/403/content/application\/json`.
                    case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden if the project is not owned by the organization
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/put(teams/add-or-update-project-permissions-in-org)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_in_hyphen_org.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a project from a team
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/delete(teams/remove-project-in-org)`.
    public enum teams_sol_remove_hyphen_project_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/remove-project-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/projects/{project_id}/DELETE/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - project_id: The unique identifier of the project.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/projects/{project_id}/delete(teams/remove-project-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_project_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List team repositories
    ///
    /// Lists a team's repositories visible to the authenticated user.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/get(teams/list-repos-in-org)`.
    public enum teams_sol_list_hyphen_repos_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-repos-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/get(teams/list-repos-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_repos_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check team permissions for a repository
    ///
    /// Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
    ///
    /// If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
    ///
    /// If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)`.
    public enum teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/check-permissions-for-repo-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Path,
                headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alternative response with repository permissions
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if team does not have permission for the repository
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-in-org)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_in_hyphen_org.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team repository permissions
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
    ///
    /// - Remark: HTTP `PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-in-org)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/add-or-update-repo-permissions-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                    ///
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/requestBody/json/permission`.
                    public var permission: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                    public init(permission: Swift.String? = nil) {
                        self.permission = permission
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Path,
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Input.Body? = nil
            ) {
                self.path = path
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Remove a repository from a team
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    ///
    /// - Remark: HTTP `DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/delete(teams/remove-repo-in-org)`.
    public enum teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/remove-repo-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/DELETE/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/DELETE/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.org = org
                    self.team_slug = team_slug
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}/delete(teams/remove-repo-in-org)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_repo_hyphen_in_hyphen_org.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List child teams
    ///
    /// Lists the child teams of the team specified by `{team_slug}`.
    ///
    /// **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/teams/{team_slug}/teams`.
    /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/teams/get(teams/list-child-in-org)`.
    public enum teams_sol_list_hyphen_child_hyphen_in_hyphen_org {
        public static let id: Swift.String = "teams/list-child-in-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/path/org`.
                public var org: Components.Parameters.org
                /// The slug of the team name.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/path/team_slug`.
                public var team_slug: Components.Parameters.team_hyphen_slug
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                ///   - team_slug: The slug of the team name.
                public init(
                    org: Components.Parameters.org,
                    team_slug: Components.Parameters.team_hyphen_slug
                ) {
                    self.org = org
                    self.team_slug = team_slug
                }
            }
            public var path: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Query
            /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Path,
                query: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/teams/{team_slug}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// if child teams exist
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/teams/{team_slug}/teams/get(teams/list-child-in-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_child_hyphen_in_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/get(teams/get-legacy)`.
    public enum teams_sol_get_hyphen_legacy {
        public static let id: Swift.String = "teams/get-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_get_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_get_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/get(teams/get-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/get(teams/get-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
    ///
    /// To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    ///
    /// **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)`.
    public enum teams_sol_update_hyphen_legacy {
        public static let id: Swift.String = "teams/update-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_update_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The name of the team.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/name`.
                    public var name: Swift.String
                    /// The description of the team.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/description`.
                    public var description: Swift.String?
                    /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/privacy`.
                    @frozen public enum privacyPayload: String, Codable, Hashable, Sendable {
                        case secret = "secret"
                        case closed = "closed"
                    }
                    /// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
                    /// **For a non-nested team:**  
                    ///  * `secret` - only visible to organization owners and members of this team.  
                    ///  * `closed` - visible to all members of this organization.  
                    /// **For a parent or child team:**  
                    ///  * `closed` - visible to all members of this organization.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/privacy`.
                    public var privacy: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.privacyPayload?
                    /// The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/notification_setting`.
                    @frozen public enum notification_settingPayload: String, Codable, Hashable, Sendable {
                        case notifications_enabled = "notifications_enabled"
                        case notifications_disabled = "notifications_disabled"
                    }
                    /// The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
                    ///  * `notifications_disabled` - no one receives notifications.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/notification_setting`.
                    public var notification_setting: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.notification_settingPayload?
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case pull = "pull"
                        case push = "push"
                        case admin = "admin"
                    }
                    /// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.permissionPayload?
                    /// The ID of a team to set as the parent team.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/json/parent_team_id`.
                    public var parent_team_id: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the team.
                    ///   - description: The description of the team.
                    ///   - privacy: The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
                    ///   - notification_setting: The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
                    ///   - permission: **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
                    ///   - parent_team_id: The ID of a team to set as the parent team.
                    public init(
                        name: Swift.String,
                        description: Swift.String? = nil,
                        privacy: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.privacyPayload? = nil,
                        notification_setting: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.notification_settingPayload? = nil,
                        permission: Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload.permissionPayload? = nil,
                        parent_team_id: Swift.Int? = nil
                    ) {
                        self.name = name
                        self.description = description
                        self.privacy = privacy
                        self.notification_setting = notification_setting
                        self.permission = permission
                        self.parent_team_id = parent_team_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case description
                        case privacy
                        case notification_setting
                        case permission
                        case parent_team_id
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_legacy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_update_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_legacy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response when the updated information already exists
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/PATCH/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_full)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_full {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_legacy.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_legacy.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_update_hyphen_legacy.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_update_hyphen_legacy.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/patch(teams/update-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
    ///
    /// To delete a team, the authenticated user must be an organization owner or team maintainer.
    ///
    /// If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)`.
    public enum teams_sol_delete_hyphen_legacy {
        public static let id: Swift.String = "teams/delete-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_delete_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_delete_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_delete_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_delete_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_delete_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/delete(teams/delete-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List discussions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
    ///
    /// List all discussions on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/get(teams/list-discussions-legacy)`.
    public enum teams_sol_list_hyphen_discussions_hyphen_legacy {
        public static let id: Swift.String = "teams/list-discussions-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_discussion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_discussion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/get(teams/list-discussions-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_discussions_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
    ///
    /// Creates a new discussion post on a team's page.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/post(teams/create-discussion-legacy)`.
    public enum teams_sol_create_hyphen_discussion_hyphen_legacy {
        public static let id: Swift.String = "teams/create-discussion-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion post's title.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody/json/title`.
                    public var title: Swift.String
                    /// The discussion post's body text.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody/json/private`.
                    public var _private: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The discussion post's title.
                    ///   - body: The discussion post's body text.
                    ///   - _private: Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                    public init(
                        title: Swift.String,
                        body: Swift.String,
                        _private: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self._private = _private
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case _private = "private"
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/requestBody/content/application\/json`.
                case json(Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/post(teams/create-discussion-legacy)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_create_hyphen_discussion_hyphen_legacy.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
    ///
    /// Get a specific discussion on a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/get(teams/get-discussion-legacy)`.
    public enum teams_sol_get_hyphen_discussion_hyphen_legacy {
        public static let id: Swift.String = "teams/get-discussion-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/get(teams/get-discussion-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_discussion_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
    ///
    /// Edits the title and body text of a discussion post. Only the parameters you provide are updated.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/patch(teams/update-discussion-legacy)`.
    public enum teams_sol_update_hyphen_discussion_hyphen_legacy {
        public static let id: Swift.String = "teams/update-discussion-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion post's title.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/requestBody/json/title`.
                    public var title: Swift.String?
                    /// The discussion post's body text.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The discussion post's title.
                    ///   - body: The discussion post's body text.
                    public init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil
                    ) {
                        self.title = title
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case title
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/patch(teams/update-discussion-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_discussion_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a discussion (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
    ///
    /// Delete a discussion from a team's page.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/delete(teams/delete-discussion-legacy)`.
    public enum teams_sol_delete_hyphen_discussion_hyphen_legacy {
        public static let id: Swift.String = "teams/delete-discussion-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/DELETE/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/delete(teams/delete-discussion-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_discussion_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List discussion comments (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
    ///
    /// List all comments on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-legacy)`.
    public enum teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy {
        public static let id: Swift.String = "teams/list-discussion-comments-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/direction`.
                @frozen public enum direction: String, Codable, Hashable, Sendable {
                    case asc = "asc"
                    case desc = "desc"
                }
                /// The direction to sort the results by.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/query/direction`.
                public var direction: Components.Parameters.direction?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - direction: The direction to sort the results by.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    direction: Components.Parameters.direction? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.direction = direction
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_discussion_hyphen_comment])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_discussion_hyphen_comment] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/get(teams/list-discussion-comments-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_discussion_hyphen_comments_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
    ///
    /// Creates a new comment on a team discussion.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `POST /teams/{team_id}/discussions/{discussion_number}/comments`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-legacy)`.
    public enum teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy {
        public static let id: Swift.String = "teams/create-discussion-comment-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                }
            }
            public var path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion comment's body text.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The discussion comment's body text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/requestBody/content/application\/json`.
                case json(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/post(teams/create-discussion-comment-legacy)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.teams_sol_create_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
    ///
    /// Get a specific comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-legacy)`.
    public enum teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy {
        public static let id: Swift.String = "teams/get-discussion-comment-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/get(teams/get-discussion-comment-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
    ///
    /// Edits the body text of a discussion comment.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-legacy)`.
    public enum teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy {
        public static let id: Swift.String = "teams/update-discussion-comment-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The discussion comment's body text.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/json/body`.
                    public var body: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - body: The discussion comment's body text.
                    public init(body: Swift.String) {
                        self.body = body
                    }
                    public enum CodingKeys: String, CodingKey {
                        case body
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_discussion_hyphen_comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_discussion_hyphen_comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/patch(teams/update-discussion-comment-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_update_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a discussion comment (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
    ///
    /// Deletes a comment on a team discussion.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-legacy)`.
    public enum teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy {
        public static let id: Swift.String = "teams/delete-discussion-comment-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The number that identifies the discussion.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/discussion_number`.
                public var discussion_number: Components.Parameters.discussion_hyphen_number
                /// The number that identifies the comment.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/DELETE/path/comment_number`.
                public var comment_number: Components.Parameters.comment_hyphen_number
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - discussion_number: The number that identifies the discussion.
                ///   - comment_number: The number that identifies the comment.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    discussion_number: Components.Parameters.discussion_hyphen_number,
                    comment_number: Components.Parameters.comment_hyphen_number
                ) {
                    self.team_id = team_id
                    self.discussion_number = discussion_number
                    self.comment_number = comment_number
                }
            }
            public var path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/delete(teams/delete-discussion-comment-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_delete_hyphen_discussion_hyphen_comment_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List pending team invitations (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
    ///
    /// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/invitations`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/invitations/get(teams/list-pending-invitations-legacy)`.
    public enum teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy {
        public static let id: Swift.String = "teams/list-pending-invitations-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/invitations/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.organization_hyphen_invitation])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.organization_hyphen_invitation] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/invitations/get(teams/list-pending-invitations-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_pending_hyphen_invitations_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List team members (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/get(teams/list-members-legacy)`.
    public enum teams_sol_list_hyphen_members_hyphen_legacy {
        public static let id: Swift.String = "teams/list-members-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/query/role`.
                @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                    case member = "member"
                    case maintainer = "maintainer"
                    case all = "all"
                }
                /// Filters members returned by their role in the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/query/role`.
                public var role: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Query.rolePayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - role: Filters members returned by their role in the team.
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    role: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Query.rolePayload? = nil,
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.role = role
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_members_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_members_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/members/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.simple_hyphen_user])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.simple_hyphen_user] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/get(teams/list-members-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_members_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/get(teams/list-members-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get team member (Legacy)
    ///
    /// The "Get team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
    ///
    /// To list members in a team, the team must be visible to the authenticated user.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/get(teams/get-member-legacy)`.
    public enum teams_sol_get_hyphen_member_hyphen_legacy {
        public static let id: Swift.String = "teams/get-member-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// if user is a member
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/get(teams/get-member-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// if user is not a member
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/get(teams/get-member-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_get_hyphen_member_hyphen_legacy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Add team member (Legacy)
    ///
    /// The "Add team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)`.
    public enum teams_sol_add_hyphen_member_hyphen_legacy {
        public static let id: Swift.String = "teams/add-member-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/PUT/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_member_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_member_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if team synchronization is set up
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.teams_sol_add_hyphen_member_hyphen_legacy.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/put(teams/add-member-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove team member (Legacy)
    ///
    /// The "Remove team member" endpoint (described below) is deprecated.
    ///
    /// We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/members/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/delete(teams/remove-member-legacy)`.
    public enum teams_sol_remove_hyphen_member_hyphen_legacy {
        public static let id: Swift.String = "teams/remove-member-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/members/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/delete(teams/remove-member-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if team synchronization is setup
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/members/{username}/delete(teams/remove-member-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_remove_hyphen_member_hyphen_legacy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
    ///
    /// Team members will include the members of child teams.
    ///
    /// To get a user's membership with a team, the team must be visible to the authenticated user.
    ///
    /// **Note:**
    /// The response contains the `state` of the membership and the member's `role`.
    ///
    /// The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/get(teams/get-membership-for-user-legacy)`.
    public enum teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy {
        public static let id: Swift.String = "teams/get-membership-for-user-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/get(teams/get-membership-for-user-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_get_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/get(teams/get-membership-for-user-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
    ///
    /// If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy {
        public static let id: Swift.String = "teams/add-or-update-membership-for-user-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The role that this user should have in the team.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/requestBody/json/role`.
                    @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                        case member = "member"
                        case maintainer = "maintainer"
                    }
                    /// The role that this user should have in the team.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/requestBody/json/role`.
                    public var role: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body.jsonPayload.rolePayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role that this user should have in the team.
                    public init(role: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body.jsonPayload.rolePayload? = nil) {
                        self.role = role
                    }
                    public enum CodingKeys: String, CodingKey {
                        case role
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_membership)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_membership {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// Forbidden if team synchronization is set up
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                public init() {}
            }
            /// Unprocessable Entity if you attempt to add an organization to a team
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/put(teams/add-or-update-membership-for-user-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove team membership for a user (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
    ///
    /// Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    ///
    /// **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/memberships/{username}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/delete(teams/remove-membership-for-user-legacy)`.
    public enum teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy {
        public static let id: Swift.String = "teams/remove-membership-for-user-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/memberships/{username}/DELETE/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - username: The handle for the GitHub user account.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    username: Components.Parameters.username
                ) {
                    self.team_id = team_id
                    self.username = username
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/delete(teams/remove-membership-for-user-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// Creates a new `Forbidden`.
                public init() {}
            }
            /// if team synchronization is set up
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/memberships/{username}/delete(teams/remove-membership-for-user-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_remove_hyphen_membership_hyphen_for_hyphen_user_hyphen_legacy.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List team projects (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.
    ///
    /// Lists the organization projects for a team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/get(teams/list-projects-legacy)`.
    public enum teams_sol_list_hyphen_projects_hyphen_legacy {
        public static let id: Swift.String = "teams/list-projects-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_projects_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_projects_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_project])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_project] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/get(teams/list-projects-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_projects_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/get(teams/list-projects-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check team permissions for a project (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.
    ///
    /// Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/get(teams/check-permissions-for-project-legacy)`.
    public enum teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy {
        public static let id: Swift.String = "teams/check-permissions-for-project-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - project_id: The unique identifier of the project.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.team_id = team_id
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_project)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_project {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/get(teams/check-permissions-for-project-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if project is not managed by this team
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/get(teams/check-permissions-for-project-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_project_hyphen_legacy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team project permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.
    ///
    /// Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy {
        public static let id: Swift.String = "teams/add-or-update-project-permissions-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - project_id: The unique identifier of the project.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.team_id = team_id
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case read = "read"
                        case write = "write"
                        case admin = "admin"
                    }
                    /// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload.permissionPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
                    public init(permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload.permissionPayload? = nil) {
                        self.permission = permission
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/responses/403/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/responses/403/content/json/message`.
                        public var message: Swift.String?
                        /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/responses/403/content/json/documentation_url`.
                        public var documentation_url: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentation_url:
                        public init(
                            message: Swift.String? = nil,
                            documentation_url: Swift.String? = nil
                        ) {
                            self.message = message
                            self.documentation_url = documentation_url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case message
                            case documentation_url
                        }
                    }
                    /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/PUT/responses/403/content/application\/json`.
                    case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden if the project is not owned by the organization
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_project_hyphen_permissions_hyphen_legacy.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/put(teams/add-or-update-project-permissions-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a project from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.
    ///
    /// Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/projects/{project_id}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)`.
    public enum teams_sol_remove_hyphen_project_hyphen_legacy {
        public static let id: Swift.String = "teams/remove-project-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The unique identifier of the project.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/DELETE/path/project_id`.
                public var project_id: Components.Parameters.project_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - project_id: The unique identifier of the project.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    project_id: Components.Parameters.project_hyphen_id
                ) {
                    self.team_id = team_id
                    self.project_id = project_id
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/projects/{project_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_remove_hyphen_project_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_remove_hyphen_project_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_project_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/projects/{project_id}/delete(teams/remove-project-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List team repositories (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/get(teams/list-repos-legacy)`.
    public enum teams_sol_list_hyphen_repos_hyphen_legacy {
        public static let id: Swift.String = "teams/list-repos-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_repos_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_repos_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/repos/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.minimal_hyphen_repository])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.minimal_hyphen_repository] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/get(teams/list-repos-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_repos_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/get(teams/list-repos-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Check team permissions for a repository (Legacy)
    ///
    /// **Note**: Repositories inherited through a parent team will also be checked.
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
    ///
    /// You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)`.
    public enum teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy {
        public static let id: Swift.String = "teams/check-permissions-for-repo-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.team_id = team_id
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.team_hyphen_repository)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.team_hyphen_repository {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alternative response with extra repository information
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response if repository is managed by this team
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Not Found if repository is not managed by this team
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/get(teams/check-permissions-for-repo-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.teams_sol_check_hyphen_permissions_hyphen_for_hyphen_repo_hyphen_legacy.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Add or update team repository permissions (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
    ///
    /// To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
    ///
    /// Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
    ///
    /// - Remark: HTTP `PUT /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)`.
    public enum teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy {
        public static let id: Swift.String = "teams/add-or-update-repo-permissions-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.team_id = team_id
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Headers
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/requestBody/json/permission`.
                    @frozen public enum permissionPayload: String, Codable, Hashable, Sendable {
                        case pull = "pull"
                        case push = "push"
                        case admin = "admin"
                    }
                    /// The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                    ///
                    /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/requestBody/json/permission`.
                    public var permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload.permissionPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - permission: The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                    public init(permission: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload.permissionPayload? = nil) {
                        self.permission = permission
                    }
                    public enum CodingKeys: String, CodingKey {
                        case permission
                    }
                }
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/PUT/requestBody/content/application\/json`.
                case json(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body.jsonPayload)
            }
            public var body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Path,
                headers: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Headers = .init(),
                body: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_add_hyphen_or_hyphen_update_hyphen_repo_hyphen_permissions_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/put(teams/add-or-update-repo-permissions-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a repository from a team (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
    ///
    /// If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
    ///
    /// - Remark: HTTP `DELETE /teams/{team_id}/repos/{owner}/{repo}`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/delete(teams/remove-repo-legacy)`.
    public enum teams_sol_remove_hyphen_repo_hyphen_legacy {
        public static let id: Swift.String = "teams/remove-repo-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/DELETE/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/DELETE/path/owner`.
                public var owner: Components.Parameters.owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/repos/{owner}/{repo}/DELETE/path/repo`.
                public var repo: Components.Parameters.repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                public init(
                    team_id: Components.Parameters.team_hyphen_id,
                    owner: Components.Parameters.owner,
                    repo: Components.Parameters.repo
                ) {
                    self.team_id = team_id
                    self.owner = owner
                    self.repo = repo
                }
            }
            public var path: Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            public init(path: Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Input.Path) {
                self.path = path
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/repos/{owner}/{repo}/delete(teams/remove-repo-legacy)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.teams_sol_remove_hyphen_repo_hyphen_legacy.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List child teams (Legacy)
    ///
    /// **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
    ///
    /// - Remark: HTTP `GET /teams/{team_id}/teams`.
    /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)`.
    public enum teams_sol_list_hyphen_child_hyphen_legacy {
        public static let id: Swift.String = "teams/list-child-legacy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The unique identifier of the team.
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/path/team_id`.
                public var team_id: Components.Parameters.team_hyphen_id
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - team_id: The unique identifier of the team.
                public init(team_id: Components.Parameters.team_hyphen_id) {
                    self.team_id = team_id
                }
            }
            public var path: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Path
            /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Query
            /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_child_hyphen_legacy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_child_hyphen_legacy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Path,
                query: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/teams/{team_id}/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// if child teams exist
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_child_hyphen_legacy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//teams/{team_id}/teams/get(teams/list-child-legacy)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.validation_failed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.validation_failed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List teams for the authenticated user
    ///
    /// List all of the teams across all of the organizations to which the authenticated
    /// user belongs.
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
    ///
    /// When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
    ///
    /// - Remark: HTTP `GET /user/teams`.
    /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)`.
    public enum teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user {
        public static let id: Swift.String = "teams/list-for-authenticated-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/teams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/teams/GET/query/per_page`.
                public var per_page: Components.Parameters.per_hyphen_page?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/user/teams/GET/query/page`.
                public var page: Components.Parameters.page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - per_page: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                public init(
                    per_page: Components.Parameters.per_hyphen_page? = nil,
                    page: Components.Parameters.page? = nil
                ) {
                    self.per_page = per_page
                    self.page = page
                }
            }
            public var query: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query
            /// - Remark: Generated from `#/paths/user/teams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Query = .init(),
                headers: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/teams/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/teams/GET/responses/200/headers/Link`.
                    public var Link: Components.Headers.link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Link:
                    public init(Link: Components.Headers.link? = nil) {
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/user/teams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/teams/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.team_hyphen_full])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.team_hyphen_full] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Headers = .init(),
                    body: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.teams_sol_list_hyphen_for_hyphen_authenticated_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//user/teams/get(teams/list-for-authenticated-user)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
