// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// GitHub API Root
    ///
    /// Get Hypermedia links to resources accessible in GitHub's REST API
    ///
    /// - Remark: HTTP `GET /`.
    /// - Remark: Generated from `#/paths///get(meta/root)`.
    func meta_sol_root(_ input: Operations.meta_sol_root.Input) async throws -> Operations.meta_sol_root.Output
    /// Get GitHub meta information
    ///
    /// Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
    ///
    /// The API's response also includes a list of GitHub's domain names.
    ///
    /// The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
    ///
    /// > [!NOTE]
    /// > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
    ///
    /// - Remark: HTTP `GET /meta`.
    /// - Remark: Generated from `#/paths//meta/get(meta/get)`.
    func meta_sol_get(_ input: Operations.meta_sol_get.Input) async throws -> Operations.meta_sol_get.Output
    /// Get Octocat
    ///
    /// Get the octocat as ASCII art
    ///
    /// - Remark: HTTP `GET /octocat`.
    /// - Remark: Generated from `#/paths//octocat/get(meta/get-octocat)`.
    func meta_sol_get_hyphen_octocat(_ input: Operations.meta_sol_get_hyphen_octocat.Input) async throws -> Operations.meta_sol_get_hyphen_octocat.Output
    /// Get all API versions
    ///
    /// Get all supported GitHub API versions.
    ///
    /// - Remark: HTTP `GET /versions`.
    /// - Remark: Generated from `#/paths//versions/get(meta/get-all-versions)`.
    func meta_sol_get_hyphen_all_hyphen_versions(_ input: Operations.meta_sol_get_hyphen_all_hyphen_versions.Input) async throws -> Operations.meta_sol_get_hyphen_all_hyphen_versions.Output
    /// Get the Zen of GitHub
    ///
    /// Get a random sentence from the Zen of GitHub
    ///
    /// - Remark: HTTP `GET /zen`.
    /// - Remark: Generated from `#/paths//zen/get(meta/get-zen)`.
    func meta_sol_get_hyphen_zen(_ input: Operations.meta_sol_get_hyphen_zen.Input) async throws -> Operations.meta_sol_get_hyphen_zen.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// GitHub API Root
    ///
    /// Get Hypermedia links to resources accessible in GitHub's REST API
    ///
    /// - Remark: HTTP `GET /`.
    /// - Remark: Generated from `#/paths///get(meta/root)`.
    public func meta_sol_root(headers: Operations.meta_sol_root.Input.Headers = .init()) async throws -> Operations.meta_sol_root.Output {
        try await meta_sol_root(Operations.meta_sol_root.Input(headers: headers))
    }
    /// Get GitHub meta information
    ///
    /// Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
    ///
    /// The API's response also includes a list of GitHub's domain names.
    ///
    /// The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
    ///
    /// > [!NOTE]
    /// > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
    ///
    /// - Remark: HTTP `GET /meta`.
    /// - Remark: Generated from `#/paths//meta/get(meta/get)`.
    public func meta_sol_get(headers: Operations.meta_sol_get.Input.Headers = .init()) async throws -> Operations.meta_sol_get.Output {
        try await meta_sol_get(Operations.meta_sol_get.Input(headers: headers))
    }
    /// Get Octocat
    ///
    /// Get the octocat as ASCII art
    ///
    /// - Remark: HTTP `GET /octocat`.
    /// - Remark: Generated from `#/paths//octocat/get(meta/get-octocat)`.
    public func meta_sol_get_hyphen_octocat(
        query: Operations.meta_sol_get_hyphen_octocat.Input.Query = .init(),
        headers: Operations.meta_sol_get_hyphen_octocat.Input.Headers = .init()
    ) async throws -> Operations.meta_sol_get_hyphen_octocat.Output {
        try await meta_sol_get_hyphen_octocat(Operations.meta_sol_get_hyphen_octocat.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get all API versions
    ///
    /// Get all supported GitHub API versions.
    ///
    /// - Remark: HTTP `GET /versions`.
    /// - Remark: Generated from `#/paths//versions/get(meta/get-all-versions)`.
    public func meta_sol_get_hyphen_all_hyphen_versions(headers: Operations.meta_sol_get_hyphen_all_hyphen_versions.Input.Headers = .init()) async throws -> Operations.meta_sol_get_hyphen_all_hyphen_versions.Output {
        try await meta_sol_get_hyphen_all_hyphen_versions(Operations.meta_sol_get_hyphen_all_hyphen_versions.Input(headers: headers))
    }
    /// Get the Zen of GitHub
    ///
    /// Get a random sentence from the Zen of GitHub
    ///
    /// - Remark: HTTP `GET /zen`.
    /// - Remark: Generated from `#/paths//zen/get(meta/get-zen)`.
    public func meta_sol_get_hyphen_zen(headers: Operations.meta_sol_get_hyphen_zen.Input.Headers = .init()) async throws -> Operations.meta_sol_get_hyphen_zen.Output {
        try await meta_sol_get_hyphen_zen(Operations.meta_sol_get_hyphen_zen.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/root`.
        public struct root: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/root/current_user_url`.
            public var current_user_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/current_user_authorizations_html_url`.
            public var current_user_authorizations_html_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/authorizations_url`.
            public var authorizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/code_search_url`.
            public var code_search_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/commit_search_url`.
            public var commit_search_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/emails_url`.
            public var emails_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/emojis_url`.
            public var emojis_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/events_url`.
            public var events_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/feeds_url`.
            public var feeds_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/followers_url`.
            public var followers_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/following_url`.
            public var following_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/gists_url`.
            public var gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/hub_url`.
            @available(*, deprecated)
            public var hub_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/root/issue_search_url`.
            public var issue_search_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/issues_url`.
            public var issues_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/keys_url`.
            public var keys_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/label_search_url`.
            public var label_search_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/notifications_url`.
            public var notifications_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/organization_url`.
            public var organization_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/organization_repositories_url`.
            public var organization_repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/organization_teams_url`.
            public var organization_teams_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/public_gists_url`.
            public var public_gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/rate_limit_url`.
            public var rate_limit_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/repository_url`.
            public var repository_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/repository_search_url`.
            public var repository_search_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/current_user_repositories_url`.
            public var current_user_repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/starred_url`.
            public var starred_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/starred_gists_url`.
            public var starred_gists_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/topic_search_url`.
            public var topic_search_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/root/user_url`.
            public var user_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/user_organizations_url`.
            public var user_organizations_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/user_repositories_url`.
            public var user_repositories_url: Swift.String
            /// - Remark: Generated from `#/components/schemas/root/user_search_url`.
            public var user_search_url: Swift.String
            /// Creates a new `root`.
            ///
            /// - Parameters:
            ///   - current_user_url:
            ///   - current_user_authorizations_html_url:
            ///   - authorizations_url:
            ///   - code_search_url:
            ///   - commit_search_url:
            ///   - emails_url:
            ///   - emojis_url:
            ///   - events_url:
            ///   - feeds_url:
            ///   - followers_url:
            ///   - following_url:
            ///   - gists_url:
            ///   - hub_url:
            ///   - issue_search_url:
            ///   - issues_url:
            ///   - keys_url:
            ///   - label_search_url:
            ///   - notifications_url:
            ///   - organization_url:
            ///   - organization_repositories_url:
            ///   - organization_teams_url:
            ///   - public_gists_url:
            ///   - rate_limit_url:
            ///   - repository_url:
            ///   - repository_search_url:
            ///   - current_user_repositories_url:
            ///   - starred_url:
            ///   - starred_gists_url:
            ///   - topic_search_url:
            ///   - user_url:
            ///   - user_organizations_url:
            ///   - user_repositories_url:
            ///   - user_search_url:
            public init(
                current_user_url: Swift.String,
                current_user_authorizations_html_url: Swift.String,
                authorizations_url: Swift.String,
                code_search_url: Swift.String,
                commit_search_url: Swift.String,
                emails_url: Swift.String,
                emojis_url: Swift.String,
                events_url: Swift.String,
                feeds_url: Swift.String,
                followers_url: Swift.String,
                following_url: Swift.String,
                gists_url: Swift.String,
                hub_url: Swift.String? = nil,
                issue_search_url: Swift.String,
                issues_url: Swift.String,
                keys_url: Swift.String,
                label_search_url: Swift.String,
                notifications_url: Swift.String,
                organization_url: Swift.String,
                organization_repositories_url: Swift.String,
                organization_teams_url: Swift.String,
                public_gists_url: Swift.String,
                rate_limit_url: Swift.String,
                repository_url: Swift.String,
                repository_search_url: Swift.String,
                current_user_repositories_url: Swift.String,
                starred_url: Swift.String,
                starred_gists_url: Swift.String,
                topic_search_url: Swift.String? = nil,
                user_url: Swift.String,
                user_organizations_url: Swift.String,
                user_repositories_url: Swift.String,
                user_search_url: Swift.String
            ) {
                self.current_user_url = current_user_url
                self.current_user_authorizations_html_url = current_user_authorizations_html_url
                self.authorizations_url = authorizations_url
                self.code_search_url = code_search_url
                self.commit_search_url = commit_search_url
                self.emails_url = emails_url
                self.emojis_url = emojis_url
                self.events_url = events_url
                self.feeds_url = feeds_url
                self.followers_url = followers_url
                self.following_url = following_url
                self.gists_url = gists_url
                self.hub_url = hub_url
                self.issue_search_url = issue_search_url
                self.issues_url = issues_url
                self.keys_url = keys_url
                self.label_search_url = label_search_url
                self.notifications_url = notifications_url
                self.organization_url = organization_url
                self.organization_repositories_url = organization_repositories_url
                self.organization_teams_url = organization_teams_url
                self.public_gists_url = public_gists_url
                self.rate_limit_url = rate_limit_url
                self.repository_url = repository_url
                self.repository_search_url = repository_search_url
                self.current_user_repositories_url = current_user_repositories_url
                self.starred_url = starred_url
                self.starred_gists_url = starred_gists_url
                self.topic_search_url = topic_search_url
                self.user_url = user_url
                self.user_organizations_url = user_organizations_url
                self.user_repositories_url = user_repositories_url
                self.user_search_url = user_search_url
            }
            public enum CodingKeys: String, CodingKey {
                case current_user_url
                case current_user_authorizations_html_url
                case authorizations_url
                case code_search_url
                case commit_search_url
                case emails_url
                case emojis_url
                case events_url
                case feeds_url
                case followers_url
                case following_url
                case gists_url
                case hub_url
                case issue_search_url
                case issues_url
                case keys_url
                case label_search_url
                case notifications_url
                case organization_url
                case organization_repositories_url
                case organization_teams_url
                case public_gists_url
                case rate_limit_url
                case repository_url
                case repository_search_url
                case current_user_repositories_url
                case starred_url
                case starred_gists_url
                case topic_search_url
                case user_url
                case user_organizations_url
                case user_repositories_url
                case user_search_url
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        public struct basic_hyphen_error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            public var documentation_url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            public var status: Swift.String?
            /// Creates a new `basic_hyphen_error`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentation_url:
            ///   - url:
            ///   - status:
            public init(
                message: Swift.String? = nil,
                documentation_url: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentation_url = documentation_url
                self.url = url
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case documentation_url
                case url
                case status
            }
        }
        /// Api Overview
        ///
        /// - Remark: Generated from `#/components/schemas/api-overview`.
        public struct api_hyphen_overview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/api-overview/verifiable_password_authentication`.
            public var verifiable_password_authentication: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints`.
            public struct ssh_key_fingerprintsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints/SHA256_RSA`.
                public var SHA256_RSA: Swift.String?
                /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints/SHA256_DSA`.
                public var SHA256_DSA: Swift.String?
                /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints/SHA256_ECDSA`.
                public var SHA256_ECDSA: Swift.String?
                /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints/SHA256_ED25519`.
                public var SHA256_ED25519: Swift.String?
                /// Creates a new `ssh_key_fingerprintsPayload`.
                ///
                /// - Parameters:
                ///   - SHA256_RSA:
                ///   - SHA256_DSA:
                ///   - SHA256_ECDSA:
                ///   - SHA256_ED25519:
                public init(
                    SHA256_RSA: Swift.String? = nil,
                    SHA256_DSA: Swift.String? = nil,
                    SHA256_ECDSA: Swift.String? = nil,
                    SHA256_ED25519: Swift.String? = nil
                ) {
                    self.SHA256_RSA = SHA256_RSA
                    self.SHA256_DSA = SHA256_DSA
                    self.SHA256_ECDSA = SHA256_ECDSA
                    self.SHA256_ED25519 = SHA256_ED25519
                }
                public enum CodingKeys: String, CodingKey {
                    case SHA256_RSA
                    case SHA256_DSA
                    case SHA256_ECDSA
                    case SHA256_ED25519
                }
            }
            /// - Remark: Generated from `#/components/schemas/api-overview/ssh_key_fingerprints`.
            public var ssh_key_fingerprints: Components.Schemas.api_hyphen_overview.ssh_key_fingerprintsPayload?
            /// - Remark: Generated from `#/components/schemas/api-overview/ssh_keys`.
            public var ssh_keys: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/hooks`.
            public var hooks: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/github_enterprise_importer`.
            public var github_enterprise_importer: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/web`.
            public var web: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/api`.
            public var api: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/git`.
            public var git: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/packages`.
            public var packages: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/pages`.
            public var pages: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/importer`.
            public var importer: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/actions`.
            public var actions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/actions_macos`.
            public var actions_macos: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/codespaces`.
            public var codespaces: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/dependabot`.
            public var dependabot: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/copilot`.
            public var copilot: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/api-overview/domains`.
            public struct domainsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/website`.
                public var website: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/codespaces`.
                public var codespaces: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/copilot`.
                public var copilot: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/packages`.
                public var packages: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/actions`.
                public var actions: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/actions_inbound`.
                public struct actions_inboundPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/api-overview/domains/actions_inbound/full_domains`.
                    public var full_domains: [Swift.String]?
                    /// - Remark: Generated from `#/components/schemas/api-overview/domains/actions_inbound/wildcard_domains`.
                    public var wildcard_domains: [Swift.String]?
                    /// Creates a new `actions_inboundPayload`.
                    ///
                    /// - Parameters:
                    ///   - full_domains:
                    ///   - wildcard_domains:
                    public init(
                        full_domains: [Swift.String]? = nil,
                        wildcard_domains: [Swift.String]? = nil
                    ) {
                        self.full_domains = full_domains
                        self.wildcard_domains = wildcard_domains
                    }
                    public enum CodingKeys: String, CodingKey {
                        case full_domains
                        case wildcard_domains
                    }
                }
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/actions_inbound`.
                public var actions_inbound: Components.Schemas.api_hyphen_overview.domainsPayload.actions_inboundPayload?
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/artifact_attestations`.
                public struct artifact_attestationsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/api-overview/domains/artifact_attestations/trust_domain`.
                    public var trust_domain: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/api-overview/domains/artifact_attestations/services`.
                    public var services: [Swift.String]?
                    /// Creates a new `artifact_attestationsPayload`.
                    ///
                    /// - Parameters:
                    ///   - trust_domain:
                    ///   - services:
                    public init(
                        trust_domain: Swift.String? = nil,
                        services: [Swift.String]? = nil
                    ) {
                        self.trust_domain = trust_domain
                        self.services = services
                    }
                    public enum CodingKeys: String, CodingKey {
                        case trust_domain
                        case services
                    }
                }
                /// - Remark: Generated from `#/components/schemas/api-overview/domains/artifact_attestations`.
                public var artifact_attestations: Components.Schemas.api_hyphen_overview.domainsPayload.artifact_attestationsPayload?
                /// Creates a new `domainsPayload`.
                ///
                /// - Parameters:
                ///   - website:
                ///   - codespaces:
                ///   - copilot:
                ///   - packages:
                ///   - actions:
                ///   - actions_inbound:
                ///   - artifact_attestations:
                public init(
                    website: [Swift.String]? = nil,
                    codespaces: [Swift.String]? = nil,
                    copilot: [Swift.String]? = nil,
                    packages: [Swift.String]? = nil,
                    actions: [Swift.String]? = nil,
                    actions_inbound: Components.Schemas.api_hyphen_overview.domainsPayload.actions_inboundPayload? = nil,
                    artifact_attestations: Components.Schemas.api_hyphen_overview.domainsPayload.artifact_attestationsPayload? = nil
                ) {
                    self.website = website
                    self.codespaces = codespaces
                    self.copilot = copilot
                    self.packages = packages
                    self.actions = actions
                    self.actions_inbound = actions_inbound
                    self.artifact_attestations = artifact_attestations
                }
                public enum CodingKeys: String, CodingKey {
                    case website
                    case codespaces
                    case copilot
                    case packages
                    case actions
                    case actions_inbound
                    case artifact_attestations
                }
            }
            /// - Remark: Generated from `#/components/schemas/api-overview/domains`.
            public var domains: Components.Schemas.api_hyphen_overview.domainsPayload?
            /// Creates a new `api_hyphen_overview`.
            ///
            /// - Parameters:
            ///   - verifiable_password_authentication:
            ///   - ssh_key_fingerprints:
            ///   - ssh_keys:
            ///   - hooks:
            ///   - github_enterprise_importer:
            ///   - web:
            ///   - api:
            ///   - git:
            ///   - packages:
            ///   - pages:
            ///   - importer:
            ///   - actions:
            ///   - actions_macos:
            ///   - codespaces:
            ///   - dependabot:
            ///   - copilot:
            ///   - domains:
            public init(
                verifiable_password_authentication: Swift.Bool,
                ssh_key_fingerprints: Components.Schemas.api_hyphen_overview.ssh_key_fingerprintsPayload? = nil,
                ssh_keys: [Swift.String]? = nil,
                hooks: [Swift.String]? = nil,
                github_enterprise_importer: [Swift.String]? = nil,
                web: [Swift.String]? = nil,
                api: [Swift.String]? = nil,
                git: [Swift.String]? = nil,
                packages: [Swift.String]? = nil,
                pages: [Swift.String]? = nil,
                importer: [Swift.String]? = nil,
                actions: [Swift.String]? = nil,
                actions_macos: [Swift.String]? = nil,
                codespaces: [Swift.String]? = nil,
                dependabot: [Swift.String]? = nil,
                copilot: [Swift.String]? = nil,
                domains: Components.Schemas.api_hyphen_overview.domainsPayload? = nil
            ) {
                self.verifiable_password_authentication = verifiable_password_authentication
                self.ssh_key_fingerprints = ssh_key_fingerprints
                self.ssh_keys = ssh_keys
                self.hooks = hooks
                self.github_enterprise_importer = github_enterprise_importer
                self.web = web
                self.api = api
                self.git = git
                self.packages = packages
                self.pages = pages
                self.importer = importer
                self.actions = actions
                self.actions_macos = actions_macos
                self.codespaces = codespaces
                self.dependabot = dependabot
                self.copilot = copilot
                self.domains = domains
            }
            public enum CodingKeys: String, CodingKey {
                case verifiable_password_authentication
                case ssh_key_fingerprints
                case ssh_keys
                case hooks
                case github_enterprise_importer
                case web
                case api
                case git
                case packages
                case pages
                case importer
                case actions
                case actions_macos
                case codespaces
                case dependabot
                case copilot
                case domains
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct not_found: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.basic_hyphen_error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.basic_hyphen_error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.not_found.Body
            /// Creates a new `not_found`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.not_found.Body) {
                self.body = body
            }
        }
        public struct not_modified: Sendable, Hashable {
            /// Creates a new `not_modified`.
            public init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// GitHub API Root
    ///
    /// Get Hypermedia links to resources accessible in GitHub's REST API
    ///
    /// - Remark: HTTP `GET /`.
    /// - Remark: Generated from `#/paths///get(meta/root)`.
    public enum meta_sol_root {
        public static let id: Swift.String = "meta/root"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_root.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_root.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.meta_sol_root.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.meta_sol_root.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.root)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.root {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.meta_sol_root.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.meta_sol_root.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths///get(meta/root)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.meta_sol_root.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.meta_sol_root.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub meta information
    ///
    /// Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
    ///
    /// The API's response also includes a list of GitHub's domain names.
    ///
    /// The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
    ///
    /// > [!NOTE]
    /// > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
    ///
    /// - Remark: HTTP `GET /meta`.
    /// - Remark: Generated from `#/paths//meta/get(meta/get)`.
    public enum meta_sol_get {
        public static let id: Swift.String = "meta/get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/meta/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.meta_sol_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.meta_sol_get.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/meta/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/meta/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.api_hyphen_overview)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.api_hyphen_overview {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.meta_sol_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.meta_sol_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//meta/get(meta/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.meta_sol_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.meta_sol_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//meta/get(meta/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.not_modified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//meta/get(meta/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            public static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            public var notModified: Components.Responses.not_modified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Octocat
    ///
    /// Get the octocat as ASCII art
    ///
    /// - Remark: HTTP `GET /octocat`.
    /// - Remark: Generated from `#/paths//octocat/get(meta/get-octocat)`.
    public enum meta_sol_get_hyphen_octocat {
        public static let id: Swift.String = "meta/get-octocat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/octocat/GET/query`.
            public struct Query: Sendable, Hashable {
                /// The words to show in Octocat's speech bubble
                ///
                /// - Remark: Generated from `#/paths/octocat/GET/query/s`.
                public var s: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - s: The words to show in Octocat's speech bubble
                public init(s: Swift.String? = nil) {
                    self.s = s
                }
            }
            public var query: Operations.meta_sol_get_hyphen_octocat.Input.Query
            /// - Remark: Generated from `#/paths/octocat/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_octocat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_octocat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.meta_sol_get_hyphen_octocat.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.meta_sol_get_hyphen_octocat.Input.Query = .init(),
                headers: Operations.meta_sol_get_hyphen_octocat.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/octocat/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/octocat/GET/responses/200/content/application\/octocat-stream`.
                    case application_octocat_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_octocat_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.application_octocat_hyphen_stream`.
                    /// - SeeAlso: `.application_octocat_hyphen_stream`.
                    public var application_octocat_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_octocat_hyphen_stream(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.meta_sol_get_hyphen_octocat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.meta_sol_get_hyphen_octocat.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//octocat/get(meta/get-octocat)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.meta_sol_get_hyphen_octocat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.meta_sol_get_hyphen_octocat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case application_octocat_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octocat-stream":
                    self = .application_octocat_hyphen_stream
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_octocat_hyphen_stream:
                    return "application/octocat-stream"
                }
            }
            public static var allCases: [Self] {
                [
                    .application_octocat_hyphen_stream
                ]
            }
        }
    }
    /// Get all API versions
    ///
    /// Get all supported GitHub API versions.
    ///
    /// - Remark: HTTP `GET /versions`.
    /// - Remark: Generated from `#/paths//versions/get(meta/get-all-versions)`.
    public enum meta_sol_get_hyphen_all_hyphen_versions {
        public static let id: Swift.String = "meta/get-all-versions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/versions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_all_hyphen_versions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_all_hyphen_versions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.meta_sol_get_hyphen_all_hyphen_versions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.meta_sol_get_hyphen_all_hyphen_versions.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/versions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/versions/GET/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.meta_sol_get_hyphen_all_hyphen_versions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.meta_sol_get_hyphen_all_hyphen_versions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//versions/get(meta/get-all-versions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.meta_sol_get_hyphen_all_hyphen_versions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.meta_sol_get_hyphen_all_hyphen_versions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//versions/get(meta/get-all-versions)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.not_found)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.not_found {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the Zen of GitHub
    ///
    /// Get a random sentence from the Zen of GitHub
    ///
    /// - Remark: HTTP `GET /zen`.
    /// - Remark: Generated from `#/paths//zen/get(meta/get-zen)`.
    public enum meta_sol_get_hyphen_zen {
        public static let id: Swift.String = "meta/get-zen"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/zen/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_zen.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.meta_sol_get_hyphen_zen.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.meta_sol_get_hyphen_zen.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.meta_sol_get_hyphen_zen.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/zen/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/zen/GET/responses/200/content/text\/plain`.
                    case plainText(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.plainText`.
                    ///
                    /// - Throws: An error if `self` is not `.plainText`.
                    /// - SeeAlso: `.plainText`.
                    public var plainText: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .plainText(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.meta_sol_get_hyphen_zen.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.meta_sol_get_hyphen_zen.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//zen/get(meta/get-zen)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.meta_sol_get_hyphen_zen.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.meta_sol_get_hyphen_zen.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case plainText
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/plain":
                    self = .plainText
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .plainText:
                    return "text/plain"
                }
            }
            public static var allCases: [Self] {
                [
                    .plainText
                ]
            }
        }
    }
}
