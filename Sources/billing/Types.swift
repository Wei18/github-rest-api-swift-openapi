// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get GitHub Actions billing for an organization
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/actions/get(billing/get-github-actions-billing-org)`.
    func billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org(_ input: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output
    /// Get GitHub Packages billing for an organization
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/packages/get(billing/get-github-packages-billing-org)`.
    func billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org(_ input: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output
    /// Get shared storage billing for an organization
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-org)`.
    func billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org(_ input: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input) async throws -> Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output
    /// Get GitHub Actions billing for a user
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/actions/get(billing/get-github-actions-billing-user)`.
    func billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user(_ input: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output
    /// Get GitHub Packages billing for a user
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/packages/get(billing/get-github-packages-billing-user)`.
    func billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user(_ input: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output
    /// Get shared storage billing for a user
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-user)`.
    func billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user(_ input: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input) async throws -> Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get GitHub Actions billing for an organization
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/actions/get(billing/get-github-actions-billing-org)`.
    public func billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org(
        path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Path,
        headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output {
        try await billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org(Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get GitHub Packages billing for an organization
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/packages/get(billing/get-github-packages-billing-org)`.
    public func billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org(
        path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Path,
        headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output {
        try await billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org(Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get shared storage billing for an organization
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-org)`.
    public func billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org(
        path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Path,
        headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output {
        try await billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org(Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get GitHub Actions billing for a user
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/actions/get(billing/get-github-actions-billing-user)`.
    public func billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user(
        path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Path,
        headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output {
        try await billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user(Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get GitHub Packages billing for a user
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/packages/get(billing/get-github-packages-billing-user)`.
    public func billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user(
        path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Path,
        headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output {
        try await billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user(Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get shared storage billing for a user
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-user)`.
    public func billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user(
        path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Path,
        headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Headers = .init()
    ) async throws -> Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output {
        try await billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user(Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/actions-billing-usage`.
        public struct actions_hyphen_billing_hyphen_usage: Codable, Hashable, Sendable {
            /// The sum of the free and paid GitHub Actions minutes used.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-billing-usage/total_minutes_used`.
            public var total_minutes_used: Swift.Int
            /// The total paid GitHub Actions minutes used.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-billing-usage/total_paid_minutes_used`.
            public var total_paid_minutes_used: Swift.Int
            /// The amount of free GitHub Actions minutes available.
            ///
            /// - Remark: Generated from `#/components/schemas/actions-billing-usage/included_minutes`.
            public var included_minutes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown`.
            public struct minutes_used_breakdownPayload: Codable, Hashable, Sendable {
                /// Total minutes used on Ubuntu runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/UBUNTU`.
                public var UBUNTU: Swift.Int?
                /// Total minutes used on macOS runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/MACOS`.
                public var MACOS: Swift.Int?
                /// Total minutes used on Windows runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/WINDOWS`.
                public var WINDOWS: Swift.Int?
                /// Total minutes used on Ubuntu 4 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/ubuntu_4_core`.
                public var ubuntu_4_core: Swift.Int?
                /// Total minutes used on Ubuntu 8 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/ubuntu_8_core`.
                public var ubuntu_8_core: Swift.Int?
                /// Total minutes used on Ubuntu 16 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/ubuntu_16_core`.
                public var ubuntu_16_core: Swift.Int?
                /// Total minutes used on Ubuntu 32 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/ubuntu_32_core`.
                public var ubuntu_32_core: Swift.Int?
                /// Total minutes used on Ubuntu 64 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/ubuntu_64_core`.
                public var ubuntu_64_core: Swift.Int?
                /// Total minutes used on Windows 4 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/windows_4_core`.
                public var windows_4_core: Swift.Int?
                /// Total minutes used on Windows 8 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/windows_8_core`.
                public var windows_8_core: Swift.Int?
                /// Total minutes used on Windows 16 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/windows_16_core`.
                public var windows_16_core: Swift.Int?
                /// Total minutes used on Windows 32 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/windows_32_core`.
                public var windows_32_core: Swift.Int?
                /// Total minutes used on Windows 64 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/windows_64_core`.
                public var windows_64_core: Swift.Int?
                /// Total minutes used on macOS 12 core runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/macos_12_core`.
                public var macos_12_core: Swift.Int?
                /// Total minutes used on all runner machines.
                ///
                /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown/total`.
                public var total: Swift.Int?
                /// Creates a new `minutes_used_breakdownPayload`.
                ///
                /// - Parameters:
                ///   - UBUNTU: Total minutes used on Ubuntu runner machines.
                ///   - MACOS: Total minutes used on macOS runner machines.
                ///   - WINDOWS: Total minutes used on Windows runner machines.
                ///   - ubuntu_4_core: Total minutes used on Ubuntu 4 core runner machines.
                ///   - ubuntu_8_core: Total minutes used on Ubuntu 8 core runner machines.
                ///   - ubuntu_16_core: Total minutes used on Ubuntu 16 core runner machines.
                ///   - ubuntu_32_core: Total minutes used on Ubuntu 32 core runner machines.
                ///   - ubuntu_64_core: Total minutes used on Ubuntu 64 core runner machines.
                ///   - windows_4_core: Total minutes used on Windows 4 core runner machines.
                ///   - windows_8_core: Total minutes used on Windows 8 core runner machines.
                ///   - windows_16_core: Total minutes used on Windows 16 core runner machines.
                ///   - windows_32_core: Total minutes used on Windows 32 core runner machines.
                ///   - windows_64_core: Total minutes used on Windows 64 core runner machines.
                ///   - macos_12_core: Total minutes used on macOS 12 core runner machines.
                ///   - total: Total minutes used on all runner machines.
                public init(
                    UBUNTU: Swift.Int? = nil,
                    MACOS: Swift.Int? = nil,
                    WINDOWS: Swift.Int? = nil,
                    ubuntu_4_core: Swift.Int? = nil,
                    ubuntu_8_core: Swift.Int? = nil,
                    ubuntu_16_core: Swift.Int? = nil,
                    ubuntu_32_core: Swift.Int? = nil,
                    ubuntu_64_core: Swift.Int? = nil,
                    windows_4_core: Swift.Int? = nil,
                    windows_8_core: Swift.Int? = nil,
                    windows_16_core: Swift.Int? = nil,
                    windows_32_core: Swift.Int? = nil,
                    windows_64_core: Swift.Int? = nil,
                    macos_12_core: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.UBUNTU = UBUNTU
                    self.MACOS = MACOS
                    self.WINDOWS = WINDOWS
                    self.ubuntu_4_core = ubuntu_4_core
                    self.ubuntu_8_core = ubuntu_8_core
                    self.ubuntu_16_core = ubuntu_16_core
                    self.ubuntu_32_core = ubuntu_32_core
                    self.ubuntu_64_core = ubuntu_64_core
                    self.windows_4_core = windows_4_core
                    self.windows_8_core = windows_8_core
                    self.windows_16_core = windows_16_core
                    self.windows_32_core = windows_32_core
                    self.windows_64_core = windows_64_core
                    self.macos_12_core = macos_12_core
                    self.total = total
                }
                public enum CodingKeys: String, CodingKey {
                    case UBUNTU
                    case MACOS
                    case WINDOWS
                    case ubuntu_4_core
                    case ubuntu_8_core
                    case ubuntu_16_core
                    case ubuntu_32_core
                    case ubuntu_64_core
                    case windows_4_core
                    case windows_8_core
                    case windows_16_core
                    case windows_32_core
                    case windows_64_core
                    case macos_12_core
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/actions-billing-usage/minutes_used_breakdown`.
            public var minutes_used_breakdown: Components.Schemas.actions_hyphen_billing_hyphen_usage.minutes_used_breakdownPayload
            /// Creates a new `actions_hyphen_billing_hyphen_usage`.
            ///
            /// - Parameters:
            ///   - total_minutes_used: The sum of the free and paid GitHub Actions minutes used.
            ///   - total_paid_minutes_used: The total paid GitHub Actions minutes used.
            ///   - included_minutes: The amount of free GitHub Actions minutes available.
            ///   - minutes_used_breakdown:
            public init(
                total_minutes_used: Swift.Int,
                total_paid_minutes_used: Swift.Int,
                included_minutes: Swift.Int,
                minutes_used_breakdown: Components.Schemas.actions_hyphen_billing_hyphen_usage.minutes_used_breakdownPayload
            ) {
                self.total_minutes_used = total_minutes_used
                self.total_paid_minutes_used = total_paid_minutes_used
                self.included_minutes = included_minutes
                self.minutes_used_breakdown = minutes_used_breakdown
            }
            public enum CodingKeys: String, CodingKey {
                case total_minutes_used
                case total_paid_minutes_used
                case included_minutes
                case minutes_used_breakdown
            }
        }
        /// - Remark: Generated from `#/components/schemas/packages-billing-usage`.
        public struct packages_hyphen_billing_hyphen_usage: Codable, Hashable, Sendable {
            /// Sum of the free and paid storage space (GB) for GitHuub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/packages-billing-usage/total_gigabytes_bandwidth_used`.
            public var total_gigabytes_bandwidth_used: Swift.Int
            /// Total paid storage space (GB) for GitHuub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/packages-billing-usage/total_paid_gigabytes_bandwidth_used`.
            public var total_paid_gigabytes_bandwidth_used: Swift.Int
            /// Free storage space (GB) for GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/packages-billing-usage/included_gigabytes_bandwidth`.
            public var included_gigabytes_bandwidth: Swift.Int
            /// Creates a new `packages_hyphen_billing_hyphen_usage`.
            ///
            /// - Parameters:
            ///   - total_gigabytes_bandwidth_used: Sum of the free and paid storage space (GB) for GitHuub Packages.
            ///   - total_paid_gigabytes_bandwidth_used: Total paid storage space (GB) for GitHuub Packages.
            ///   - included_gigabytes_bandwidth: Free storage space (GB) for GitHub Packages.
            public init(
                total_gigabytes_bandwidth_used: Swift.Int,
                total_paid_gigabytes_bandwidth_used: Swift.Int,
                included_gigabytes_bandwidth: Swift.Int
            ) {
                self.total_gigabytes_bandwidth_used = total_gigabytes_bandwidth_used
                self.total_paid_gigabytes_bandwidth_used = total_paid_gigabytes_bandwidth_used
                self.included_gigabytes_bandwidth = included_gigabytes_bandwidth
            }
            public enum CodingKeys: String, CodingKey {
                case total_gigabytes_bandwidth_used
                case total_paid_gigabytes_bandwidth_used
                case included_gigabytes_bandwidth
            }
        }
        /// - Remark: Generated from `#/components/schemas/combined-billing-usage`.
        public struct combined_hyphen_billing_hyphen_usage: Codable, Hashable, Sendable {
            /// Numbers of days left in billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/combined-billing-usage/days_left_in_billing_cycle`.
            public var days_left_in_billing_cycle: Swift.Int
            /// Estimated storage space (GB) used in billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/combined-billing-usage/estimated_paid_storage_for_month`.
            public var estimated_paid_storage_for_month: Swift.Int
            /// Estimated sum of free and paid storage space (GB) used in billing cycle.
            ///
            /// - Remark: Generated from `#/components/schemas/combined-billing-usage/estimated_storage_for_month`.
            public var estimated_storage_for_month: Swift.Int
            /// Creates a new `combined_hyphen_billing_hyphen_usage`.
            ///
            /// - Parameters:
            ///   - days_left_in_billing_cycle: Numbers of days left in billing cycle.
            ///   - estimated_paid_storage_for_month: Estimated storage space (GB) used in billing cycle.
            ///   - estimated_storage_for_month: Estimated sum of free and paid storage space (GB) used in billing cycle.
            public init(
                days_left_in_billing_cycle: Swift.Int,
                estimated_paid_storage_for_month: Swift.Int,
                estimated_storage_for_month: Swift.Int
            ) {
                self.days_left_in_billing_cycle = days_left_in_billing_cycle
                self.estimated_paid_storage_for_month = estimated_paid_storage_for_month
                self.estimated_storage_for_month = estimated_storage_for_month
            }
            public enum CodingKeys: String, CodingKey {
                case days_left_in_billing_cycle
                case estimated_paid_storage_for_month
                case estimated_storage_for_month
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The organization name. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/org`.
        public typealias org = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        public typealias username = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get GitHub Actions billing for an organization
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/actions/get(billing/get-github-actions-billing-org)`.
    public enum billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org {
        public static let id: Swift.String = "billing/get-github-actions-billing-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/actions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/actions/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/actions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Path,
                headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/actions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/actions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/actions/get(billing/get-github-actions-billing-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Packages billing for an organization
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/packages/get(billing/get-github-packages-billing-org)`.
    public enum billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org {
        public static let id: Swift.String = "billing/get-github-packages-billing-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/packages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/packages/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/packages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Path,
                headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/packages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/packages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.packages_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.packages_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/packages/get(billing/get-github-packages-billing-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get shared storage billing for an organization
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /orgs/{org}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-org)`.
    public enum billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org {
        public static let id: Swift.String = "billing/get-shared-storage-billing-org"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/shared-storage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The organization name. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/shared-storage/GET/path/org`.
                public var org: Components.Parameters.org
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - org: The organization name. The name is not case sensitive.
                public init(org: Components.Parameters.org) {
                    self.org = org
                }
            }
            public var path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Path
            /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/shared-storage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Path,
                headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/shared-storage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orgs/{org}/settings/billing/shared-storage/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.combined_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.combined_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//orgs/{org}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-org)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_org.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Actions billing for a user
    ///
    /// Gets the summary of the free and paid GitHub Actions minutes used.
    ///
    /// Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/actions`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/actions/get(billing/get-github-actions-billing-user)`.
    public enum billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user {
        public static let id: Swift.String = "billing/get-github-actions-billing-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/actions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/actions/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/actions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Path,
                headers: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/actions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/settings/billing/actions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.actions_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.actions_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/settings/billing/actions/get(billing/get-github-actions-billing-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_github_hyphen_actions_hyphen_billing_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get GitHub Packages billing for a user
    ///
    /// Gets the free and paid storage used for GitHub Packages in gigabytes.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/packages`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/packages/get(billing/get-github-packages-billing-user)`.
    public enum billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user {
        public static let id: Swift.String = "billing/get-github-packages-billing-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/packages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/packages/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/packages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Path,
                headers: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/packages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/settings/billing/packages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.packages_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.packages_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/settings/billing/packages/get(billing/get-github-packages-billing-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_github_hyphen_packages_hyphen_billing_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get shared storage billing for a user
    ///
    /// Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    ///
    /// Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    ///
    /// OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
    ///
    /// - Remark: HTTP `GET /users/{username}/settings/billing/shared-storage`.
    /// - Remark: Generated from `#/paths//users/{username}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-user)`.
    public enum billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user {
        public static let id: Swift.String = "billing/get-shared-storage-billing-user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/shared-storage/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/shared-storage/GET/path/username`.
                public var username: Components.Parameters.username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                public init(username: Components.Parameters.username) {
                    self.username = username
                }
            }
            public var path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/settings/billing/shared-storage/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Path,
                headers: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/settings/billing/shared-storage/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/settings/billing/shared-storage/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.combined_hyphen_billing_hyphen_usage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.combined_hyphen_billing_hyphen_usage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/settings/billing/shared-storage/get(billing/get-shared-storage-billing-user)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.billing_sol_get_hyphen_shared_hyphen_storage_hyphen_billing_hyphen_user.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
